{% set vars = {'routerId': ""} %}
{% set vars = {'asNum': ""} %}
{% set vars = {'prefix': ""} %}
{% set vars = {'nxtHop': ""} %}
{% set vars = {'pathId': ""} %}
{% set vars = {'med': ""} %}
{% set vars = {'locPref': ""} %}
{% set vars = {'origin': "IGP"} %}
{% set vars = {'weight': "0"} %}
{% set vars = {'validRoute': False} %}
{% set vars = {'bestRoute': False} %}
{% set vars = {'members': ""} %}
{% if json_output -%}
{% for key in json_output %}
{% if "openconfig-network-instance:config" in key %}
{% set globalConfig = json_output["openconfig-network-instance:config"] %}
{% if vars.update({'routerId':globalConfig["router-id"]}) %}{% endif %}
{% if vars.update({'asNum':globalConfig["as"]}) %}{% endif %}
{% endif %}
{% endfor %}
BGP routing table information for VRF default
Router identifier {{ vars.routerId }}, local AS number {{ vars.asNum }} 
Route status codes: * - valid, > - best
Origin codes: i - IGP, e - EGP, ? - incomplete
     {{'%-20s'|format("Network")}}{{'%-20s'|format("Next Hop")}}{{'%-15s'|format("Metric")}}{{'%-15s'|format("LocPref")}}{{'%s'|format("Path")}}
{% for key in json_output %}
{% if "openconfig-network-instance:adj-rib-in-pre" in key %}
{% set routeList = json_output["openconfig-network-instance:adj-rib-in-pre"]["routes"]["route"] %}
{% elif "openconfig-network-instance:adj-rib-out-pre" in key %}
{% set routeList = json_output["openconfig-network-instance:adj-rib-out-pre"]["routes"]["route"] %}
{% elif "openconfig-network-instance:adj-rib-out-post" in key %}
{% set routeList = json_output["openconfig-network-instance:adj-rib-out-post"]["routes"]["route"] %}
{% elif "openconfig-network-instance:adj-rib-in-post" in key %}
{% set routeList = json_output["openconfig-network-instance:adj-rib-in-post"]["routes"]["route"] %}
{% elif "openconfig-network-instance:loc-rib" in key %}
{% set routeList = json_output["openconfig-network-instance:loc-rib"]["routes"]["route"] %}
{% else %}
{% endif %}
{% if routeList %}
{% for route in routeList %}
{% for key in route %}
  {% if vars.update({'members':''}) %} {% endif %}
  {% if vars.update({'prefix':route["prefix"]}) %}{% endif %}
  {% if vars.update({'weight':"0"}) %}{% endif %}
  {% if "state" in key %}
    {% if vars.update({'validRoute':route["state"]["valid-route"]}) %}{% endif %}
    {% if vars.update({'bestRoute':route["state"]["best-path"]}) %}{% endif %}
    {% if vars.update({'pathId':route["state"]["path-id"]}) %}{% endif %}
  {% endif %}
  {% if "openconfig-bgp-ext:attr-sets" in key %}
    {% set attr_sets = route[key] %}
    {% if vars.update({'origin':attr_sets["origin"]}) %}{% endif %}
    {% if vars.update({'nxtHop':attr_sets["next-hop"]}) %}{% endif %}
    {% if vars.update({'med':attr_sets["med"]}) %}{% endif %}
    {% if vars.update({'locPref':attr_sets["local-pref"]}) %}{% endif %}
    {% if "as-path" in attr_sets %}
      {% set as_path = attr_sets['as-path'] %}
      {% if "as-segment" in as_path %}
         {% set segements = as_path['as-segment'] %}
         {% set temp = [] %}
         {% for segment in segements %}
              {% if "state" in segment %}
                {% set mems = segment['state']['member'] %}
                {% for mem in mems %}
                {%  do temp.append(mem) %}
                {% endfor %}
              {% endif %}
         {% endfor %}
         {% if vars.update({'members': temp|join(" ")}) %} {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}
  {% if vars.origin == 'IGP' %}
    {% if vars.update({'origin':"i"}) %}{% endif %}
  {% elif vars.origin == 'EGP' %}
    {% if vars.update({'origin':"e"}) %}{% endif %}
  {% else %}
    {% if vars.update({'origin':"?"}) %}{% endif %}
  {% endif %}
{% endfor %}
{% if vars.validRoute == True %}
{% if vars.update({'validRoute':"*"}) %}{% endif %}
{% else %}
{% if vars.update({'validRoute':""}) %}{% endif %}
{% endif %}
{% if vars.bestRoute == True %}
{% if vars.update({'bestRoute':">"}) %}{% endif %}
{% else %}
{% if vars.update({'bestRoute':""}) %}{% endif %}
{% endif %}
{{'%-1s'|format(vars.validRoute)}}{{'%-4s'|format(vars.bestRoute)}}{{'%-20s'|format(vars.prefix)}}{{'%-20s'|format(vars.nxtHop)}}{{'%-15s'|format(vars.med)}}{{'%-15s'|format(vars.locPref)}}{{'%s'|format(vars.members)}} {{vars.origin}}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
