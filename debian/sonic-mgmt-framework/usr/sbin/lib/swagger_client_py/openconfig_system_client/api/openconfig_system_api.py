# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openconfig_system_client.api_client import ApiClient


class OpenconfigSystemApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def del_llist_openconfig_system_system_aaa_accounting_config_accounting_method(self, accounting_method, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: del_llist_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_aaa_accounting_config_accounting_method(accounting_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accounting_method: An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(accounting_method, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(accounting_method, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(self, accounting_method, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: del_llist_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(accounting_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accounting_method: An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accounting_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_system_system_aaa_accounting_config_accounting_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accounting_method' is set
        if ('accounting_method' not in params or
                params['accounting_method'] is None):
            raise ValueError("Missing the required parameter `accounting_method` when calling `del_llist_openconfig_system_system_aaa_accounting_config_accounting_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accounting_method' in params:
            path_params['accounting-method'] = params['accounting_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config/accounting-method={accounting-method}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_llist_openconfig_system_system_aaa_authentication_config_authentication_method(self, authentication_method, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: del_llist_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_aaa_authentication_config_authentication_method(authentication_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authentication_method: Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(authentication_method, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(authentication_method, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(self, authentication_method, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: del_llist_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(authentication_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authentication_method: Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authentication_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_system_system_aaa_authentication_config_authentication_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authentication_method' is set
        if ('authentication_method' not in params or
                params['authentication_method'] is None):
            raise ValueError("Missing the required parameter `authentication_method` when calling `del_llist_openconfig_system_system_aaa_authentication_config_authentication_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'authentication_method' in params:
            path_params['authentication-method'] = params['authentication_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config/authentication-method={authentication-method}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_llist_openconfig_system_system_aaa_authorization_config_authorization_method(self, authorization_method, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: del_llist_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_aaa_authorization_config_authorization_method(authorization_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization_method: Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(authorization_method, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(authorization_method, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(self, authorization_method, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: del_llist_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(authorization_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization_method: Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_system_system_aaa_authorization_config_authorization_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization_method' is set
        if ('authorization_method' not in params or
                params['authorization_method'] is None):
            raise ValueError("Missing the required parameter `authorization_method` when calling `del_llist_openconfig_system_system_aaa_authorization_config_authorization_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'authorization_method' in params:
            path_params['authorization-method'] = params['authorization_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config/authorization-method={authorization-method}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_llist_openconfig_system_system_dns_config_search(self, search, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: del_llist_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_dns_config_search(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: An ordered list of domains to search when resolving a host name. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_system_system_dns_config_search_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_system_system_dns_config_search_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_system_system_dns_config_search_with_http_info(self, search, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: del_llist_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_dns_config_search_with_http_info(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: An ordered list of domains to search when resolving a host name. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_system_system_dns_config_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params or
                params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `del_llist_openconfig_system_system_dns_config_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search' in params:
            path_params['search'] = params['search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config/search={search}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias(self, hostname, alias, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias(hostname, alias, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str alias: Additional aliases for the hostname (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, alias, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, alias, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(self, hostname, alias, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, alias, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str alias: Additional aliases for the hostname (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'alias']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `del_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501
        if 'alias' in params:
            path_params['alias'] = params['alias']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/alias={alias}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(self, hostname, ipv4_address, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(hostname, ipv4_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str ipv4_address: List of IPv4 addressses for the host entry (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, ipv4_address, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, ipv4_address, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(self, hostname, ipv4_address, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, ipv4_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str ipv4_address: List of IPv4 addressses for the host entry (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'ipv4_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501
        # verify the required parameter 'ipv4_address' is set
        if ('ipv4_address' not in params or
                params['ipv4_address'] is None):
            raise ValueError("Missing the required parameter `ipv4_address` when calling `del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501
        if 'ipv4_address' in params:
            path_params['ipv4-address'] = params['ipv4_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv4-address={ipv4-address}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(self, hostname, ipv6_address, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(hostname, ipv6_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str ipv6_address: List of IPv6 addresses for the host entry (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, ipv6_address, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, ipv6_address, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(self, hostname, ipv6_address, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, ipv6_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str ipv6_address: List of IPv6 addresses for the host entry (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'ipv6_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501
        # verify the required parameter 'ipv6_address' is set
        if ('ipv6_address' not in params or
                params['ipv6_address'] is None):
            raise ValueError("Missing the required parameter `ipv6_address` when calling `del_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501
        if 'ipv6_address' in params:
            path_params['ipv6-address'] = params['ipv6_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv6-address={ipv6-address}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_llist_openconfig_system_system_grpc_server_config_listen_addresses(self, listen_addresses, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: del_llist_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_grpc_server_config_listen_addresses(listen_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str listen_addresses: The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(listen_addresses, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(listen_addresses, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(self, listen_addresses, **kwargs):  # noqa: E501
        """del_llist_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: del_llist_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(listen_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str listen_addresses: The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['listen_addresses']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_system_system_grpc_server_config_listen_addresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'listen_addresses' is set
        if ('listen_addresses' not in params or
                params['listen_addresses'] is None):
            raise ValueError("Missing the required parameter `listen_addresses` when calling `del_llist_openconfig_system_system_grpc_server_config_listen_addresses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'listen_addresses' in params:
            path_params['listen-addresses'] = params['listen_addresses']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/listen-addresses={listen-addresses}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_aaa_accounting_events_event(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_accounting_events_event(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_aaa_authentication_users_user(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_authentication_users_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_aaa_authorization_events_event(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_authorization_events_event(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_aaa_server_groups_server_group(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_server_groups_server_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_list_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_dns_host_entries_host_entry(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: delete_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_dns_host_entries_host_entry(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: delete_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_dns_servers_server(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: delete_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_dns_servers_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_dns_servers_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_dns_servers_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_dns_servers_server_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: delete_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_dns_servers_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_logging_console_selectors_selector(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: delete_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_logging_console_selectors_selector(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: delete_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_logging_remote_servers_remote_server(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: delete_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_logging_remote_servers_remote_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: delete_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `delete_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_messages_debug_entries_debug_service(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: delete_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_messages_debug_entries_debug_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: delete_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_system_system_ntp_servers_server(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: delete_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_ntp_servers_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_system_system_ntp_servers_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_system_system_ntp_servers_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_system_system_ntp_servers_server_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: delete_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_system_system_ntp_servers_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system  # noqa: E501

        OperationId: delete_openconfig_system_system Enclosing container for system-related configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system  # noqa: E501

        OperationId: delete_openconfig_system_system Enclosing container for system-related configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa Top-level container for AAA services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa Top-level container for AAA services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_accounting(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting Top-level container for AAA accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_accounting_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_accounting_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_accounting_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting Top-level container for AAA accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_accounting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_accounting_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_accounting_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_accounting_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_accounting_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_accounting_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_accounting_config_accounting_method(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_config_accounting_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_accounting_config_accounting_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config/accounting-method', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_accounting_events(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_events  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_events Enclosing container for defining handling of events for accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_accounting_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_accounting_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_accounting_events_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_events  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_events Enclosing container for defining handling of events for accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_accounting_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_accounting_events_event(self, event_type, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_events_event(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `delete_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_accounting_events_event_config_record(self, event_type, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_events_event_config_record(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_accounting_events_event_config_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `delete_openconfig_system_system_aaa_accounting_events_event_config_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/config/record', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_admin_user(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_admin_user  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_admin_user Top-level container for the system root or admin user configuration and operational state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_admin_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_admin_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_admin_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_admin_user_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_admin_user  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_admin_user Top-level container for the system root or admin user configuration and operational state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_admin_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_admin_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_admin_user_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_admin_user_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_admin_user_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config/admin-password', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config/admin-password-hashed', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_config_authentication_method(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_config_authentication_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_config_authentication_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config/authentication-method', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_users(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users Enclosing container list of local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_users_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users Enclosing container list of local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_users_user(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_users_user_config_password(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_config_password(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_users_user_config_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_openconfig_system_system_aaa_authentication_users_user_config_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/password', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_openconfig_system_system_aaa_authentication_users_user_config_password_hashed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/password-hashed', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_users_user_config_role(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user_config_role  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user_config_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_config_role(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user_config_role  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user_config_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_users_user_config_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_openconfig_system_system_aaa_authentication_users_user_config_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/role', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(self, username, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_openconfig_system_system_aaa_authentication_users_user_config_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/ssh-key', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authorization(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization Top-level container for AAA authorization configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authorization_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authorization_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authorization_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization Top-level container for AAA authorization configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authorization" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authorization_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authorization_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authorization_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authorization_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authorization_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authorization_config_authorization_method(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_config_authorization_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authorization_config_authorization_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config/authorization-method', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authorization_events(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization_events  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization_events Enclosing container for the set of events subject to authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authorization_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authorization_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authorization_events_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization_events  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization_events Enclosing container for the set of events subject to authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authorization_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_authorization_events_event(self, event_type, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_events_event(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `delete_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups Enclosing container for AAA server groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups Enclosing container for AAA server groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_config_type(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_config_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_config_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_config_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/config/type', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers Enclosing container the list of servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers Enclosing container the list of servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config/name', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config/timeout', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius Top-level container for RADIUS server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius Top-level container for RADIUS server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/acct-port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/auth-port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/retransmit-attempts', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/secret-key', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/source-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs Top-level container for TACACS+ server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs Top-level container for TACACS+ server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/secret-key', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address  # noqa: E501

        OperationId: delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/source-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_clock(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_clock  # noqa: E501

        OperationId: delete_openconfig_system_system_clock Top-level container for clock configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_clock(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_clock_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_clock_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_clock_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_clock  # noqa: E501

        OperationId: delete_openconfig_system_system_clock Top-level container for clock configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_clock_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_clock" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_clock_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_clock_config  # noqa: E501

        OperationId: delete_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_clock_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_clock_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_clock_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_clock_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_clock_config  # noqa: E501

        OperationId: delete_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_clock_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_clock_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_clock_config_timezone_name(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: delete_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_clock_config_timezone_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_clock_config_timezone_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_clock_config_timezone_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_clock_config_timezone_name_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: delete_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_clock_config_timezone_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_clock_config_timezone_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config/timezone-name', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config  # noqa: E501

        OperationId: delete_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config  # noqa: E501

        OperationId: delete_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_config_domain_name(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config_domain_name  # noqa: E501

        OperationId: delete_openconfig_system_system_config_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_domain_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_config_domain_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_config_domain_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_config_domain_name_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config_domain_name  # noqa: E501

        OperationId: delete_openconfig_system_system_config_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_domain_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_config_domain_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/domain-name', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_config_hostname(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: delete_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_hostname(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_config_hostname_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_config_hostname_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_config_hostname_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: delete_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_hostname_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_config_hostname" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/hostname', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_config_login_banner(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config_login_banner  # noqa: E501

        OperationId: delete_openconfig_system_system_config_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_login_banner(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_config_login_banner_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_config_login_banner_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_config_login_banner_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config_login_banner  # noqa: E501

        OperationId: delete_openconfig_system_system_config_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_login_banner_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_config_login_banner" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/login-banner', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_config_motd_banner(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config_motd_banner  # noqa: E501

        OperationId: delete_openconfig_system_system_config_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_motd_banner(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_config_motd_banner_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_config_motd_banner_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_config_motd_banner_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_config_motd_banner  # noqa: E501

        OperationId: delete_openconfig_system_system_config_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_config_motd_banner_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_config_motd_banner" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/motd-banner', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns  # noqa: E501

        OperationId: delete_openconfig_system_system_dns Enclosing container for DNS resolver data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns  # noqa: E501

        OperationId: delete_openconfig_system_system_dns Enclosing container for DNS resolver data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_config  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_config  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_config_search(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_config_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_config_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_config_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_config_search_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_config_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_config_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config/search', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_host_entries(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries Enclosing container for list of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_host_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_host_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_host_entries_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries Enclosing container for list of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_host_entries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_host_entries_host_entry(self, hostname, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_host_entry(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `delete_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_host_entries_host_entry_config_alias(self, hostname, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_host_entry_config_alias(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_host_entries_host_entry_config_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `delete_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/alias', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(self, hostname, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv4-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(self, hostname, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `delete_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv6-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_servers(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_servers  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_servers Enclosing container for DNS resolver list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_servers_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_servers  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_servers Enclosing container for DNS resolver list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_servers_server(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_servers_server(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_servers_server_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_servers_server_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_servers_server_with_http_info(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_servers_server_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_dns_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_dns_servers_server_config_port(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_servers_server_config_port(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_dns_servers_server_config_port_with_http_info(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: delete_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_dns_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_dns_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/config/port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_grpc_server(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server Top-level container for the gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_grpc_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_grpc_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_grpc_server_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server Top-level container for the gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_grpc_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_grpc_server_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_grpc_server_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_grpc_server_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_grpc_server_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_grpc_server_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_grpc_server_config_certificate_id(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_certificate_id  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_certificate_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_certificate_id  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_grpc_server_config_certificate_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/certificate-id', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_grpc_server_config_enable(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_grpc_server_config_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_grpc_server_config_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_grpc_server_config_enable_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_grpc_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/enable', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_grpc_server_config_listen_addresses(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_listen_addresses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_grpc_server_config_listen_addresses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/listen-addresses', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_grpc_server_config_port(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_port  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_grpc_server_config_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_grpc_server_config_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_grpc_server_config_port_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_port  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_grpc_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_grpc_server_config_transport_security(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_transport_security  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_transport_security(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_grpc_server_config_transport_security_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_grpc_server_config_transport_security_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_grpc_server_config_transport_security_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_grpc_server_config_transport_security  # noqa: E501

        OperationId: delete_openconfig_system_system_grpc_server_config_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_grpc_server_config_transport_security_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_grpc_server_config_transport_security" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/transport-security', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging  # noqa: E501

        OperationId: delete_openconfig_system_system_logging Top-level container for data related to logging / syslog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging  # noqa: E501

        OperationId: delete_openconfig_system_system_logging Top-level container for data related to logging / syslog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_console(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_console  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_console(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_console_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_console_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_console_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_console  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_console_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_console" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_console_selectors(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_console_selectors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_console_selectors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_console_selectors_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_console_selectors_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_console_selectors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_console_selectors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_console_selectors_selector(self, facility, severity, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_console_selectors_selector(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, facility, severity, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `delete_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `delete_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_remote_servers(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers Enclosing container for the list of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_remote_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_remote_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_remote_servers_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers Enclosing container for the list of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_remote_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_remote_servers_remote_server(self, host, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, host, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `delete_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port(self, host, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(self, host, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `delete_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config/remote-port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(self, host, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(self, host, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `delete_openconfig_system_system_logging_remote_servers_remote_server_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config/source-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_remote_servers_remote_server_selectors(self, host, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server_selectors  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_selectors(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(self, host, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server_selectors  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_remote_servers_remote_server_selectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `delete_openconfig_system_system_logging_remote_servers_remote_server_selectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, facility, severity, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, facility, severity, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `delete_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_memory(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_memory  # noqa: E501

        OperationId: delete_openconfig_system_system_memory Top-level container for system memory data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_memory(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_memory_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_memory_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_memory_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_memory  # noqa: E501

        OperationId: delete_openconfig_system_system_memory Top-level container for system memory data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_memory_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_memory" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/memory', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_messages(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages  # noqa: E501

        OperationId: delete_openconfig_system_system_messages Top-level container for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_messages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_messages_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_messages_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages  # noqa: E501

        OperationId: delete_openconfig_system_system_messages Top-level container for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_messages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_messages_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_config  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_messages_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_messages_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_messages_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_config  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_messages_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_messages_config_severity(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_config_severity(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_messages_config_severity_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_messages_config_severity_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_messages_config_severity_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_config_severity_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_messages_config_severity" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config/severity', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_messages_debug_entries(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_debug_entries  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_debug_entries Enclosing container for list of debugs to enable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_debug_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_messages_debug_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_messages_debug_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_messages_debug_entries_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_debug_entries  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_debug_entries Enclosing container for list of debugs to enable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_debug_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_messages_debug_entries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_messages_debug_entries_debug_service(self, service, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_debug_entries_debug_service(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, service, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `delete_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(self, service, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(self, service, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `delete_openconfig_system_system_messages_debug_entries_debug_service_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/config/enabled', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp Top-level container for NTP configuration and state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp Top-level container for NTP configuration and state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_config_enable_ntp_auth(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_config_enable_ntp_auth  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_config_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_config_enable_ntp_auth(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_config_enable_ntp_auth  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_config_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_config_enable_ntp_auth" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/enable-ntp-auth', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_config_enabled(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_config_enabled(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_config_enabled_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_config_enabled_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_config_enabled_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_config_enabled_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/enabled', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_config_ntp_source_address(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_config_ntp_source_address  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_config_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_config_ntp_source_address(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_config_ntp_source_address  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_config_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_config_ntp_source_address" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/ntp-source-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_ntp_keys(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_ntp_keys  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_ntp_keys Enclosing container for list of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_ntp_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_ntp_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_ntp_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_ntp_keys_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_ntp_keys  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_ntp_keys Enclosing container for list of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_ntp_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_ntp_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_ntp_keys_ntp_key(self, key_id, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_ntp_keys_ntp_key(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `delete_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(self, key_id, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config/key-type', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value(self, key_id, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `delete_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config/key-value', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_servers(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers Enclosing container for the list of NTP servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_servers_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers Enclosing container for the list of NTP servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_servers_server(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_servers_server_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_servers_server_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_servers_server_with_http_info(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_ntp_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_servers_server_config_association_type(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_association_type  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_association_type(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_association_type  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_servers_server_config_association_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_ntp_servers_server_config_association_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/association-type', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_servers_server_config_iburst(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_iburst  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_iburst(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_iburst  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_servers_server_config_iburst" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_ntp_servers_server_config_iburst`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/iburst', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_servers_server_config_port(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_port(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_servers_server_config_port_with_http_info(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_ntp_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_servers_server_config_prefer(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_prefer  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_prefer(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_prefer  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_servers_server_config_prefer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_ntp_servers_server_config_prefer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/prefer', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ntp_servers_server_config_version(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_version  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_version(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ntp_servers_server_config_version_with_http_info(self, address, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ntp_servers_server_config_version  # noqa: E501

        OperationId: delete_openconfig_system_system_ntp_servers_server_config_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ntp_servers_server_config_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_openconfig_system_system_ntp_servers_server_config_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/version', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_processes(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_processes  # noqa: E501

        OperationId: delete_openconfig_system_system_processes Parameters related to all monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_processes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_processes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_processes_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_processes_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_processes  # noqa: E501

        OperationId: delete_openconfig_system_system_processes Parameters related to all monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_processes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_processes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ssh_server(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server Top-level container for ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ssh_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ssh_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ssh_server_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server Top-level container for ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ssh_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ssh_server_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ssh_server_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ssh_server_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ssh_server_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ssh_server_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ssh_server_config_enable(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ssh_server_config_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ssh_server_config_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ssh_server_config_enable_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ssh_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/enable', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ssh_server_config_protocol_version(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_protocol_version  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_protocol_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_protocol_version  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ssh_server_config_protocol_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/protocol-version', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ssh_server_config_rate_limit(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_rate_limit  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_rate_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_rate_limit  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ssh_server_config_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/rate-limit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ssh_server_config_session_limit(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_session_limit  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_session_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ssh_server_config_session_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ssh_server_config_session_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ssh_server_config_session_limit_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_session_limit  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_session_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ssh_server_config_session_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/session-limit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_ssh_server_config_timeout(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_timeout  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_timeout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_ssh_server_config_timeout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_ssh_server_config_timeout_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_ssh_server_config_timeout_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_ssh_server_config_timeout  # noqa: E501

        OperationId: delete_openconfig_system_system_ssh_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_ssh_server_config_timeout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_ssh_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/timeout', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_telnet_server(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server Top-level container for telnet terminal servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_telnet_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_telnet_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_telnet_server_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server Top-level container for telnet terminal servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_telnet_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_telnet_server_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_telnet_server_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_telnet_server_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_telnet_server_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_telnet_server_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_telnet_server_config_enable(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_telnet_server_config_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_telnet_server_config_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_telnet_server_config_enable_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_telnet_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/enable', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_telnet_server_config_rate_limit(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config_rate_limit  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_rate_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config_rate_limit  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_telnet_server_config_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/rate-limit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_telnet_server_config_session_limit(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config_session_limit  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_session_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_telnet_server_config_session_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_telnet_server_config_session_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_telnet_server_config_session_limit_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config_session_limit  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_session_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_telnet_server_config_session_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/session-limit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_system_system_telnet_server_config_timeout(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config_timeout  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_timeout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_system_system_telnet_server_config_timeout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_system_system_telnet_server_config_timeout_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_system_system_telnet_server_config_timeout_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_system_system_telnet_server_config_timeout  # noqa: E501

        OperationId: delete_openconfig_system_system_telnet_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_system_system_telnet_server_config_timeout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_system_system_telnet_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/timeout', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_aaa_accounting_events_event(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_accounting_events_event(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingEventsEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_aaa_authentication_users_user(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_authentication_users_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_aaa_authorization_events_event(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_authorization_events_event(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationEventsEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_aaa_server_groups_server_group(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_server_groups_server_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_alarms_alarm(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_alarms_alarm  # noqa: E501

        OperationId: get_list_openconfig_system_system_alarms_alarm List of alarms, keyed by a unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_alarms_alarm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAlarmsAlarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_alarms_alarm_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_alarms_alarm_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_alarms_alarm_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_alarms_alarm  # noqa: E501

        OperationId: get_list_openconfig_system_system_alarms_alarm List of alarms, keyed by a unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_alarms_alarm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAlarmsAlarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_alarms_alarm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms/alarm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarmsAlarm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_cpus_cpu(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_cpus_cpu  # noqa: E501

        OperationId: get_list_openconfig_system_system_cpus_cpu List of CPU cores on the system (including logical CPUs on hyperthreaded systems), keyed by either a numerical index, or the ALL value for an entry representing the aggregation across all CPUs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_cpus_cpu(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemCpusCpu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_cpus_cpu_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_cpus_cpu_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_cpus_cpu_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_cpus_cpu  # noqa: E501

        OperationId: get_list_openconfig_system_system_cpus_cpu List of CPU cores on the system (including logical CPUs on hyperthreaded systems), keyed by either a numerical index, or the ALL value for an entry representing the aggregation across all CPUs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_cpus_cpu_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemCpusCpu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_cpus_cpu" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_dns_host_entries_host_entry(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: get_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_dns_host_entries_host_entry(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: get_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_dns_servers_server(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: get_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_dns_servers_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_dns_servers_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_dns_servers_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_dns_servers_server_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: get_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_dns_servers_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsServersServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_logging_console_selectors_selector(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: get_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_logging_console_selectors_selector(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelector
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: get_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelector
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingConsoleSelectorsSelector',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_logging_remote_servers_remote_server(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: get_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_logging_remote_servers_remote_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: get_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_messages_debug_entries_debug_service(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: get_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_messages_debug_entries_debug_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: get_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesDebugEntriesDebugService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_ntp_ntp_keys_ntp_key(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: get_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_ntp_ntp_keys_ntp_key(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: get_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_ntp_servers_server(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: get_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_ntp_servers_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_ntp_servers_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_ntp_servers_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_ntp_servers_server_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: get_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_ntp_servers_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_system_system_processes_process(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_processes_process  # noqa: E501

        OperationId: get_list_openconfig_system_system_processes_process List of monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_processes_process(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemProcessesProcess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_system_system_processes_process_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_system_system_processes_process_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_system_system_processes_process_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_system_system_processes_process  # noqa: E501

        OperationId: get_list_openconfig_system_system_processes_process List of monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_system_system_processes_process_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemProcessesProcess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_system_system_processes_process" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_system_system_aaa_accounting_config_accounting_method(self, accounting_method, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: get_llist_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_aaa_accounting_config_accounting_method(accounting_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accounting_method: An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system. (required)
        :return: GetOpenconfigSystemSystemAaaAccountingConfigAccountingMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(accounting_method, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(accounting_method, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(self, accounting_method, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: get_llist_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(accounting_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accounting_method: An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system. (required)
        :return: GetOpenconfigSystemSystemAaaAccountingConfigAccountingMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accounting_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_system_system_aaa_accounting_config_accounting_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accounting_method' is set
        if ('accounting_method' not in params or
                params['accounting_method'] is None):
            raise ValueError("Missing the required parameter `accounting_method` when calling `get_llist_openconfig_system_system_aaa_accounting_config_accounting_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accounting_method' in params:
            path_params['accounting-method'] = params['accounting_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config/accounting-method={accounting-method}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingConfigAccountingMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_system_system_aaa_authentication_config_authentication_method(self, authentication_method, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: get_llist_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_aaa_authentication_config_authentication_method(authentication_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authentication_method: Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access. (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(authentication_method, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(authentication_method, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(self, authentication_method, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: get_llist_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(authentication_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authentication_method: Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access. (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authentication_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_system_system_aaa_authentication_config_authentication_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authentication_method' is set
        if ('authentication_method' not in params or
                params['authentication_method'] is None):
            raise ValueError("Missing the required parameter `authentication_method` when calling `get_llist_openconfig_system_system_aaa_authentication_config_authentication_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'authentication_method' in params:
            path_params['authentication-method'] = params['authentication_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config/authentication-method={authentication-method}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_system_system_aaa_authorization_config_authorization_method(self, authorization_method, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: get_llist_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_aaa_authorization_config_authorization_method(authorization_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization_method: Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists. (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(authorization_method, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(authorization_method, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(self, authorization_method, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: get_llist_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(authorization_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization_method: Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists. (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_system_system_aaa_authorization_config_authorization_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization_method' is set
        if ('authorization_method' not in params or
                params['authorization_method'] is None):
            raise ValueError("Missing the required parameter `authorization_method` when calling `get_llist_openconfig_system_system_aaa_authorization_config_authorization_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'authorization_method' in params:
            path_params['authorization-method'] = params['authorization_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config/authorization-method={authorization-method}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_system_system_dns_config_search(self, search, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: get_llist_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_dns_config_search(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: An ordered list of domains to search when resolving a host name. (required)
        :return: GetOpenconfigSystemSystemDnsConfigSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_system_system_dns_config_search_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_system_system_dns_config_search_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_system_system_dns_config_search_with_http_info(self, search, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: get_llist_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_dns_config_search_with_http_info(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: An ordered list of domains to search when resolving a host name. (required)
        :return: GetOpenconfigSystemSystemDnsConfigSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_system_system_dns_config_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params or
                params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `get_llist_openconfig_system_system_dns_config_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search' in params:
            path_params['search'] = params['search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config/search={search}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsConfigSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias(self, hostname, alias, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias(hostname, alias, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str alias: Additional aliases for the hostname (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, alias, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, alias, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(self, hostname, alias, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, alias, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str alias: Additional aliases for the hostname (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'alias']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `get_llist_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501
        if 'alias' in params:
            path_params['alias'] = params['alias']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/alias={alias}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(self, hostname, ipv4_address, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(hostname, ipv4_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str ipv4_address: List of IPv4 addressses for the host entry (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, ipv4_address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, ipv4_address, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(self, hostname, ipv4_address, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, ipv4_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str ipv4_address: List of IPv4 addressses for the host entry (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'ipv4_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501
        # verify the required parameter 'ipv4_address' is set
        if ('ipv4_address' not in params or
                params['ipv4_address'] is None):
            raise ValueError("Missing the required parameter `ipv4_address` when calling `get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501
        if 'ipv4_address' in params:
            path_params['ipv4-address'] = params['ipv4_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv4-address={ipv4-address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(self, hostname, ipv6_address, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(hostname, ipv6_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str ipv6_address: List of IPv6 addresses for the host entry (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, ipv6_address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, ipv6_address, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(self, hostname, ipv6_address, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, ipv6_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param str ipv6_address: List of IPv6 addresses for the host entry (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'ipv6_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501
        # verify the required parameter 'ipv6_address' is set
        if ('ipv6_address' not in params or
                params['ipv6_address'] is None):
            raise ValueError("Missing the required parameter `ipv6_address` when calling `get_llist_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501
        if 'ipv6_address' in params:
            path_params['ipv6-address'] = params['ipv6_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv6-address={ipv6-address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_system_system_grpc_server_config_listen_addresses(self, listen_addresses, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: get_llist_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_grpc_server_config_listen_addresses(listen_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str listen_addresses: The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address (required)
        :return: GetOpenconfigSystemSystemGrpcServerConfigListenAddresses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(listen_addresses, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(listen_addresses, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(self, listen_addresses, **kwargs):  # noqa: E501
        """get_llist_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: get_llist_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(listen_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str listen_addresses: The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address (required)
        :return: GetOpenconfigSystemSystemGrpcServerConfigListenAddresses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['listen_addresses']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_system_system_grpc_server_config_listen_addresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'listen_addresses' is set
        if ('listen_addresses' not in params or
                params['listen_addresses'] is None):
            raise ValueError("Missing the required parameter `listen_addresses` when calling `get_llist_openconfig_system_system_grpc_server_config_listen_addresses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'listen_addresses' in params:
            path_params['listen-addresses'] = params['listen_addresses']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/listen-addresses={listen-addresses}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerConfigListenAddresses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system  # noqa: E501

        OperationId: get_openconfig_system_system Enclosing container for system-related configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system  # noqa: E501

        OperationId: get_openconfig_system_system Enclosing container for system-related configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa  # noqa: E501

        OperationId: get_openconfig_system_system_aaa Top-level container for AAA services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa  # noqa: E501

        OperationId: get_openconfig_system_system_aaa Top-level container for AAA services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting Top-level container for AAA accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccounting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting Top-level container for AAA accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccounting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccounting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_config_accounting_method(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_config_accounting_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingConfigAccountingMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingConfigAccountingMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_config_accounting_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config/accounting-method', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingConfigAccountingMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_events(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events Enclosing container for defining handling of events for accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_events_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events Enclosing container for defining handling of events for accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingEvents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_events_event(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingEventsEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_events_event_config(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_config Configuration data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_config(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_config Configuration data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_events_event_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_accounting_events_event_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingEventsEventConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_events_event_config_record(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_config_record(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_events_event_config_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_accounting_events_event_config_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/config/record', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_events_event_state(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_state Operational state data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_state(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_events_event_state_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_events_event_state_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_events_event_state_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_state Operational state data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_state_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_events_event_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_accounting_events_event_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingEventsEventState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_events_event_state_event_type(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_state_event_type  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_state_event_type The type of activity to record at the AAA accounting server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_state_event_type(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventStateEventType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_events_event_state_event_type_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_events_event_state_event_type_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_events_event_state_event_type_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_state_event_type  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_state_event_type The type of activity to record at the AAA accounting server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_state_event_type_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventStateEventType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_events_event_state_event_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_accounting_events_event_state_event_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/state/event-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingEventsEventStateEventType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_events_event_state_record(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_state_record  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_state_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_state_record(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventStateRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_events_event_state_record_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_events_event_state_record_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_events_event_state_record_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_events_event_state_record  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_events_event_state_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_events_event_state_record_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :return: GetOpenconfigSystemSystemAaaAccountingEventsEventStateRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_events_event_state_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_accounting_events_event_state_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/state/record', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingEventsEventStateRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_state Operational state data for user accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_state Operational state data for user accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_accounting_state_accounting_method(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_state_accounting_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_state_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_state_accounting_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingStateAccountingMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_accounting_state_accounting_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_accounting_state_accounting_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_accounting_state_accounting_method_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_accounting_state_accounting_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_accounting_state_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_accounting_state_accounting_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAccountingStateAccountingMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_accounting_state_accounting_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/state/accounting-method', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAccountingStateAccountingMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthentication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthentication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthentication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_admin_user(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user Top-level container for the system root or admin user configuration and operational state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_admin_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_admin_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_admin_user_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user Top-level container for the system root or admin user configuration and operational state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_admin_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationAdminUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_admin_user_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_admin_user_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config/admin-password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPasswordHashed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPasswordHashed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config/admin-password-hashed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPasswordHashed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_admin_user_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_state Operational state data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_admin_user_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_admin_user_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_admin_user_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_state Operational state data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_admin_user_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationAdminUserState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/state/admin-password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminPassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminPasswordHashed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminPasswordHashed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_admin_user_state_admin_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/state/admin-password-hashed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminPasswordHashed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username Name of the administrator user account, e.g., admin, root, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username Name of the administrator user account, e.g., admin, root, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_admin_user_state_admin_username" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/state/admin-username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationAdminUserStateAdminUsername',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_config_authentication_method(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_config_authentication_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_config_authentication_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config/authentication-method', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_state Operational state data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_state Operational state data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_state_authentication_method(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_state_authentication_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_state_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_state_authentication_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationStateAuthenticationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_state_authentication_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_state_authentication_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_state_authentication_method_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_state_authentication_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_state_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_state_authentication_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationStateAuthenticationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_state_authentication_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/state/authentication-method', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationStateAuthenticationMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users Enclosing container list of local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users Enclosing container list of local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_config(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config Configuration data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config Configuration data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_config_password(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_password(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_config_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_config_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPasswordHashed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPasswordHashed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_config_password_hashed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/password-hashed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPasswordHashed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_config_role(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config_role  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_role(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config_role  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_config_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_config_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/role', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigSshKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigSshKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_config_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/ssh-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserConfigSshKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_state(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state Operational state data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_state_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_state_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_state_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state Operational state data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_state_password(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_password  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_password(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStatePassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_state_password_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_state_password_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_state_password_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_password  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_password_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStatePassword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_state_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_state_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/state/password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserStatePassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStatePasswordHashed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStatePasswordHashed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_state_password_hashed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/state/password-hashed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserStatePasswordHashed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_state_role(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_role  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_role(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_state_role_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_state_role_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_state_role_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_role  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_role_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_state_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_state_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/state/role', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateSshKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateSshKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_state_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/state/ssh-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateSshKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authentication_users_user_state_username(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_username  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_username Assigned username for this user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_username(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authentication_users_user_state_username_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authentication_users_user_state_username_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authentication_users_user_state_username_with_http_info(self, username, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authentication_users_user_state_username  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authentication_users_user_state_username Assigned username for this user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authentication_users_user_state_username_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :return: GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authentication_users_user_state_username" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_openconfig_system_system_aaa_authentication_users_user_state_username`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/state/username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthenticationUsersUserStateUsername',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization Top-level container for AAA authorization configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization Top-level container for AAA authorization configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_config_authorization_method(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_config_authorization_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_config_authorization_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config/authorization-method', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_events(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events Enclosing container for the set of events subject to authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_events_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events Enclosing container for the set of events subject to authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationEvents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_events_event(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_event(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationEventsEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_events_event_config(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events_event_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events_event_config Configuration data for each authorized event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_event_config(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEventConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events_event_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events_event_config Configuration data for each authorized event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEventConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_events_event_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_authorization_events_event_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationEventsEventConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_events_event_state(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events_event_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events_event_state Operational state data for each authorized activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_event_state(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEventState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_events_event_state_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_events_event_state_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_events_event_state_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events_event_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events_event_state Operational state data for each authorized activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_event_state_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEventState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_events_event_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_authorization_events_event_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationEventsEventState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_events_event_state_event_type(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events_event_state_event_type  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events_event_state_event_type The type of event to record at the AAA authorization server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_event_state_event_type(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEventStateEventType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_events_event_state_event_type_with_http_info(event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_events_event_state_event_type_with_http_info(event_type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_events_event_state_event_type_with_http_info(self, event_type, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_events_event_state_event_type  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_events_event_state_event_type The type of event to record at the AAA authorization server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_events_event_state_event_type_with_http_info(event_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :return: GetOpenconfigSystemSystemAaaAuthorizationEventsEventStateEventType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_events_event_state_event_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_openconfig_system_system_aaa_authorization_events_event_state_event_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}/state/event-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationEventsEventStateEventType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_state Operational state data for authorization based on AAA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_state Operational state data for authorization based on AAA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_authorization_state_authorization_method(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_state_authorization_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_state_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_state_authorization_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationStateAuthorizationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_authorization_state_authorization_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_authorization_state_authorization_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_authorization_state_authorization_method_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_authorization_state_authorization_method  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_authorization_state_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_authorization_state_authorization_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaAuthorizationStateAuthorizationMethod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_authorization_state_authorization_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/state/authorization-method', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaAuthorizationStateAuthorizationMethod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups Enclosing container for AAA server groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaServerGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups Enclosing container for AAA server groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAaaServerGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_config(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_config Configuration data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_config(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_config Configuration data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_config_type(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_config_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_config_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_config_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/config/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers Enclosing container the list of servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers Enclosing container the list of servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config/timeout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigTimeout',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius Top-level container for RADIUS server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius Top-level container for RADIUS server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAcctPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAcctPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/acct-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAcctPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/auth-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigRetransmitAttempts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigRetransmitAttempts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/retransmit-attempts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigRetransmitAttempts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSecretKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSecretKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/secret-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSecretKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state Operational state data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state Operational state data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateAcctPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateAcctPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_acct_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/acct-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateAcctPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateAuthPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateAuthPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_auth_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/auth-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateAuthPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters A collection of RADIUS related state objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters A collection of RADIUS related state objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCounters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts Received Access-Accept messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersAccessAccepts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts Received Access-Accept messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersAccessAccepts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_accepts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/counters/access-accepts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersAccessAccepts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects Received Access-Reject messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersAccessRejects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects Received Access-Reject messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersAccessRejects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_access_rejects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/counters/access-rejects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersAccessRejects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests Retransmitted Access-Request messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersRetriedAccessRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests Retransmitted Access-Request messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersRetriedAccessRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_retried_access_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/counters/retried-access-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersRetriedAccessRequests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests Access-Request messages that have timed-out, requiring retransmission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersTimeoutAccessRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests Access-Request messages that have timed-out, requiring retransmission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersTimeoutAccessRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_counters_timeout_access_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/counters/timeout-access-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateCountersTimeoutAccessRequests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateRetransmitAttempts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateRetransmitAttempts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_retransmit_attempts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/retransmit-attempts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateRetransmitAttempts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateSecretKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateSecretKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/secret-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateSecretKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_state_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/state/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusStateSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address Address of the authentication server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address Address of the authentication server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts Number of aborted connections to the server.  These do not include connections that are close gracefully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionAborts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts Number of aborted connections to the server.  These do not include connections that are close gracefully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionAborts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_aborts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/connection-aborts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionAborts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes Number of connection close requests sent to the server, e.g. socket close  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionCloses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes Number of connection close requests sent to the server, e.g. socket close  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionCloses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_closes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/connection-closes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionCloses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures Number of connection failures to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionFailures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures Number of connection failures to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionFailures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_failures`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/connection-failures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionFailures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens Number of new connection requests sent to the server, e.g. socket open  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionOpens
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens Number of new connection requests sent to the server, e.g. socket open  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionOpens
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_opens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/connection-opens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionOpens',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts Number of connection timeouts to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionTimeouts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts Number of connection timeouts to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionTimeouts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_connection_timeouts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/connection-timeouts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateConnectionTimeouts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received Number of error messages received from the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateErrorsReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received Number of error messages received from the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateErrorsReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_errors_received`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/errors-received', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateErrorsReceived',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received Number of messages received by the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateMessagesReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received Number of messages received by the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateMessagesReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_received`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/messages-received', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateMessagesReceived',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent Number of messages sent to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateMessagesSent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent Number of messages sent to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateMessagesSent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_messages_sent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/messages-sent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateMessagesSent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_state_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/state/timeout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerStateTimeout',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs Top-level container for TACACS+ server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs Top-level container for TACACS+ server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSecretKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSecretKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/secret-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSecretKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state Operational state data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state Operational state data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStatePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStatePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/state/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStatePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStateSecretKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStateSecretKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/state/secret-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStateSecretKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address_with_http_info(name, address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address_with_http_info(self, name, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address_with_http_info(name, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_state_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/state/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsStateSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_state(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_state Operational state data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_state(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_state_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_state_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_state_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_state  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_state Operational state data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_state_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_state_name(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_state_name  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_state_name Name for the server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_state_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_state_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_state_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_state_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_state_name  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_state_name Name for the server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_state_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_aaa_server_groups_server_group_state_type(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_state_type  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_state_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_state_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_aaa_server_groups_server_group_state_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_aaa_server_groups_server_group_state_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_aaa_server_groups_server_group_state_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_system_system_aaa_server_groups_server_group_state_type  # noqa: E501

        OperationId: get_openconfig_system_system_aaa_server_groups_server_group_state_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_aaa_server_groups_server_group_state_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :return: GetOpenconfigSystemSystemAaaServerGroupsServerGroupStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_aaa_server_groups_server_group_state_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_system_system_aaa_server_groups_server_group_state_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/state/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAaaServerGroupsServerGroupStateType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_alarms(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms  # noqa: E501

        OperationId: get_openconfig_system_system_alarms Top-level container for device alarms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAlarms
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_alarms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_alarms_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_alarms_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms  # noqa: E501

        OperationId: get_openconfig_system_system_alarms Top-level container for device alarms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemAlarms
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_alarms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarms',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_alarms_alarm(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm List of alarms, keyed by a unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_alarms_alarm_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_alarms_alarm_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_alarms_alarm_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm List of alarms, keyed by a unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_alarms_alarm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_system_system_alarms_alarm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms/alarm={id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarmsAlarm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_alarms_alarm_state(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state Operational state data for a device alarm  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_alarms_alarm_state_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_alarms_alarm_state_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_alarms_alarm_state_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state Operational state data for a device alarm  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_alarms_alarm_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_system_system_alarms_alarm_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms/alarm={id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarmsAlarmState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_alarms_alarm_state_resource(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_resource  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_resource The item that is under alarm within the device. The resource may be a reference to an item which is defined elsewhere in the model. For example, it may be a platform/component, interfaces/interface, terminal-device/logical-channels/channel, etc. In this case the system should match the name of the referenced item exactly. The referenced item could alternatively be the path of the item within the model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_resource(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_alarms_alarm_state_resource_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_alarms_alarm_state_resource_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_alarms_alarm_state_resource_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_resource  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_resource The item that is under alarm within the device. The resource may be a reference to an item which is defined elsewhere in the model. For example, it may be a platform/component, interfaces/interface, terminal-device/logical-channels/channel, etc. In this case the system should match the name of the referenced item exactly. The referenced item could alternatively be the path of the item within the model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_resource_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_alarms_alarm_state_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_system_system_alarms_alarm_state_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms/alarm={id}/state/resource', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarmsAlarmStateResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_alarms_alarm_state_severity(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_severity  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_severity The severity level indicating the criticality and impact of the alarm  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_severity(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_alarms_alarm_state_severity_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_alarms_alarm_state_severity_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_alarms_alarm_state_severity_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_severity  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_severity The severity level indicating the criticality and impact of the alarm  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_severity_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_alarms_alarm_state_severity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_system_system_alarms_alarm_state_severity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms/alarm={id}/state/severity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarmsAlarmStateSeverity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_alarms_alarm_state_text(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_text  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_text The string used to inform operators about the alarm. This MUST contain enough information for an operator to be able to understand the problem. If this string contains structure, this format should be clearly documented for programs to be able to parse that information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_text(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateText
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_alarms_alarm_state_text_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_alarms_alarm_state_text_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_alarms_alarm_state_text_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_text  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_text The string used to inform operators about the alarm. This MUST contain enough information for an operator to be able to understand the problem. If this string contains structure, this format should be clearly documented for programs to be able to parse that information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_text_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateText
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_alarms_alarm_state_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_system_system_alarms_alarm_state_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms/alarm={id}/state/text', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarmsAlarmStateText',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_alarms_alarm_state_time_created(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_time_created  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_time_created The time at which the alarm was raised by the system. This value is expressed as nanoseconds since the Unix Epoch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_time_created(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateTimeCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_alarms_alarm_state_time_created_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_alarms_alarm_state_time_created_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_alarms_alarm_state_time_created_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_time_created  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_time_created The time at which the alarm was raised by the system. This value is expressed as nanoseconds since the Unix Epoch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_time_created_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateTimeCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_alarms_alarm_state_time_created" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_system_system_alarms_alarm_state_time_created`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms/alarm={id}/state/time-created', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarmsAlarmStateTimeCreated',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_alarms_alarm_state_type_id(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_type_id  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_type_id The abbreviated name of the alarm, for example LOS, EQPT, or OTS. Also referred to in different systems as condition type, alarm identifier, or alarm mnemonic. It is recommended to use the OPENCONFIG_ALARM_TYPE_ID identities where possible and only use the string type when the desired identityref is not yet defined  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_type_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateTypeId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_alarms_alarm_state_type_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_alarms_alarm_state_type_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_alarms_alarm_state_type_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_alarms_alarm_state_type_id  # noqa: E501

        OperationId: get_openconfig_system_system_alarms_alarm_state_type_id The abbreviated name of the alarm, for example LOS, EQPT, or OTS. Also referred to in different systems as condition type, alarm identifier, or alarm mnemonic. It is recommended to use the OPENCONFIG_ALARM_TYPE_ID identities where possible and only use the string type when the desired identityref is not yet defined  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_alarms_alarm_state_type_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: References the unique alarm id (required)
        :return: GetOpenconfigSystemSystemAlarmsAlarmStateTypeId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_alarms_alarm_state_type_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_system_system_alarms_alarm_state_type_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/alarms/alarm={id}/state/type-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemAlarmsAlarmStateTypeId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_clock(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock  # noqa: E501

        OperationId: get_openconfig_system_system_clock Top-level container for clock configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_clock_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_clock_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_clock_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock  # noqa: E501

        OperationId: get_openconfig_system_system_clock Top-level container for clock configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_clock" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemClock',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_clock_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock_config  # noqa: E501

        OperationId: get_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClockConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_clock_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_clock_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_clock_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock_config  # noqa: E501

        OperationId: get_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClockConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_clock_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemClockConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_clock_config_timezone_name(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: get_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_config_timezone_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClockConfigTimezoneName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_clock_config_timezone_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_clock_config_timezone_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_clock_config_timezone_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: get_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_config_timezone_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClockConfigTimezoneName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_clock_config_timezone_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config/timezone-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemClockConfigTimezoneName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_clock_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock_state  # noqa: E501

        OperationId: get_openconfig_system_system_clock_state Operational state data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClockState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_clock_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_clock_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_clock_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock_state  # noqa: E501

        OperationId: get_openconfig_system_system_clock_state Operational state data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClockState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_clock_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemClockState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_clock_state_timezone_name(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock_state_timezone_name  # noqa: E501

        OperationId: get_openconfig_system_system_clock_state_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_state_timezone_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClockStateTimezoneName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_clock_state_timezone_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_clock_state_timezone_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_clock_state_timezone_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_clock_state_timezone_name  # noqa: E501

        OperationId: get_openconfig_system_system_clock_state_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_clock_state_timezone_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemClockStateTimezoneName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_clock_state_timezone_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/state/timezone-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemClockStateTimezoneName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config  # noqa: E501

        OperationId: get_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config  # noqa: E501

        OperationId: get_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_config_domain_name(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config_domain_name  # noqa: E501

        OperationId: get_openconfig_system_system_config_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_domain_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfigDomainName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_config_domain_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_config_domain_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_config_domain_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config_domain_name  # noqa: E501

        OperationId: get_openconfig_system_system_config_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_domain_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfigDomainName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_config_domain_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/domain-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemConfigDomainName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_config_hostname(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: get_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_hostname(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfigHostname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_config_hostname_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_config_hostname_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_config_hostname_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: get_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_hostname_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfigHostname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_config_hostname" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/hostname', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemConfigHostname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_config_login_banner(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config_login_banner  # noqa: E501

        OperationId: get_openconfig_system_system_config_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_login_banner(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfigLoginBanner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_config_login_banner_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_config_login_banner_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_config_login_banner_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config_login_banner  # noqa: E501

        OperationId: get_openconfig_system_system_config_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_login_banner_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfigLoginBanner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_config_login_banner" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/login-banner', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemConfigLoginBanner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_config_motd_banner(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config_motd_banner  # noqa: E501

        OperationId: get_openconfig_system_system_config_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_motd_banner(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfigMotdBanner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_config_motd_banner_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_config_motd_banner_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_config_motd_banner_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_config_motd_banner  # noqa: E501

        OperationId: get_openconfig_system_system_config_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_config_motd_banner_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemConfigMotdBanner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_config_motd_banner" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/motd-banner', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemConfigMotdBanner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus  # noqa: E501

        OperationId: get_openconfig_system_system_cpus Enclosing container for the list of CPU cores on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemCpus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus  # noqa: E501

        OperationId: get_openconfig_system_system_cpus Enclosing container for the list of CPU cores on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemCpus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu List of CPU cores on the system (including logical CPUs on hyperthreaded systems), keyed by either a numerical index, or the ALL value for an entry representing the aggregation across all CPUs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu List of CPU cores on the system (including logical CPUs on hyperthreaded systems), keyed by either a numerical index, or the ALL value for an entry representing the aggregation across all CPUs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state Operational state data for the system CPU(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state Operational state data for the system CPU(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt Percentage of CPU time spent servicing hardware interrupts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterrupt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt Percentage of CPU time spent servicing hardware interrupts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterrupt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_hardware_interrupt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_hardware_interrupt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/hardware-interrupt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateHardwareInterrupt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/hardware-interrupt/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/hardware-interrupt/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/hardware-interrupt/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/hardware-interrupt/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/hardware-interrupt/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/hardware-interrupt/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_hardware_interrupt_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/hardware-interrupt/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateHardwareInterruptMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_idle(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle Percentage of CPU time spent idle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_idle_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_idle_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_idle_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle Percentage of CPU time spent idle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_idle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_idle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/idle', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateIdle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_idle_avg(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_avg(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_idle_avg_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_idle_avg_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_idle_avg_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_avg_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_idle_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_idle_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/idle/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateIdleAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_idle_instant(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_instant(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_idle_instant_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_idle_instant_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_idle_instant_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_instant_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_idle_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_idle_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/idle/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateIdleInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_idle_interval(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_interval(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_idle_interval_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_idle_interval_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_idle_interval_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_interval_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_idle_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_idle_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/idle/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateIdleInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_idle_max(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_max(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_idle_max_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_idle_max_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_idle_max_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_max_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_idle_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_idle_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/idle/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateIdleMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_idle_max_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_max_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_idle_max_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_idle_max_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_idle_max_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_max_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_idle_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_idle_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/idle/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateIdleMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_idle_min(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_min(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_idle_min_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_idle_min_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_idle_min_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_min_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_idle_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_idle_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/idle/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateIdleMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_idle_min_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_min_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_idle_min_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_idle_min_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_idle_min_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_idle_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_idle_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_idle_min_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateIdleMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_idle_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_idle_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/idle/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateIdleMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_kernel(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel Percentage of CPU time spent running in kernel space.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_kernel_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_kernel_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_kernel_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel Percentage of CPU time spent running in kernel space.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_kernel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_kernel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/kernel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateKernel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_kernel_avg(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_avg(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_kernel_avg_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_kernel_avg_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_kernel_avg_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_avg_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_kernel_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_kernel_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/kernel/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateKernelAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_kernel_instant(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_instant(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_kernel_instant_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_kernel_instant_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_kernel_instant_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_instant_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_kernel_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_kernel_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/kernel/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateKernelInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_kernel_interval(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_interval(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_kernel_interval_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_kernel_interval_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_kernel_interval_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_interval_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_kernel_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_kernel_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/kernel/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateKernelInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_kernel_max(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_max(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_kernel_max_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_kernel_max_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_kernel_max_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_max_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_kernel_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_kernel_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/kernel/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateKernelMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_kernel_max_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_max_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_kernel_max_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_kernel_max_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_kernel_max_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_max_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_kernel_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_kernel_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/kernel/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateKernelMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_kernel_min(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_min(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_kernel_min_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_kernel_min_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_kernel_min_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_min_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_kernel_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_kernel_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/kernel/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateKernelMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_kernel_min_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_min_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_kernel_min_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_kernel_min_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_kernel_min_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_kernel_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_kernel_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_kernel_min_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateKernelMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_kernel_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_kernel_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/kernel/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateKernelMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_nice(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice Percentage of CPU time spent running low-priority (niced) user processes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_nice_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_nice_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_nice_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice Percentage of CPU time spent running low-priority (niced) user processes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_nice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_nice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/nice', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateNice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_nice_avg(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_avg(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_nice_avg_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_nice_avg_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_nice_avg_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_avg_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_nice_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_nice_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/nice/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateNiceAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_nice_instant(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_instant(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_nice_instant_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_nice_instant_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_nice_instant_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_instant_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_nice_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_nice_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/nice/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateNiceInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_nice_interval(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_interval(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_nice_interval_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_nice_interval_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_nice_interval_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_interval_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_nice_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_nice_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/nice/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateNiceInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_nice_max(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_max(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_nice_max_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_nice_max_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_nice_max_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_max_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_nice_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_nice_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/nice/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateNiceMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_nice_max_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_max_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_nice_max_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_nice_max_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_nice_max_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_max_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_nice_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_nice_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/nice/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateNiceMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_nice_min(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_min(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_nice_min_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_nice_min_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_nice_min_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_min_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_nice_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_nice_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/nice/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateNiceMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_nice_min_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_min_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_nice_min_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_nice_min_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_nice_min_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_nice_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_nice_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_nice_min_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateNiceMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_nice_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_nice_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/nice/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateNiceMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt Percentage of CPU time spent servicing software interrupts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterrupt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt Percentage of CPU time spent servicing software interrupts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterrupt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_software_interrupt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_software_interrupt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/software-interrupt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateSoftwareInterrupt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_software_interrupt_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/software-interrupt/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_software_interrupt_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/software-interrupt/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_software_interrupt_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/software-interrupt/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_max(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_max(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_software_interrupt_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_software_interrupt_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/software-interrupt/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_software_interrupt_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/software-interrupt/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_min(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_min(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_software_interrupt_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_software_interrupt_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/software-interrupt/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_software_interrupt_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/software-interrupt/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateSoftwareInterruptMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_total(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total Total CPU utilization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_total_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_total_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_total_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total Total CPU utilization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_total" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_total`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_total_avg(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_avg(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_total_avg_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_total_avg_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_total_avg_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_avg_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_total_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_total_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/total/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateTotalAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_total_instant(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_instant(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_total_instant_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_total_instant_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_total_instant_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_instant_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_total_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_total_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/total/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateTotalInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_total_interval(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_interval(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_total_interval_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_total_interval_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_total_interval_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_interval_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_total_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_total_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/total/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateTotalInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_total_max(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_max(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_total_max_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_total_max_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_total_max_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_max_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_total_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_total_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/total/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateTotalMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_total_max_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_max_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_total_max_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_total_max_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_total_max_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_max_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_total_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_total_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/total/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateTotalMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_total_min(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_min(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_total_min_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_total_min_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_total_min_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_min_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_total_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_total_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/total/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateTotalMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_total_min_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_min_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_total_min_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_total_min_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_total_min_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_total_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_total_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_total_min_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateTotalMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_total_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_total_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/total/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateTotalMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_user(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user Percentage of CPU time spent running in user space.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_user_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_user_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_user_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user Percentage of CPU time spent running in user space.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_user_avg(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_avg(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_user_avg_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_user_avg_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_user_avg_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_avg_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_user_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_user_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/user/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateUserAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_user_instant(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_instant(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_user_instant_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_user_instant_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_user_instant_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_instant_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_user_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_user_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/user/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateUserInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_user_interval(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_interval(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_user_interval_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_user_interval_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_user_interval_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_interval_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_user_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_user_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/user/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateUserInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_user_max(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_max(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_user_max_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_user_max_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_user_max_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_max_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_user_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_user_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/user/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateUserMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_user_max_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_max_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_user_max_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_user_max_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_user_max_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_max_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_user_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_user_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/user/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateUserMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_user_min(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_min(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_user_min_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_user_min_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_user_min_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_min_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_user_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_user_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/user/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateUserMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_user_min_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_min_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_user_min_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_user_min_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_user_min_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_user_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_user_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_user_min_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateUserMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_user_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_user_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/user/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateUserMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_wait(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait Percentage of CPU time spent waiting for I/O.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWait
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_wait_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_wait_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_wait_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait Percentage of CPU time spent waiting for I/O.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWait
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_wait" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_wait`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/wait', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateWait',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_wait_avg(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_avg(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_wait_avg_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_wait_avg_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_wait_avg_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_avg  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_avg The arithmetic mean value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_avg_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_wait_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_wait_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/wait/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateWaitAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_wait_instant(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_instant(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_wait_instant_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_wait_instant_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_wait_instant_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_instant  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_instant The instantaneous percentage value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_instant_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_wait_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_wait_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/wait/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateWaitInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_wait_interval(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_interval(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_wait_interval_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_wait_interval_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_wait_interval_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_interval  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_interval_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_wait_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_wait_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/wait/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateWaitInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_wait_max(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_max(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_wait_max_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_wait_max_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_wait_max_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_max  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_max The maximum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_max_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_wait_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_wait_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/wait/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateWaitMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_wait_max_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_max_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_wait_max_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_wait_max_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_wait_max_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_max_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_max_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_wait_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_wait_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/wait/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateWaitMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_wait_min(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_min(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_wait_min_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_wait_min_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_wait_min_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_min  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_min The minimum value of the percentage measure of the statistic over the time interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_min_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_wait_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_wait_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/wait/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateWaitMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_cpus_cpu_state_wait_min_time(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_min_time(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_cpus_cpu_state_wait_min_time_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_cpus_cpu_state_wait_min_time_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_cpus_cpu_state_wait_min_time_with_http_info(self, index, **kwargs):  # noqa: E501
        """get_openconfig_system_system_cpus_cpu_state_wait_min_time  # noqa: E501

        OperationId: get_openconfig_system_system_cpus_cpu_state_wait_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_cpus_cpu_state_wait_min_time_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: Reference to list key (required)
        :return: GetOpenconfigSystemSystemCpusCpuStateWaitMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_cpus_cpu_state_wait_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_openconfig_system_system_cpus_cpu_state_wait_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/cpus/cpu={index}/state/wait/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemCpusCpuStateWaitMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns  # noqa: E501

        OperationId: get_openconfig_system_system_dns Enclosing container for DNS resolver data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns  # noqa: E501

        OperationId: get_openconfig_system_system_dns Enclosing container for DNS resolver data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_config  # noqa: E501

        OperationId: get_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_config  # noqa: E501

        OperationId: get_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_config_search(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: get_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_config_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsConfigSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_config_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_config_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_config_search_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: get_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_config_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsConfigSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_config_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsConfigSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries Enclosing container for list of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsHostEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries Enclosing container for list of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsHostEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_config(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_config  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_config Configuration data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_config(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_config  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_config Configuration data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_config_alias(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_config_alias(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_config_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/alias', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv4-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv6-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_state(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state Operational state data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_state_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_state_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_state_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state Operational state data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_state_alias(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state_alias  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_alias(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateAlias
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_state_alias_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_state_alias_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_state_alias_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state_alias  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_alias_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateAlias
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_state_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_state_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/state/alias', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateAlias',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_state_hostname(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state_hostname  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state_hostname Hostname for the static DNS entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_hostname(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateHostname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_state_hostname_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_state_hostname_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_state_hostname_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state_hostname  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state_hostname Hostname for the static DNS entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_hostname_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateHostname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_state_hostname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_state_hostname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/state/hostname', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateHostname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateIpv4Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateIpv4Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_state_ipv4_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/state/ipv4-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateIpv4Address',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateIpv6Address
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address_with_http_info(hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address_with_http_info(hostname, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :return: GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateIpv6Address
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `get_openconfig_system_system_dns_host_entries_host_entry_state_ipv6_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/state/ipv6-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsHostEntriesHostEntryStateIpv6Address',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_servers(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers Enclosing container for DNS resolver list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsServers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_servers_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers Enclosing container for DNS resolver list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsServers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsServers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_servers_server(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_servers_server_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_servers_server_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_servers_server_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_dns_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsServersServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_servers_server_config(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_config Configuration data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_config(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_servers_server_config_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_servers_server_config_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_servers_server_config_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_config Configuration data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_config_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_dns_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsServersServerConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_servers_server_config_port(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_config_port(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerConfigPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_servers_server_config_port_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerConfigPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_dns_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/config/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsServersServerConfigPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_servers_server_state(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_state Operational state data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_state(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_servers_server_state_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_servers_server_state_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_servers_server_state_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_state Operational state data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_state_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_servers_server_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_dns_servers_server_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsServersServerState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_servers_server_state_address(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_state_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_state_address The address of the DNS server, can be either IPv4 or IPv6.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_state_address(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerStateAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_servers_server_state_address_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_servers_server_state_address_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_servers_server_state_address_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_state_address  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_state_address The address of the DNS server, can be either IPv4 or IPv6.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_state_address_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerStateAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_servers_server_state_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_dns_servers_server_state_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/state/address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsServersServerStateAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_servers_server_state_port(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_state_port  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_state_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_state_port(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerStatePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_servers_server_state_port_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_servers_server_state_port_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_servers_server_state_port_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_servers_server_state_port  # noqa: E501

        OperationId: get_openconfig_system_system_dns_servers_server_state_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_servers_server_state_port_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :return: GetOpenconfigSystemSystemDnsServersServerStatePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_servers_server_state_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_dns_servers_server_state_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/state/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsServersServerStatePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_state  # noqa: E501

        OperationId: get_openconfig_system_system_dns_state Operational state data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_state  # noqa: E501

        OperationId: get_openconfig_system_system_dns_state Operational state data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_dns_state_search(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_state_search  # noqa: E501

        OperationId: get_openconfig_system_system_dns_state_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_state_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsStateSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_dns_state_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_dns_state_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_dns_state_search_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_dns_state_search  # noqa: E501

        OperationId: get_openconfig_system_system_dns_state_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_dns_state_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemDnsStateSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_dns_state_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/state/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemDnsStateSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server Top-level container for the gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server Top-level container for the gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_config_certificate_id(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_certificate_id  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_certificate_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigCertificateId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_certificate_id  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigCertificateId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_config_certificate_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/certificate-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerConfigCertificateId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_config_enable(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_config_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_config_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_config_enable_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/enable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerConfigEnable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_config_listen_addresses(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_listen_addresses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigListenAddresses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigListenAddresses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_config_listen_addresses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/listen-addresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerConfigListenAddresses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_config_port(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_port  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_config_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_config_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_config_port_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_port  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerConfigPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_config_transport_security(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_transport_security  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_transport_security(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigTransportSecurity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_config_transport_security_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_config_transport_security_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_config_transport_security_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_config_transport_security  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_config_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_config_transport_security_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerConfigTransportSecurity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_config_transport_security" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/transport-security', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerConfigTransportSecurity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state Operational state data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state Operational state data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_state_certificate_id(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_certificate_id  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_certificate_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStateCertificateId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_state_certificate_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_state_certificate_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_state_certificate_id_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_certificate_id  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_certificate_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStateCertificateId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_state_certificate_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/state/certificate-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerStateCertificateId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_state_enable(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_enable  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStateEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_state_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_state_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_state_enable_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_enable  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStateEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_state_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/state/enable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerStateEnable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_state_listen_addresses(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_listen_addresses  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_listen_addresses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStateListenAddresses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_state_listen_addresses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_state_listen_addresses_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_state_listen_addresses_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_listen_addresses  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_listen_addresses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStateListenAddresses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_state_listen_addresses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/state/listen-addresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerStateListenAddresses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_state_port(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_port  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStatePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_state_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_state_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_state_port_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_port  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStatePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_state_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/state/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerStatePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_grpc_server_state_transport_security(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_transport_security  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_transport_security(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStateTransportSecurity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_grpc_server_state_transport_security_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_grpc_server_state_transport_security_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_grpc_server_state_transport_security_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_grpc_server_state_transport_security  # noqa: E501

        OperationId: get_openconfig_system_system_grpc_server_state_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_grpc_server_state_transport_security_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemGrpcServerStateTransportSecurity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_grpc_server_state_transport_security" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/state/transport-security', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemGrpcServerStateTransportSecurity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging  # noqa: E501

        OperationId: get_openconfig_system_system_logging Top-level container for data related to logging / syslog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLogging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging  # noqa: E501

        OperationId: get_openconfig_system_system_logging Top-level container for data related to logging / syslog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLogging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLogging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_console(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingConsole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_console_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_console_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_console_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingConsole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_console" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingConsole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_console_selectors(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectors
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_console_selectors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_console_selectors_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_console_selectors_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectors
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_console_selectors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingConsoleSelectors',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_console_selectors_selector(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelector
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelector
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingConsoleSelectorsSelector',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_console_selectors_selector_config(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector_config  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_config(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector_config  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_console_selectors_selector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_console_selectors_selector_state(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector_state  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_state(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_console_selectors_selector_state_with_http_info(facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_console_selectors_selector_state_with_http_info(facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_console_selectors_selector_state_with_http_info(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector_state  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_state_with_http_info(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_console_selectors_selector_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_console_selectors_selector_state`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_console_selectors_selector_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_console_selectors_selector_state_facility(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector_state_facility  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector_state_facility Specifies the facility, or class of messages to log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_state_facility(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorStateFacility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_console_selectors_selector_state_facility_with_http_info(facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_console_selectors_selector_state_facility_with_http_info(facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_console_selectors_selector_state_facility_with_http_info(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector_state_facility  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector_state_facility Specifies the facility, or class of messages to log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_state_facility_with_http_info(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorStateFacility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_console_selectors_selector_state_facility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_console_selectors_selector_state_facility`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_console_selectors_selector_state_facility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}/state/facility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorStateFacility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_console_selectors_selector_state_severity(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector_state_severity  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector_state_severity Specifies that only messages of the given severity (or greater severity) for the corresonding facility are logged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_state_severity(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorStateSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_console_selectors_selector_state_severity_with_http_info(facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_console_selectors_selector_state_severity_with_http_info(facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_console_selectors_selector_state_severity_with_http_info(self, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_console_selectors_selector_state_severity  # noqa: E501

        OperationId: get_openconfig_system_system_logging_console_selectors_selector_state_severity Specifies that only messages of the given severity (or greater severity) for the corresonding facility are logged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_console_selectors_selector_state_severity_with_http_info(facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorStateSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_console_selectors_selector_state_severity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_console_selectors_selector_state_severity`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_console_selectors_selector_state_severity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}/state/severity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingConsoleSelectorsSelectorStateSeverity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers Enclosing container for the list of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingRemoteServers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers Enclosing container for the list of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemLoggingRemoteServers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_config(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_config Configuration data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_config(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_config Configuration data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigRemotePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigRemotePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config/remote-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigRemotePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectors
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectors
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_selectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectors',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_with_http_info(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_with_http_info(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility Specifies the facility, or class of messages to log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorStateFacility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility_with_http_info(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility Specifies the facility, or class of messages to log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility_with_http_info(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorStateFacility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_facility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}/state/facility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorStateFacility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity Specifies that only messages of the given severity (or greater severity) for the corresonding facility are logged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorStateSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity_with_http_info(host, facility, severity, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity_with_http_info(self, host, facility, severity, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity Specifies that only messages of the given severity (or greater severity) for the corresonding facility are logged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity_with_http_info(host, facility, severity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorStateSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_state_severity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}/state/severity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorStateSeverity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_state(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_state Operational state data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_state(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_state_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_state_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_state_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_state Operational state data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_state_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_state_host(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_state_host  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_state_host IP address or hostname of the remote log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_state_host(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_state_host_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_state_host_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_state_host_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_state_host  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_state_host IP address or hostname of the remote log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_state_host_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_state_host" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_state_host`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/state/host', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateRemotePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateRemotePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_state_remote_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/state/remote-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateRemotePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :return: GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_openconfig_system_system_logging_remote_servers_remote_server_state_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/state/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemLoggingRemoteServersRemoteServerStateSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_memory(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_memory  # noqa: E501

        OperationId: get_openconfig_system_system_memory Top-level container for system memory data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_memory(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMemory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_memory_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_memory_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_memory_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_memory  # noqa: E501

        OperationId: get_openconfig_system_system_memory Top-level container for system memory data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_memory_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMemory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_memory" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/memory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMemory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_memory_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_memory_state  # noqa: E501

        OperationId: get_openconfig_system_system_memory_state Operational state data for system memory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_memory_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMemoryState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_memory_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_memory_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_memory_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_memory_state  # noqa: E501

        OperationId: get_openconfig_system_system_memory_state Operational state data for system memory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_memory_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMemoryState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_memory_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/memory/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMemoryState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_memory_state_physical(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_memory_state_physical  # noqa: E501

        OperationId: get_openconfig_system_system_memory_state_physical Reports the total physical memory available on the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_memory_state_physical(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMemoryStatePhysical
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_memory_state_physical_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_memory_state_physical_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_memory_state_physical_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_memory_state_physical  # noqa: E501

        OperationId: get_openconfig_system_system_memory_state_physical Reports the total physical memory available on the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_memory_state_physical_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMemoryStatePhysical
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_memory_state_physical" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/memory/state/physical', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMemoryStatePhysical',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_memory_state_reserved(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_memory_state_reserved  # noqa: E501

        OperationId: get_openconfig_system_system_memory_state_reserved Memory reserved for system use  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_memory_state_reserved(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMemoryStateReserved
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_memory_state_reserved_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_memory_state_reserved_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_memory_state_reserved_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_memory_state_reserved  # noqa: E501

        OperationId: get_openconfig_system_system_memory_state_reserved Memory reserved for system use  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_memory_state_reserved_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMemoryStateReserved
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_memory_state_reserved" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/memory/state/reserved', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMemoryStateReserved',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages  # noqa: E501

        OperationId: get_openconfig_system_system_messages Top-level container for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages  # noqa: E501

        OperationId: get_openconfig_system_system_messages Top-level container for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_config  # noqa: E501

        OperationId: get_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_config  # noqa: E501

        OperationId: get_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_config_severity(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: get_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_config_severity(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesConfigSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_config_severity_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_config_severity_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_config_severity_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: get_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_config_severity_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesConfigSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_config_severity" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config/severity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesConfigSeverity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_debug_entries(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries Enclosing container for list of debugs to enable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesDebugEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_debug_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_debug_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_debug_entries_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries Enclosing container for list of debugs to enable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesDebugEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_debug_entries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesDebugEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_debug_entries_debug_service(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `get_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesDebugEntriesDebugService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_debug_entries_debug_service_config(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_config  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_config Configuration data for debug service entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_config(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_config  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_config Configuration data for debug service entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_debug_entries_debug_service_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `get_openconfig_system_system_messages_debug_entries_debug_service_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `get_openconfig_system_system_messages_debug_entries_debug_service_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/config/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_debug_entries_debug_service_state(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_state  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_state Operational state data for enabled debugs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_state(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_debug_entries_debug_service_state_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_debug_entries_debug_service_state_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_debug_entries_debug_service_state_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_state  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_state Operational state data for enabled debugs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_state_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_debug_entries_debug_service_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `get_openconfig_system_system_messages_debug_entries_debug_service_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `get_openconfig_system_system_messages_debug_entries_debug_service_state_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/state/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceStateEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_debug_entries_debug_service_state_service(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_state_service  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_state_service Enumeration of all services which can have debugging enabled. Vendors are to augment this base identity with their platform or OS specific debug options.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_state_service(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceStateService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_debug_entries_debug_service_state_service_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_debug_entries_debug_service_state_service_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_debug_entries_debug_service_state_service_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_debug_entries_debug_service_state_service  # noqa: E501

        OperationId: get_openconfig_system_system_messages_debug_entries_debug_service_state_service Enumeration of all services which can have debugging enabled. Vendors are to augment this base identity with their platform or OS specific debug options.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_debug_entries_debug_service_state_service_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :return: GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceStateService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_debug_entries_debug_service_state_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `get_openconfig_system_system_messages_debug_entries_debug_service_state_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/state/service', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesDebugEntriesDebugServiceStateService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state Operational state data for a Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state Operational state data for a Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_state_message(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message Syslog messages the client is Subscribing to. This is all messages currently configured to be sent according to syslog-severity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_state_message_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_state_message_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_state_message_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message Syslog messages the client is Subscribing to. This is all messages currently configured to be sent according to syslog-severity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_state_message" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/state/message', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesStateMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_state_message_app_name(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_app_name  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_app_name The APP-NAME field SHOULD identify the device or application that originated the message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_app_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessageAppName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_state_message_app_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_state_message_app_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_state_message_app_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_app_name  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_app_name The APP-NAME field SHOULD identify the device or application that originated the message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_app_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessageAppName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_state_message_app_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/state/message/app-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesStateMessageAppName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_state_message_msg(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_msg  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_msg Message payload. If other leafs within this container not supported, this leaf MAY include the entire message, inclding pri, procid, app-name etc..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_msg(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessageMsg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_state_message_msg_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_state_message_msg_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_state_message_msg_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_msg  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_msg Message payload. If other leafs within this container not supported, this leaf MAY include the entire message, inclding pri, procid, app-name etc..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_msg_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessageMsg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_state_message_msg" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/state/message/msg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesStateMessageMsg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_state_message_msgid(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_msgid  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_msgid The MSGID SHOULD identify the type of message. For example, a firewall might use the MSGID 'TCPIN' for incoming TCP traffic and the MSGID 'TCPOUT' for outgoing TCP traffic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_msgid(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessageMsgid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_state_message_msgid_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_state_message_msgid_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_state_message_msgid_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_msgid  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_msgid The MSGID SHOULD identify the type of message. For example, a firewall might use the MSGID 'TCPIN' for incoming TCP traffic and the MSGID 'TCPOUT' for outgoing TCP traffic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_msgid_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessageMsgid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_state_message_msgid" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/state/message/msgid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesStateMessageMsgid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_state_message_priority(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_priority  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_priority The Priority value (PRIVAL) represents both the Facility and Severity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_priority(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessagePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_state_message_priority_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_state_message_priority_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_state_message_priority_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_priority  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_priority The Priority value (PRIVAL) represents both the Facility and Severity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_priority_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessagePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_state_message_priority" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/state/message/priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesStateMessagePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_state_message_procid(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_procid  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_procid PROCID is a value that is included in the message, having no interoperable meaning, except that a change in the value indicates there has been a discontinuity in syslog reporting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_procid(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessageProcid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_state_message_procid_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_state_message_procid_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_state_message_procid_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_message_procid  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_message_procid PROCID is a value that is included in the message, having no interoperable meaning, except that a change in the value indicates there has been a discontinuity in syslog reporting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_message_procid_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateMessageProcid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_state_message_procid" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/state/message/procid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesStateMessageProcid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_messages_state_severity(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_severity  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_severity(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_messages_state_severity_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_messages_state_severity_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_messages_state_severity_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_messages_state_severity  # noqa: E501

        OperationId: get_openconfig_system_system_messages_state_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_messages_state_severity_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemMessagesStateSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_messages_state_severity" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/state/severity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemMessagesStateSeverity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp  # noqa: E501

        OperationId: get_openconfig_system_system_ntp Top-level container for NTP configuration and state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp  # noqa: E501

        OperationId: get_openconfig_system_system_ntp Top-level container for NTP configuration and state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_config_enable_ntp_auth(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_config_enable_ntp_auth  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_config_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_config_enable_ntp_auth(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpConfigEnableNtpAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_config_enable_ntp_auth  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_config_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpConfigEnableNtpAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_config_enable_ntp_auth" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/enable-ntp-auth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpConfigEnableNtpAuth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_config_enabled(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_config_enabled(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpConfigEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_config_enabled_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_config_enabled_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_config_enabled_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_config_enabled_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpConfigEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpConfigEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_config_ntp_source_address(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_config_ntp_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_config_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_config_ntp_source_address(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpConfigNtpSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_config_ntp_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_config_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpConfigNtpSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_config_ntp_source_address" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/ntp-source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpConfigNtpSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys Enclosing container for list of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpNtpKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys Enclosing container for list of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpNtpKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_config(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_config  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_config Configuration data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_config  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_config Configuration data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys_ntp_key_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_openconfig_system_system_ntp_ntp_keys_ntp_key_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config/key-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config/key-value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_state(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_state  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_state Operational state data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_state  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_state Operational state data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys_ntp_key_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_openconfig_system_system_ntp_ntp_keys_ntp_key_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKeyState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id Integer identifier used by the client and server to designate a secret key.  The client and server must use the same key id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id Integer identifier used by the client and server to designate a secret key.  The client and server must use the same key id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/state/key-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/state/key-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :return: GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_openconfig_system_system_ntp_ntp_keys_ntp_key_state_key_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/state/key-value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpNtpKeysNtpKeyStateKeyValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers Enclosing container for the list of NTP servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpServers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers Enclosing container for the list of NTP servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpServers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_config(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config Configuration data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_config_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_config_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_config_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config Configuration data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_config_association_type(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_association_type  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_association_type(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigAssociationType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_association_type  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigAssociationType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_config_association_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_config_association_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/association-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerConfigAssociationType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_config_iburst(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_iburst  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_iburst(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigIburst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_iburst  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigIburst
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_config_iburst" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_config_iburst`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/iburst', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerConfigIburst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_config_port(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_port(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_config_port_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerConfigPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_config_prefer(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_prefer  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_prefer(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigPrefer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_prefer  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigPrefer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_config_prefer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_config_prefer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/prefer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerConfigPrefer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_config_version(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_version  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_version(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_config_version_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_config_version  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_config_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerConfigVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_config_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_config_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerConfigVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state Operational state data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state Operational state data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_address(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_address  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_address The address or hostname of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_address(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_address_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_address_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_address_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_address  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_address The address or hostname of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_address_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStateAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_association_type(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_association_type  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_association_type(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateAssociationType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_association_type_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_association_type_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_association_type_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_association_type  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_association_type_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateAssociationType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_association_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_association_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/association-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStateAssociationType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_iburst(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_iburst  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_iburst(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateIburst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_iburst_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_iburst_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_iburst_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_iburst  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_iburst_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateIburst
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_iburst" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_iburst`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/iburst', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStateIburst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_offset(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_offset  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_offset Estimate of the current time offset from the peer.  This is the time difference between the local and reference clock.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_offset(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateOffset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_offset_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_offset_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_offset_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_offset  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_offset Estimate of the current time offset from the peer.  This is the time difference between the local and reference clock.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_offset_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateOffset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_offset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_offset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/offset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStateOffset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_poll_interval(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_poll_interval  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_poll_interval Polling interval of the peer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_poll_interval(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStatePollInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_poll_interval_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_poll_interval_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_poll_interval_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_poll_interval  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_poll_interval Polling interval of the peer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_poll_interval_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStatePollInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_poll_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_poll_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/poll-interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStatePollInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_port(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_port  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_port(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStatePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_port_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_port_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_port_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_port  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_port_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStatePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStatePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_prefer(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_prefer  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_prefer(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStatePrefer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_prefer_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_prefer_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_prefer_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_prefer  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_prefer_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStatePrefer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_prefer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_prefer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/prefer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStatePrefer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_root_delay(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_root_delay  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_root_delay The round-trip delay to the server, in milliseconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_root_delay(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateRootDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_root_delay_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_root_delay_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_root_delay_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_root_delay  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_root_delay The round-trip delay to the server, in milliseconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_root_delay_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateRootDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_root_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_root_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/root-delay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStateRootDelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_root_dispersion(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_root_dispersion  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_root_dispersion Dispersion (epsilon) represents the maximum error inherent in the measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_root_dispersion(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateRootDispersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_root_dispersion_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_root_dispersion_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_root_dispersion_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_root_dispersion  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_root_dispersion Dispersion (epsilon) represents the maximum error inherent in the measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_root_dispersion_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateRootDispersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_root_dispersion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_root_dispersion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/root-dispersion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStateRootDispersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_stratum(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_stratum  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_stratum Indicates the level of the server in the NTP hierarchy. As stratum number increases, the accuracy is degraded.  Primary servers are stratum while a maximum value of 16 indicates unsynchronized.  The values have the following specific semantics:  | 0      | unspecified or invalid | 1      | primary server (e.g., equipped with a GPS receiver) | 2-15   | secondary server (via NTP) | 16     | unsynchronized | 17-255 | reserved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_stratum(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateStratum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_stratum_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_stratum_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_stratum_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_stratum  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_stratum Indicates the level of the server in the NTP hierarchy. As stratum number increases, the accuracy is degraded.  Primary servers are stratum while a maximum value of 16 indicates unsynchronized.  The values have the following specific semantics:  | 0      | unspecified or invalid | 1      | primary server (e.g., equipped with a GPS receiver) | 2-15   | secondary server (via NTP) | 16     | unsynchronized | 17-255 | reserved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_stratum_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateStratum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_stratum" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_stratum`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/stratum', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStateStratum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_servers_server_state_version(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_version  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_version(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_servers_server_state_version_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_servers_server_state_version_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_servers_server_state_version_with_http_info(self, address, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_servers_server_state_version  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_servers_server_state_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_servers_server_state_version_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :return: GetOpenconfigSystemSystemNtpServersServerStateVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_servers_server_state_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_openconfig_system_system_ntp_servers_server_state_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/state/version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpServersServerStateVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state Operational state data for NTP services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state Operational state data for NTP services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_state_auth_mismatch(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state_auth_mismatch  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state_auth_mismatch Count of the number of NTP packets received that were not processed due to authentication mismatch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_auth_mismatch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpStateAuthMismatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_state_auth_mismatch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_state_auth_mismatch_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_state_auth_mismatch_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state_auth_mismatch  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state_auth_mismatch Count of the number of NTP packets received that were not processed due to authentication mismatch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_auth_mismatch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpStateAuthMismatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_state_auth_mismatch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/state/auth-mismatch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpStateAuthMismatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_state_enable_ntp_auth(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state_enable_ntp_auth  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_enable_ntp_auth(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpStateEnableNtpAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_state_enable_ntp_auth_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_state_enable_ntp_auth_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_state_enable_ntp_auth_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state_enable_ntp_auth  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_enable_ntp_auth_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpStateEnableNtpAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_state_enable_ntp_auth" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/state/enable-ntp-auth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpStateEnableNtpAuth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_state_enabled(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state_enabled  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_enabled(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_state_enabled_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_state_enabled_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_state_enabled_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state_enabled  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_enabled_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_state_enabled" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/state/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpStateEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ntp_state_ntp_source_address(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state_ntp_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_ntp_source_address(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpStateNtpSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ntp_state_ntp_source_address_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ntp_state_ntp_source_address_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ntp_state_ntp_source_address_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ntp_state_ntp_source_address  # noqa: E501

        OperationId: get_openconfig_system_system_ntp_state_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ntp_state_ntp_source_address_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemNtpStateNtpSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ntp_state_ntp_source_address" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/state/ntp-source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemNtpStateNtpSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes  # noqa: E501

        OperationId: get_openconfig_system_system_processes Parameters related to all monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemProcesses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes  # noqa: E501

        OperationId: get_openconfig_system_system_processes Parameters related to all monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemProcesses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcesses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process List of monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process List of monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state State parameters related to monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state State parameters related to monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_args(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_args  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_args Current process command line arguments.  Arguments with a parameter (e.g., --option 10  or -option=10) should be represented as a single element of the list with the argument name and parameter together.  Flag arguments, i.e., those without a parameter should also be in their own list element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_args(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateArgs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_args_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_args_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_args_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_args  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_args Current process command line arguments.  Arguments with a parameter (e.g., --option 10  or -option=10) should be represented as a single element of the list with the argument name and parameter together.  Flag arguments, i.e., those without a parameter should also be in their own list element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_args_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateArgs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_args" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_args`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/args', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateArgs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_cpu_usage_system(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_cpu_usage_system  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_cpu_usage_system CPU time consumed by this process in kernel mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_cpu_usage_system(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateCpuUsageSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_cpu_usage_system_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_cpu_usage_system_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_cpu_usage_system_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_cpu_usage_system  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_cpu_usage_system CPU time consumed by this process in kernel mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_cpu_usage_system_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateCpuUsageSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_cpu_usage_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_cpu_usage_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/cpu-usage-system', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateCpuUsageSystem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_cpu_usage_user(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_cpu_usage_user  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_cpu_usage_user CPU time consumed by this process in user mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_cpu_usage_user(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateCpuUsageUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_cpu_usage_user_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_cpu_usage_user_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_cpu_usage_user_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_cpu_usage_user  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_cpu_usage_user CPU time consumed by this process in user mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_cpu_usage_user_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateCpuUsageUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_cpu_usage_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_cpu_usage_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/cpu-usage-user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateCpuUsageUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_cpu_utilization(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_cpu_utilization  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_cpu_utilization The percentage of CPU that is being used by the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_cpu_utilization(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateCpuUtilization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_cpu_utilization_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_cpu_utilization_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_cpu_utilization_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_cpu_utilization  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_cpu_utilization The percentage of CPU that is being used by the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_cpu_utilization_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateCpuUtilization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_cpu_utilization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_cpu_utilization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/cpu-utilization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateCpuUtilization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_memory_usage(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_memory_usage  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_memory_usage Bytes allocated and still in use by the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_memory_usage(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateMemoryUsage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_memory_usage_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_memory_usage_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_memory_usage_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_memory_usage  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_memory_usage Bytes allocated and still in use by the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_memory_usage_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateMemoryUsage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_memory_usage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_memory_usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/memory-usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateMemoryUsage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_memory_utilization(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_memory_utilization  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_memory_utilization The percentage of RAM that is being used by the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_memory_utilization(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateMemoryUtilization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_memory_utilization_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_memory_utilization_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_memory_utilization_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_memory_utilization  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_memory_utilization The percentage of RAM that is being used by the process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_memory_utilization_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateMemoryUtilization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_memory_utilization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_memory_utilization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/memory-utilization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateMemoryUtilization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_name(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_name  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_name The process name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_name(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_name_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_name_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_name_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_name  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_name The process name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_name_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_start_time(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_start_time  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_start_time The time at which this process started, reported as nanoseconds since the UNIX epoch.  The system must be synchronized such that the start-time can be reported accurately, otherwise it should not be reported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_start_time(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateStartTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_start_time_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_start_time_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_start_time_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_start_time  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_start_time The time at which this process started, reported as nanoseconds since the UNIX epoch.  The system must be synchronized such that the start-time can be reported accurately, otherwise it should not be reported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_start_time_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateStartTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_start_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_start_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/start-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateStartTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_processes_process_state_uptime(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_uptime  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_uptime Amount of time elapsed since this process started.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_uptime(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateUptime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_processes_process_state_uptime_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_processes_process_state_uptime_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_processes_process_state_uptime_with_http_info(self, pid, **kwargs):  # noqa: E501
        """get_openconfig_system_system_processes_process_state_uptime  # noqa: E501

        OperationId: get_openconfig_system_system_processes_process_state_uptime Amount of time elapsed since this process started.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_processes_process_state_uptime_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pid: Reference to the process pid key (required)
        :return: GetOpenconfigSystemSystemProcessesProcessStateUptime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_processes_process_state_uptime" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_openconfig_system_system_processes_process_state_uptime`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes/process={pid}/state/uptime', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemProcessesProcessStateUptime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server Top-level container for ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server Top-level container for ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_config_enable(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_config_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_config_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_config_enable_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/enable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerConfigEnable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_config_protocol_version(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_protocol_version  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_protocol_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigProtocolVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_protocol_version  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigProtocolVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_config_protocol_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/protocol-version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerConfigProtocolVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_config_rate_limit(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_rate_limit  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_rate_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigRateLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_rate_limit  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigRateLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_config_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/rate-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerConfigRateLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_config_session_limit(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_session_limit  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_session_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigSessionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_config_session_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_config_session_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_config_session_limit_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_session_limit  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_session_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigSessionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_config_session_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/session-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerConfigSessionLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_config_timeout(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_timeout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_config_timeout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_config_timeout_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_config_timeout_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_config_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_config_timeout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerConfigTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/timeout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerConfigTimeout',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state Operational state data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state Operational state data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_state_enable(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_enable  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_state_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_state_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_state_enable_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_enable  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_state_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/state/enable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerStateEnable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_state_protocol_version(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_protocol_version  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_protocol_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateProtocolVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_state_protocol_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_state_protocol_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_state_protocol_version_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_protocol_version  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_protocol_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateProtocolVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_state_protocol_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/state/protocol-version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerStateProtocolVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_state_rate_limit(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_rate_limit  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_rate_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateRateLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_state_rate_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_state_rate_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_state_rate_limit_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_rate_limit  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_rate_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateRateLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_state_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/state/rate-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerStateRateLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_state_session_limit(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_session_limit  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_session_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateSessionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_state_session_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_state_session_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_state_session_limit_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_session_limit  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_session_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateSessionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_state_session_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/state/session-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerStateSessionLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_ssh_server_state_timeout(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_timeout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_ssh_server_state_timeout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_ssh_server_state_timeout_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_ssh_server_state_timeout_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_ssh_server_state_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_ssh_server_state_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_ssh_server_state_timeout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemSshServerStateTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_ssh_server_state_timeout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/state/timeout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemSshServerStateTimeout',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state  # noqa: E501

        OperationId: get_openconfig_system_system_state Global operational state data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state  # noqa: E501

        OperationId: get_openconfig_system_system_state Global operational state data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_state_boot_time(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_boot_time  # noqa: E501

        OperationId: get_openconfig_system_system_state_boot_time This timestamp indicates the time that the system was last restarted.  The value is the timestamp in seconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_boot_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateBootTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_state_boot_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_state_boot_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_state_boot_time_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_boot_time  # noqa: E501

        OperationId: get_openconfig_system_system_state_boot_time This timestamp indicates the time that the system was last restarted.  The value is the timestamp in seconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_boot_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateBootTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_state_boot_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/state/boot-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemStateBootTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_state_current_datetime(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_current_datetime  # noqa: E501

        OperationId: get_openconfig_system_system_state_current_datetime The current system date and time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_current_datetime(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateCurrentDatetime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_state_current_datetime_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_state_current_datetime_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_state_current_datetime_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_current_datetime  # noqa: E501

        OperationId: get_openconfig_system_system_state_current_datetime The current system date and time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_current_datetime_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateCurrentDatetime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_state_current_datetime" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/state/current-datetime', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemStateCurrentDatetime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_state_domain_name(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_domain_name  # noqa: E501

        OperationId: get_openconfig_system_system_state_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_domain_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateDomainName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_state_domain_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_state_domain_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_state_domain_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_domain_name  # noqa: E501

        OperationId: get_openconfig_system_system_state_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_domain_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateDomainName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_state_domain_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/state/domain-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemStateDomainName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_state_hostname(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_hostname  # noqa: E501

        OperationId: get_openconfig_system_system_state_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_hostname(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateHostname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_state_hostname_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_state_hostname_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_state_hostname_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_hostname  # noqa: E501

        OperationId: get_openconfig_system_system_state_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_hostname_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateHostname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_state_hostname" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/state/hostname', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemStateHostname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_state_login_banner(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_login_banner  # noqa: E501

        OperationId: get_openconfig_system_system_state_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_login_banner(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateLoginBanner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_state_login_banner_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_state_login_banner_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_state_login_banner_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_login_banner  # noqa: E501

        OperationId: get_openconfig_system_system_state_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_login_banner_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateLoginBanner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_state_login_banner" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/state/login-banner', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemStateLoginBanner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_state_motd_banner(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_motd_banner  # noqa: E501

        OperationId: get_openconfig_system_system_state_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_motd_banner(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateMotdBanner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_state_motd_banner_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_state_motd_banner_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_state_motd_banner_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_state_motd_banner  # noqa: E501

        OperationId: get_openconfig_system_system_state_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_state_motd_banner_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemStateMotdBanner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_state_motd_banner" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/state/motd-banner', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemStateMotdBanner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server Top-level container for telnet terminal servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server Top-level container for telnet terminal servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_config(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_config_enable(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfigEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_config_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_config_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_config_enable_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfigEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/enable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerConfigEnable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_config_rate_limit(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config_rate_limit  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_rate_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfigRateLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config_rate_limit  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfigRateLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_config_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/rate-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerConfigRateLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_config_session_limit(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config_session_limit  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_session_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfigSessionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_config_session_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_config_session_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_config_session_limit_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config_session_limit  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_session_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfigSessionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_config_session_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/session-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerConfigSessionLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_config_timeout(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_timeout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfigTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_config_timeout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_config_timeout_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_config_timeout_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_config_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_config_timeout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerConfigTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/timeout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerConfigTimeout',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_state(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state Operational state data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state Operational state data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_state_enable(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state_enable  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_enable(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerStateEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_state_enable_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_state_enable_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_state_enable_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state_enable  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_enable_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerStateEnable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_state_enable" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/state/enable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerStateEnable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_state_rate_limit(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state_rate_limit  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_rate_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerStateRateLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_state_rate_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_state_rate_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_state_rate_limit_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state_rate_limit  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_rate_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerStateRateLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_state_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/state/rate-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerStateRateLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_state_session_limit(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state_session_limit  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_session_limit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerStateSessionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_state_session_limit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_state_session_limit_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_state_session_limit_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state_session_limit  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_session_limit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerStateSessionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_state_session_limit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/state/session-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerStateSessionLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_system_system_telnet_server_state_timeout(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_timeout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerStateTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_system_system_telnet_server_state_timeout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_system_system_telnet_server_state_timeout_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_system_system_telnet_server_state_timeout_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_system_system_telnet_server_state_timeout  # noqa: E501

        OperationId: get_openconfig_system_system_telnet_server_state_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_system_system_telnet_server_state_timeout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSystemSystemTelnetServerStateTimeout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_system_system_telnet_server_state_timeout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/state/timeout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSystemSystemTelnetServerStateTimeout',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_aaa_accounting_events_event(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_accounting_events_event(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_aaa_authentication_users_user(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_authentication_users_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_aaa_authorization_events_event(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_authorization_events_event(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_aaa_server_groups_server_group(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_server_groups_server_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchListOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchListOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_dns_host_entries_host_entry(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: patch_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_dns_host_entries_host_entry(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: patch_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_dns_servers_server(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: patch_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_dns_servers_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_dns_servers_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_dns_servers_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_dns_servers_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: patch_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_dns_servers_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_dns_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_logging_console_selectors_selector(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: patch_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_logging_console_selectors_selector(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: patch_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_logging_remote_servers_remote_server(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: patch_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_logging_remote_servers_remote_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: patch_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchListOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchListOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_messages_debug_entries_debug_service(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: patch_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_messages_debug_entries_debug_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: patch_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_system_system_ntp_servers_server(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: patch_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_ntp_servers_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_system_system_ntp_servers_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_system_system_ntp_servers_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_system_system_ntp_servers_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: patch_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_system_system_ntp_servers_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_system_system_ntp_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system  # noqa: E501

        OperationId: patch_openconfig_system_system Enclosing container for system-related configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystem body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system  # noqa: E501

        OperationId: patch_openconfig_system_system Enclosing container for system-related configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystem body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa Top-level container for AAA services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaa body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa Top-level container for AAA services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaa body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_accounting(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting Top-level container for AAA accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAccounting body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_accounting_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_accounting_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_accounting_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting Top-level container for AAA accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAccounting body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_accounting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_accounting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_accounting_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAccountingConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_accounting_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_accounting_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_accounting_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAccountingConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_accounting_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_accounting_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_accounting_config_accounting_method(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_config_accounting_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAccountingConfigAccountingMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAccountingConfigAccountingMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_accounting_config_accounting_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_accounting_config_accounting_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config/accounting-method', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_accounting_events(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_events  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_events Enclosing container for defining handling of events for accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_events(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAccountingEvents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_accounting_events_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_accounting_events_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_accounting_events_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_events  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_events Enclosing container for defining handling of events for accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_events_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAccountingEvents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_accounting_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_accounting_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_accounting_events_event(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_events_event(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PatchOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PatchOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `patch_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_accounting_events_event_config(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_events_event_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_events_event_config Configuration data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_events_event_config(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PatchOpenconfigSystemSystemAaaAccountingEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_events_event_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_events_event_config Configuration data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PatchOpenconfigSystemSystemAaaAccountingEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_accounting_events_event_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `patch_openconfig_system_system_aaa_accounting_events_event_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_accounting_events_event_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_accounting_events_event_config_record(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_events_event_config_record(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PatchOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PatchOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_accounting_events_event_config_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `patch_openconfig_system_system_aaa_accounting_events_event_config_record`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_accounting_events_event_config_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/config/record', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthentication body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthentication body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_admin_user(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_admin_user  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_admin_user Top-level container for the system root or admin user configuration and operational state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_admin_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationAdminUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_admin_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_admin_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_admin_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_admin_user  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_admin_user Top-level container for the system root or admin user configuration and operational state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_admin_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationAdminUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_admin_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_admin_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_admin_user_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_admin_user_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationAdminUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationAdminUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_admin_user_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_admin_user_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config/admin-password', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPasswordHashed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPasswordHashed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config/admin-password-hashed', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_config_authentication_method(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_config_authentication_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_config_authentication_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_config_authentication_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config/authentication-method', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_users(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users Enclosing container list of local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_users_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_users_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_users_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users Enclosing container list of local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_users_user(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `patch_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_users_user_config(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config Configuration data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config Configuration data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_users_user_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_users_user_config_password(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_password(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_users_user_config_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config_password`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/password', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPasswordHashed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPasswordHashed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config_password_hashed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/password-hashed', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_users_user_config_role(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config_role  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_role(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfigRole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config_role  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfigRole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_users_user_config_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config_role`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/role', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfigSshKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PatchOpenconfigSystemSystemAaaAuthenticationUsersUserConfigSshKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authentication_users_user_config_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/ssh-key', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authorization(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization Top-level container for AAA authorization configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthorization body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authorization_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authorization_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authorization_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization Top-level container for AAA authorization configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthorization body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authorization_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthorizationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authorization_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authorization_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authorization_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthorizationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authorization_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authorization_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authorization_config_authorization_method(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_config_authorization_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authorization_config_authorization_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authorization_config_authorization_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config/authorization-method', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authorization_events(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_events  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_events Enclosing container for the set of events subject to authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_events(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthorizationEvents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authorization_events_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authorization_events_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authorization_events_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_events  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_events Enclosing container for the set of events subject to authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_events_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaAuthorizationEvents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authorization_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authorization_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authorization_events_event(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_events_event(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PatchOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PatchOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `patch_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_authorization_events_event_config(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_events_event_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_events_event_config Configuration data for each authorized event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_events_event_config(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PatchOpenconfigSystemSystemAaaAuthorizationEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_authorization_events_event_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_authorization_events_event_config Configuration data for each authorized event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PatchOpenconfigSystemSystemAaaAuthorizationEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_authorization_events_event_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `patch_openconfig_system_system_aaa_authorization_events_event_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_authorization_events_event_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups Enclosing container for AAA server groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaServerGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups Enclosing container for AAA server groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemAaaServerGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_config(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_config Configuration data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_config Configuration data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_config_type(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_config_type(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_config_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_config_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_config_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/config/type', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers Enclosing container the list of servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers Enclosing container the list of servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config/name', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config/timeout', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius Top-level container for RADIUS server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadius body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius Top-level container for RADIUS server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadius body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAcctPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAcctPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/acct-port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/auth-port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigRetransmitAttempts body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigRetransmitAttempts body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/retransmit-attempts', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSecretKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSecretKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/secret-key', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/source-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs Top-level container for TACACS+ server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacs body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs Top-level container for TACACS+ server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacs body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSecretKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSecretKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/secret-key', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address  # noqa: E501

        OperationId: patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PatchOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/source-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_clock(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_clock  # noqa: E501

        OperationId: patch_openconfig_system_system_clock Top-level container for clock configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_clock(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemClock body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_clock_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_clock_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_clock_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_clock  # noqa: E501

        OperationId: patch_openconfig_system_system_clock Top-level container for clock configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_clock_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemClock body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_clock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_clock`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_clock_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_clock_config  # noqa: E501

        OperationId: patch_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_clock_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemClockConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_clock_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_clock_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_clock_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_clock_config  # noqa: E501

        OperationId: patch_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_clock_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemClockConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_clock_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_clock_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_clock_config_timezone_name(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: patch_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_clock_config_timezone_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemClockConfigTimezoneName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_clock_config_timezone_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_clock_config_timezone_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_clock_config_timezone_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: patch_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_clock_config_timezone_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemClockConfigTimezoneName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_clock_config_timezone_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_clock_config_timezone_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config/timezone-name', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config  # noqa: E501

        OperationId: patch_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config  # noqa: E501

        OperationId: patch_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_config_domain_name(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config_domain_name  # noqa: E501

        OperationId: patch_openconfig_system_system_config_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_domain_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfigDomainName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_config_domain_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_config_domain_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_config_domain_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config_domain_name  # noqa: E501

        OperationId: patch_openconfig_system_system_config_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_domain_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfigDomainName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_config_domain_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_config_domain_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/domain-name', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_config_hostname(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: patch_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_hostname(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfigHostname body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_config_hostname_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_config_hostname_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_config_hostname_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: patch_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_hostname_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfigHostname body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_config_hostname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_config_hostname`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/hostname', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_config_login_banner(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config_login_banner  # noqa: E501

        OperationId: patch_openconfig_system_system_config_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_login_banner(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfigLoginBanner body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_config_login_banner_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_config_login_banner_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_config_login_banner_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config_login_banner  # noqa: E501

        OperationId: patch_openconfig_system_system_config_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_login_banner_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfigLoginBanner body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_config_login_banner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_config_login_banner`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/login-banner', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_config_motd_banner(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config_motd_banner  # noqa: E501

        OperationId: patch_openconfig_system_system_config_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_motd_banner(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfigMotdBanner body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_config_motd_banner_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_config_motd_banner_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_config_motd_banner_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_config_motd_banner  # noqa: E501

        OperationId: patch_openconfig_system_system_config_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_config_motd_banner_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemConfigMotdBanner body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_config_motd_banner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_config_motd_banner`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/motd-banner', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns  # noqa: E501

        OperationId: patch_openconfig_system_system_dns Enclosing container for DNS resolver data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDns body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns  # noqa: E501

        OperationId: patch_openconfig_system_system_dns Enclosing container for DNS resolver data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDns body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_config  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDnsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_config  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDnsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_config_search(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_config_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDnsConfigSearch body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_config_search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_config_search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_config_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_config_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDnsConfigSearch body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_config_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_config_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config/search', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_host_entries(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries Enclosing container for list of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDnsHostEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_host_entries_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_host_entries_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_host_entries_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries Enclosing container for list of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDnsHostEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_host_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_host_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_host_entries_host_entry(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `patch_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_host_entries_host_entry_config(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry_config  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry_config Configuration data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_config(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry_config  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry_config Configuration data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_host_entries_host_entry_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `patch_openconfig_system_system_dns_host_entries_host_entry_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_host_entries_host_entry_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_host_entries_host_entry_config_alias(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_config_alias(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_host_entries_host_entry_config_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `patch_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/alias', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv4-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PatchOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv6-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_servers(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_servers  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_servers Enclosing container for DNS resolver list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_servers(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDnsServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_servers_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_servers_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_servers_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_servers  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_servers Enclosing container for DNS resolver list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_servers_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemDnsServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_servers_server(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_servers_server(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PatchOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_servers_server_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_servers_server_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_servers_server_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_servers_server_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PatchOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_dns_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_servers_server_config(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_servers_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_servers_server_config Configuration data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_servers_server_config(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PatchOpenconfigSystemSystemDnsServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_servers_server_config_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_servers_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_servers_server_config Configuration data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PatchOpenconfigSystemSystemDnsServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_dns_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_dns_servers_server_config_port(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_servers_server_config_port(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PatchOpenconfigSystemSystemDnsServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_dns_servers_server_config_port_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: patch_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PatchOpenconfigSystemSystemDnsServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_dns_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_dns_servers_server_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_dns_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/config/port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_grpc_server(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server Top-level container for the gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_grpc_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_grpc_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_grpc_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server Top-level container for the gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_grpc_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_grpc_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_grpc_server_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_grpc_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_grpc_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_grpc_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_grpc_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_grpc_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_grpc_server_config_certificate_id(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_certificate_id  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_certificate_id(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigCertificateId body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_certificate_id  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigCertificateId body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_grpc_server_config_certificate_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_grpc_server_config_certificate_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/certificate-id', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_grpc_server_config_enable(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_grpc_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_grpc_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_grpc_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_grpc_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_grpc_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/enable', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_grpc_server_config_listen_addresses(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_listen_addresses(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigListenAddresses body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigListenAddresses body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_grpc_server_config_listen_addresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_grpc_server_config_listen_addresses`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/listen-addresses', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_grpc_server_config_port(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_port  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_port(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_grpc_server_config_port_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_grpc_server_config_port_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_grpc_server_config_port_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_port  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_port_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_grpc_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_grpc_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_grpc_server_config_transport_security(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_transport_security  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_transport_security(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigTransportSecurity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_grpc_server_config_transport_security_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_grpc_server_config_transport_security_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_grpc_server_config_transport_security_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_grpc_server_config_transport_security  # noqa: E501

        OperationId: patch_openconfig_system_system_grpc_server_config_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_grpc_server_config_transport_security_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemGrpcServerConfigTransportSecurity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_grpc_server_config_transport_security" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_grpc_server_config_transport_security`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/transport-security', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging  # noqa: E501

        OperationId: patch_openconfig_system_system_logging Top-level container for data related to logging / syslog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemLogging body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging  # noqa: E501

        OperationId: patch_openconfig_system_system_logging Top-level container for data related to logging / syslog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemLogging body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_console(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_console  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_console(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemLoggingConsole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_console_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_console_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_console_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_console  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_console_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemLoggingConsole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_console" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_console`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_console_selectors(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_console_selectors(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemLoggingConsoleSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_console_selectors_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_console_selectors_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_console_selectors_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_console_selectors_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemLoggingConsoleSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_console_selectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_console_selectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_console_selectors_selector(self, facility, severity, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_console_selectors_selector(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PatchOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, facility, severity, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PatchOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `patch_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `patch_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_console_selectors_selector_config(self, facility, severity, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_console_selectors_selector_config  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_console_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_console_selectors_selector_config(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PatchOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(self, facility, severity, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_console_selectors_selector_config  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_console_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PatchOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_console_selectors_selector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `patch_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `patch_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_remote_servers(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers Enclosing container for the list of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemLoggingRemoteServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_remote_servers_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_remote_servers_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_remote_servers_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers Enclosing container for the list of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemLoggingRemoteServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_remote_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_remote_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_remote_servers_remote_server(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_remote_servers_remote_server_config(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_config Configuration data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_config(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_config Configuration data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_remote_servers_remote_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigRemotePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigRemotePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config/remote-port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config/source-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_remote_servers_remote_server_selectors(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_selectors  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_selectors  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_remote_servers_remote_server_selectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config  # noqa: E501

        OperationId: patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PatchOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_memory(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_memory  # noqa: E501

        OperationId: patch_openconfig_system_system_memory Top-level container for system memory data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_memory(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMemory body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_memory_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_memory_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_memory_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_memory  # noqa: E501

        OperationId: patch_openconfig_system_system_memory Top-level container for system memory data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_memory_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMemory body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_memory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_memory`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/memory', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_messages(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages  # noqa: E501

        OperationId: patch_openconfig_system_system_messages Top-level container for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMessages body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_messages_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_messages_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_messages_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages  # noqa: E501

        OperationId: patch_openconfig_system_system_messages Top-level container for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMessages body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_messages_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_config  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMessagesConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_messages_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_messages_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_messages_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_config  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMessagesConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_messages_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_messages_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_messages_config_severity(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_config_severity(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMessagesConfigSeverity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_messages_config_severity_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_messages_config_severity_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_messages_config_severity_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_config_severity_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMessagesConfigSeverity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_messages_config_severity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_messages_config_severity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config/severity', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_messages_debug_entries(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_debug_entries  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_debug_entries Enclosing container for list of debugs to enable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_debug_entries(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMessagesDebugEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_messages_debug_entries_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_messages_debug_entries_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_messages_debug_entries_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_debug_entries  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_debug_entries Enclosing container for list of debugs to enable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_debug_entries_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemMessagesDebugEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_messages_debug_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_messages_debug_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_messages_debug_entries_debug_service(self, service, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_debug_entries_debug_service(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PatchOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, service, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PatchOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `patch_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_messages_debug_entries_debug_service_config(self, service, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_debug_entries_debug_service_config  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_debug_entries_debug_service_config Configuration data for debug service entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_debug_entries_debug_service_config(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PatchOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(self, service, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_debug_entries_debug_service_config  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_debug_entries_debug_service_config Configuration data for debug service entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PatchOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_messages_debug_entries_debug_service_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `patch_openconfig_system_system_messages_debug_entries_debug_service_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_messages_debug_entries_debug_service_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(self, service, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PatchOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(self, service, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PatchOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_messages_debug_entries_debug_service_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/config/enabled', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp Top-level container for NTP configuration and state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp Top-level container for NTP configuration and state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_config_enable_ntp_auth(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_config_enable_ntp_auth  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_config_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_config_enable_ntp_auth(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpConfigEnableNtpAuth body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_config_enable_ntp_auth  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_config_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpConfigEnableNtpAuth body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_config_enable_ntp_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_config_enable_ntp_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/enable-ntp-auth', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_config_enabled(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_config_enabled(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_config_enabled_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_config_enabled_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/enabled', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_config_ntp_source_address(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_config_ntp_source_address  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_config_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_config_ntp_source_address(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpConfigNtpSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_config_ntp_source_address  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_config_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpConfigNtpSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_config_ntp_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_config_ntp_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/ntp-source-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_ntp_keys(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys Enclosing container for list of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpNtpKeys body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_ntp_keys_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_ntp_keys_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_ntp_keys_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys Enclosing container for list of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpNtpKeys body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_ntp_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_ntp_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_ntp_keys_ntp_key(self, key_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_ntp_key(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PatchOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PatchOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `patch_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config(self, key_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config Configuration data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PatchOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config Configuration data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PatchOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(self, key_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PatchOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PatchOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config/key-type', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value(self, key_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PatchOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PatchOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config/key-value', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_servers(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers Enclosing container for the list of NTP servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_servers_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_servers_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_servers_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers Enclosing container for the list of NTP servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemNtpServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_servers_server(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_servers_server_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_servers_server_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_servers_server_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_ntp_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_servers_server_config(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config Configuration data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_servers_server_config_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config Configuration data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_ntp_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_servers_server_config_association_type(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_association_type  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_association_type(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigAssociationType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_association_type  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigAssociationType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_servers_server_config_association_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_ntp_servers_server_config_association_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_servers_server_config_association_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/association-type', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_servers_server_config_iburst(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_iburst  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_iburst(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigIburst body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_iburst  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigIburst body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_servers_server_config_iburst" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_ntp_servers_server_config_iburst`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_servers_server_config_iburst`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/iburst', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_servers_server_config_port(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_port(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_servers_server_config_port_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_ntp_servers_server_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_servers_server_config_prefer(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_prefer  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_prefer(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigPrefer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_prefer  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigPrefer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_servers_server_config_prefer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_ntp_servers_server_config_prefer`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_servers_server_config_prefer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/prefer', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ntp_servers_server_config_version(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_version  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_version(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigVersion body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ntp_servers_server_config_version_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ntp_servers_server_config_version  # noqa: E501

        OperationId: patch_openconfig_system_system_ntp_servers_server_config_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PatchOpenconfigSystemSystemNtpServersServerConfigVersion body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ntp_servers_server_config_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `patch_openconfig_system_system_ntp_servers_server_config_version`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ntp_servers_server_config_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/version', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_processes(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_processes  # noqa: E501

        OperationId: patch_openconfig_system_system_processes Parameters related to all monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_processes(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemProcesses body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_processes_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_processes_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_processes_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_processes  # noqa: E501

        OperationId: patch_openconfig_system_system_processes Parameters related to all monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_processes_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemProcesses body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_processes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_processes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ssh_server(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server Top-level container for ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ssh_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ssh_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ssh_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server Top-level container for ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ssh_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ssh_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ssh_server_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ssh_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ssh_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ssh_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ssh_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ssh_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ssh_server_config_enable(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ssh_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ssh_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ssh_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ssh_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ssh_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/enable', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ssh_server_config_protocol_version(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_protocol_version  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_protocol_version(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigProtocolVersion body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_protocol_version  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigProtocolVersion body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ssh_server_config_protocol_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ssh_server_config_protocol_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/protocol-version', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ssh_server_config_rate_limit(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_rate_limit  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_rate_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigRateLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_rate_limit  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigRateLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ssh_server_config_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ssh_server_config_rate_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/rate-limit', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ssh_server_config_session_limit(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_session_limit  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_session_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigSessionLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ssh_server_config_session_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ssh_server_config_session_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ssh_server_config_session_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_session_limit  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_session_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigSessionLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ssh_server_config_session_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ssh_server_config_session_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/session-limit', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_ssh_server_config_timeout(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_timeout  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_timeout(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_ssh_server_config_timeout_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_ssh_server_config_timeout_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_ssh_server_config_timeout_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_ssh_server_config_timeout  # noqa: E501

        OperationId: patch_openconfig_system_system_ssh_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_ssh_server_config_timeout_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemSshServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_ssh_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_ssh_server_config_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/timeout', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_telnet_server(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server Top-level container for telnet terminal servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_telnet_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_telnet_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_telnet_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server Top-level container for telnet terminal servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_telnet_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_telnet_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_telnet_server_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_telnet_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_telnet_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_telnet_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_telnet_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_telnet_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_telnet_server_config_enable(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_telnet_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_telnet_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_telnet_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_telnet_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_telnet_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/enable', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_telnet_server_config_rate_limit(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config_rate_limit  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_rate_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfigRateLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config_rate_limit  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfigRateLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_telnet_server_config_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_telnet_server_config_rate_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/rate-limit', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_telnet_server_config_session_limit(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config_session_limit  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_session_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfigSessionLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_telnet_server_config_session_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_telnet_server_config_session_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_telnet_server_config_session_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config_session_limit  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_session_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfigSessionLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_telnet_server_config_session_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_telnet_server_config_session_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/session-limit', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_system_system_telnet_server_config_timeout(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config_timeout  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_timeout(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_system_system_telnet_server_config_timeout_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_system_system_telnet_server_config_timeout_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_system_system_telnet_server_config_timeout_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_system_system_telnet_server_config_timeout  # noqa: E501

        OperationId: patch_openconfig_system_system_telnet_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_system_system_telnet_server_config_timeout_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSystemSystemTelnetServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_system_system_telnet_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_system_system_telnet_server_config_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/timeout', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_aaa_accounting_events_event(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_accounting_events_event(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_aaa_authentication_users_user(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_authentication_users_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_aaa_authorization_events_event(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_authorization_events_event(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_aaa_server_groups_server_group(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_server_groups_server_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PostListOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PostListOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_dns_host_entries_host_entry(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: post_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_dns_host_entries_host_entry(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: post_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_dns_servers_server(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: post_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_dns_servers_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_dns_servers_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_dns_servers_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_dns_servers_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: post_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_dns_servers_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_dns_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_logging_console_selectors_selector(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: post_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_logging_console_selectors_selector(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: post_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_logging_remote_servers_remote_server(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: post_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_logging_remote_servers_remote_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: post_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PostListOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PostListOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_messages_debug_entries_debug_service(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: post_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_messages_debug_entries_debug_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: post_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_ntp_ntp_keys_ntp_key(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: post_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_ntp_ntp_keys_ntp_key(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: post_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_system_system_ntp_servers_server(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: post_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_ntp_servers_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_system_system_ntp_servers_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_system_system_ntp_servers_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_system_system_ntp_servers_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: post_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_system_system_ntp_servers_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_system_system_ntp_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_accounting_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_accounting_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAccountingConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_accounting_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_accounting_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_accounting_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_accounting_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAccountingConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_accounting_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_accounting_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_accounting_config_accounting_method(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_accounting_config_accounting_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAccountingConfigAccountingMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAccountingConfigAccountingMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_accounting_config_accounting_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_accounting_config_accounting_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_accounting_events_event_config(self, event_type, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_accounting_events_event_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_accounting_events_event_config Configuration data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_accounting_events_event_config(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PostOpenconfigSystemSystemAaaAccountingEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_accounting_events_event_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_accounting_events_event_config Configuration data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PostOpenconfigSystemSystemAaaAccountingEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_accounting_events_event_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `post_openconfig_system_system_aaa_accounting_events_event_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_accounting_events_event_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_accounting_events_event_config_record(self, event_type, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_accounting_events_event_config_record(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PostOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PostOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_accounting_events_event_config_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `post_openconfig_system_system_aaa_accounting_events_event_config_record`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_accounting_events_event_config_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authentication(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthentication body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authentication_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authentication_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authentication_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthentication body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authentication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authentication`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authentication_admin_user_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_admin_user_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthenticationAdminUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthenticationAdminUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authentication_admin_user_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authentication_admin_user_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authentication_admin_user_config_admin_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authentication_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthenticationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authentication_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authentication_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authentication_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthenticationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authentication_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authentication_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authentication_config_authentication_method(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_config_authentication_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authentication_config_authentication_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authentication_config_authentication_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authentication_users_user_config(self, username, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_users_user_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_users_user_config Configuration data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_users_user_config(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PostOpenconfigSystemSystemAaaAuthenticationUsersUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_users_user_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_users_user_config Configuration data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PostOpenconfigSystemSystemAaaAuthenticationUsersUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authentication_users_user_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `post_openconfig_system_system_aaa_authentication_users_user_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authentication_users_user_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authentication_users_user_config_password(self, username, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_users_user_config_password(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PostOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PostOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authentication_users_user_config_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `post_openconfig_system_system_aaa_authentication_users_user_config_password`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authentication_users_user_config_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authorization_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authorization_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthorizationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authorization_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authorization_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authorization_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authorization_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthorizationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authorization_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authorization_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authorization_config_authorization_method(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authorization_config_authorization_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authorization_config_authorization_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authorization_config_authorization_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_authorization_events_event_config(self, event_type, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authorization_events_event_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authorization_events_event_config Configuration data for each authorized event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authorization_events_event_config(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PostOpenconfigSystemSystemAaaAuthorizationEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_authorization_events_event_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_authorization_events_event_config Configuration data for each authorized event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PostOpenconfigSystemSystemAaaAuthorizationEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_authorization_events_event_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `post_openconfig_system_system_aaa_authorization_events_event_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_authorization_events_event_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_server_groups_server_group_config(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_config Configuration data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_config Configuration data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_server_groups_server_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_system_system_aaa_server_groups_server_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_server_groups_server_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_server_groups_server_group_config_type(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_config_type(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_server_groups_server_group_config_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_system_system_aaa_server_groups_server_group_config_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_server_groups_server_group_config_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PostOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_clock_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_clock_config  # noqa: E501

        OperationId: post_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_clock_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemClockConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_clock_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_clock_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_clock_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_clock_config  # noqa: E501

        OperationId: post_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_clock_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemClockConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_clock_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_clock_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_clock_config_timezone_name(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: post_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_clock_config_timezone_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemClockConfigTimezoneName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_clock_config_timezone_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_clock_config_timezone_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_clock_config_timezone_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: post_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_clock_config_timezone_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemClockConfigTimezoneName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_clock_config_timezone_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_clock_config_timezone_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_config  # noqa: E501

        OperationId: post_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_config  # noqa: E501

        OperationId: post_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_config_hostname(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: post_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_config_hostname(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemConfigHostname body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_config_hostname_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_config_hostname_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_config_hostname_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: post_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_config_hostname_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemConfigHostname body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_config_hostname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_config_hostname`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_dns_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_config  # noqa: E501

        OperationId: post_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemDnsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_dns_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_dns_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_dns_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_config  # noqa: E501

        OperationId: post_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemDnsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_dns_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_dns_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_dns_config_search(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: post_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_config_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemDnsConfigSearch body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_dns_config_search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_dns_config_search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_dns_config_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: post_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_config_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemDnsConfigSearch body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_dns_config_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_dns_config_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_dns_host_entries_host_entry_config(self, hostname, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_host_entries_host_entry_config  # noqa: E501

        OperationId: post_openconfig_system_system_dns_host_entries_host_entry_config Configuration data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_host_entries_host_entry_config(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PostOpenconfigSystemSystemDnsHostEntriesHostEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_host_entries_host_entry_config  # noqa: E501

        OperationId: post_openconfig_system_system_dns_host_entries_host_entry_config Configuration data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PostOpenconfigSystemSystemDnsHostEntriesHostEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_dns_host_entries_host_entry_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `post_openconfig_system_system_dns_host_entries_host_entry_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_dns_host_entries_host_entry_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_dns_host_entries_host_entry_config_alias(self, hostname, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: post_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_host_entries_host_entry_config_alias(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PostOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: post_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PostOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_dns_host_entries_host_entry_config_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `post_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_dns_servers_server_config(self, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_servers_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_dns_servers_server_config Configuration data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_servers_server_config(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PostOpenconfigSystemSystemDnsServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_dns_servers_server_config_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_servers_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_dns_servers_server_config Configuration data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PostOpenconfigSystemSystemDnsServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_dns_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_dns_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_dns_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_dns_servers_server_config_port(self, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: post_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_servers_server_config_port(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PostOpenconfigSystemSystemDnsServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_dns_servers_server_config_port_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: post_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PostOpenconfigSystemSystemDnsServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_dns_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_dns_servers_server_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_dns_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_grpc_server_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_grpc_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemGrpcServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_grpc_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_grpc_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_grpc_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_grpc_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemGrpcServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_grpc_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_grpc_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_grpc_server_config_enable(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: post_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_grpc_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemGrpcServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_grpc_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_grpc_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_grpc_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: post_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_grpc_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemGrpcServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_grpc_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_grpc_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_logging_console(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_console  # noqa: E501

        OperationId: post_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_console(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemLoggingConsole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_logging_console_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_logging_console_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_logging_console_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_console  # noqa: E501

        OperationId: post_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_console_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemLoggingConsole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_logging_console" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_logging_console`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_logging_console_selectors(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: post_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_console_selectors(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemLoggingConsoleSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_logging_console_selectors_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_logging_console_selectors_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_logging_console_selectors_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: post_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_console_selectors_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemLoggingConsoleSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_logging_console_selectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_logging_console_selectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_logging_console_selectors_selector_config(self, facility, severity, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_console_selectors_selector_config  # noqa: E501

        OperationId: post_openconfig_system_system_logging_console_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_console_selectors_selector_config(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PostOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(self, facility, severity, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_console_selectors_selector_config  # noqa: E501

        OperationId: post_openconfig_system_system_logging_console_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PostOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_logging_console_selectors_selector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `post_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `post_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_logging_remote_servers_remote_server_config(self, host, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_remote_servers_remote_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_logging_remote_servers_remote_server_config Configuration data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_remote_servers_remote_server_config(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PostOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_remote_servers_remote_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_logging_remote_servers_remote_server_config Configuration data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PostOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_logging_remote_servers_remote_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `post_openconfig_system_system_logging_remote_servers_remote_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_logging_remote_servers_remote_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(self, host, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PostOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PostOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_logging_remote_servers_remote_server_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config  # noqa: E501

        OperationId: post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PostOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config  # noqa: E501

        OperationId: post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PostOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_messages_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_messages_config  # noqa: E501

        OperationId: post_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_messages_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemMessagesConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_messages_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_messages_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_messages_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_messages_config  # noqa: E501

        OperationId: post_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_messages_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemMessagesConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_messages_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_messages_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_messages_config_severity(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: post_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_messages_config_severity(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemMessagesConfigSeverity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_messages_config_severity_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_messages_config_severity_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_messages_config_severity_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: post_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_messages_config_severity_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemMessagesConfigSeverity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_messages_config_severity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_messages_config_severity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_messages_debug_entries_debug_service_config(self, service, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_messages_debug_entries_debug_service_config  # noqa: E501

        OperationId: post_openconfig_system_system_messages_debug_entries_debug_service_config Configuration data for debug service entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_messages_debug_entries_debug_service_config(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PostOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(self, service, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_messages_debug_entries_debug_service_config  # noqa: E501

        OperationId: post_openconfig_system_system_messages_debug_entries_debug_service_config Configuration data for debug service entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PostOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_messages_debug_entries_debug_service_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `post_openconfig_system_system_messages_debug_entries_debug_service_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_messages_debug_entries_debug_service_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(self, service, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PostOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(self, service, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PostOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_messages_debug_entries_debug_service_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_ntp_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemNtpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_ntp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_ntp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_ntp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemNtpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_ntp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_ntp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_ntp_config_enabled(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_config_enabled(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemNtpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_ntp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_ntp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_ntp_config_enabled_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_config_enabled_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemNtpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_ntp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_ntp_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_ntp_ntp_keys_ntp_key_config(self, key_id, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_ntp_keys_ntp_key_config  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_ntp_keys_ntp_key_config Configuration data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_ntp_keys_ntp_key_config(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PostOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_ntp_keys_ntp_key_config  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_ntp_keys_ntp_key_config Configuration data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PostOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_ntp_ntp_keys_ntp_key_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `post_openconfig_system_system_ntp_ntp_keys_ntp_key_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_ntp_ntp_keys_ntp_key_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(self, key_id, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PostOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PostOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_ntp_servers_server_config(self, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_servers_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_servers_server_config Configuration data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_servers_server_config(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PostOpenconfigSystemSystemNtpServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_ntp_servers_server_config_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_servers_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_servers_server_config Configuration data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PostOpenconfigSystemSystemNtpServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_ntp_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_ntp_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_ntp_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_ntp_servers_server_config_port(self, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_servers_server_config_port(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PostOpenconfigSystemSystemNtpServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_ntp_servers_server_config_port_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: post_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PostOpenconfigSystemSystemNtpServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_ntp_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `post_openconfig_system_system_ntp_servers_server_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_ntp_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_ssh_server_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ssh_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemSshServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_ssh_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_ssh_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_ssh_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ssh_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemSshServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_ssh_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_ssh_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_ssh_server_config_enable(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: post_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ssh_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemSshServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_ssh_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_ssh_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_ssh_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: post_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_ssh_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemSshServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_ssh_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_ssh_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_telnet_server_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_telnet_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemTelnetServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_telnet_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_telnet_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_telnet_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: post_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_telnet_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemTelnetServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_telnet_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_telnet_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_system_system_telnet_server_config_enable(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: post_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_telnet_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemTelnetServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_system_system_telnet_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_system_system_telnet_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_system_system_telnet_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: post_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_system_system_telnet_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSystemSystemTelnetServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_system_system_telnet_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_system_system_telnet_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_aaa_accounting_events_event(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_accounting_events_event(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_accounting_events_event_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_aaa_authentication_users_user(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_authentication_users_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_authentication_users_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_aaa_authorization_events_event(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_authorization_events_event(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_authorization_events_event_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_aaa_server_groups_server_group(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_server_groups_server_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_server_groups_server_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutListOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutListOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_dns_host_entries_host_entry(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: put_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_dns_host_entries_host_entry(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: put_list_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_dns_host_entries_host_entry_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_dns_servers_server(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: put_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_dns_servers_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_dns_servers_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_dns_servers_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_dns_servers_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: put_list_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_dns_servers_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_dns_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_logging_console_selectors_selector(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: put_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_logging_console_selectors_selector(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: put_list_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_logging_console_selectors_selector_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_logging_remote_servers_remote_server(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: put_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_logging_remote_servers_remote_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: put_list_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutListOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutListOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_messages_debug_entries_debug_service(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: put_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_messages_debug_entries_debug_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: put_list_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_ntp_ntp_keys_ntp_key(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: put_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_ntp_ntp_keys_ntp_key(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: put_list_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_system_system_ntp_servers_server(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: put_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_ntp_servers_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_system_system_ntp_servers_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_system_system_ntp_servers_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_system_system_ntp_servers_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: put_list_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_system_system_ntp_servers_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_system_system_ntp_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system  # noqa: E501

        OperationId: put_openconfig_system_system Enclosing container for system-related configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystem body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system  # noqa: E501

        OperationId: put_openconfig_system_system Enclosing container for system-related configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystem body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa  # noqa: E501

        OperationId: put_openconfig_system_system_aaa Top-level container for AAA services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaa body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa  # noqa: E501

        OperationId: put_openconfig_system_system_aaa Top-level container for AAA services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaa body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_accounting(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting Top-level container for AAA accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAccounting body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_accounting_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_accounting_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_accounting_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting Top-level container for AAA accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAccounting body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_accounting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_accounting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_accounting_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAccountingConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_accounting_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_accounting_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_accounting_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_config Configuration data for user activity accounting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAccountingConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_accounting_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_accounting_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_accounting_config_accounting_method(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_config_accounting_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAccountingConfigAccountingMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_config_accounting_method  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_config_accounting_method An ordered list of methods used for AAA accounting for this event type.  The method is defined by the destination for accounting data, which may be specified as the group of all TACACS+/RADIUS servers, a defined server group, or the local system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_config_accounting_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAccountingConfigAccountingMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_accounting_config_accounting_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_accounting_config_accounting_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/config/accounting-method', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_accounting_events(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_events  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_events Enclosing container for defining handling of events for accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_events(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAccountingEvents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_accounting_events_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_accounting_events_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_accounting_events_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_events  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_events Enclosing container for defining handling of events for accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_events_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAccountingEvents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_accounting_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_accounting_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_accounting_events_event(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_events_event(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PutOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_accounting_events_event_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_events_event  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_events_event List of events subject to accounting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_events_event_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PutOpenconfigSystemSystemAaaAccountingEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_accounting_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `put_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_accounting_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_accounting_events_event_config(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_events_event_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_events_event_config Configuration data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_events_event_config(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PutOpenconfigSystemSystemAaaAccountingEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_events_event_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_events_event_config Configuration data for accounting events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_events_event_config_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PutOpenconfigSystemSystemAaaAccountingEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_accounting_events_event_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `put_openconfig_system_system_aaa_accounting_events_event_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_accounting_events_event_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_accounting_events_event_config_record(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_events_event_config_record(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PutOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_accounting_events_event_config_record  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_accounting_events_event_config_record Type of record to send to the accounting server for this activity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_accounting_events_event_config_record_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type being logged at the accounting server (required)
        :param PutOpenconfigSystemSystemAaaAccountingEventsEventConfigRecord body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_accounting_events_event_config_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `put_openconfig_system_system_aaa_accounting_events_event_config_record`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_accounting_events_event_config_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/accounting/events/event={event-type}/config/record', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthentication body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication Top-level container for global authentication data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthentication body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_admin_user(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_admin_user  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_admin_user Top-level container for the system root or admin user configuration and operational state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_admin_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationAdminUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_admin_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_admin_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_admin_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_admin_user  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_admin_user Top-level container for the system root or admin user configuration and operational state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_admin_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationAdminUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_admin_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_admin_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_admin_user_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_admin_user_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationAdminUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_admin_user_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_admin_user_config Configuration data for the root user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_admin_user_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationAdminUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_admin_user_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_admin_user_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password The admin/root password, supplied as a cleartext string. The system should hash and only store the password as a hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config/admin-password', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPasswordHashed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed The admin/root password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationAdminUserConfigAdminPasswordHashed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_admin_user_config_admin_password_hashed`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/admin-user/config/admin-password-hashed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_config Configuration data for global authentication services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_config_authentication_method(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_config_authentication_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_config_authentication_method  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_config_authentication_method Ordered list of authentication methods for users.  This can be either a reference to a server group, or a well- defined designation in the AAA_METHOD_TYPE identity.  If authentication fails with one method, the next defined method is tried -- failure of all methods results in the user being denied access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_config_authentication_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationConfigAuthenticationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_config_authentication_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_config_authentication_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/config/authentication-method', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_users(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users Enclosing container list of local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationUsers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_users_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_users_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_users_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users Enclosing container list of local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthenticationUsers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_users_user(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_users_user_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user List of local users on the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUser body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_users_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `put_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_users_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_users_user_config(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config Configuration data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config Configuration data for local users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_users_user_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `put_openconfig_system_system_aaa_authentication_users_user_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_users_user_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_users_user_config_password(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_password(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config_password  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config_password The user password, supplied as cleartext.  The system must hash the value and only store the hashed value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_password_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPassword body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_users_user_config_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `put_openconfig_system_system_aaa_authentication_users_user_config_password`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_users_user_config_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/password', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPasswordHashed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed The user password, supplied as a hashed value using the notation described in the definition of the crypt-password-type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfigPasswordHashed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_users_user_config_password_hashed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/password-hashed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_users_user_config_role(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config_role  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_role(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfigRole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config_role  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config_role Role assigned to the user.  The role may be supplied as a string or a role defined by the SYSTEM_DEFINED_ROLES identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_role_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfigRole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_users_user_config_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `put_openconfig_system_system_aaa_authentication_users_user_config_role`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_users_user_config_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/role', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfigSshKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(self, username, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key SSH public key for the user (RSA or DSA)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key_with_http_info(username, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: References the configured username for the user (required)
        :param PutOpenconfigSystemSystemAaaAuthenticationUsersUserConfigSshKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authentication_users_user_config_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authentication/users/user={username}/config/ssh-key', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authorization(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization Top-level container for AAA authorization configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthorization body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authorization_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authorization_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authorization_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization Top-level container for AAA authorization configuration and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthorization body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authorization_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthorizationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authorization_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authorization_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authorization_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_config Configuration data for authorization based on AAA methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthorizationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authorization_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authorization_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authorization_config_authorization_method(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_config_authorization_method(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_config_authorization_method  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_config_authorization_method Ordered list of methods for authorizing commands.  The first method that provides a response (positive or negative) should be used.  The list may contain a well-defined method such as the set of all TACACS or RADIUS servers, or the name of a defined AAA server group.  The system must validate that the named server group exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_config_authorization_method_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthorizationConfigAuthorizationMethod body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authorization_config_authorization_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authorization_config_authorization_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/config/authorization-method', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authorization_events(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_events  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_events Enclosing container for the set of events subject to authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_events(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthorizationEvents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authorization_events_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authorization_events_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authorization_events_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_events  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_events Enclosing container for the set of events subject to authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_events_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaAuthorizationEvents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authorization_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authorization_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authorization_events_event(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_events_event(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PutOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authorization_events_event_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_events_event  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_events_event List of events subject to AAA authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_events_event_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PutOpenconfigSystemSystemAaaAuthorizationEventsEvent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authorization_events_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `put_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authorization_events_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_authorization_events_event_config(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_events_event_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_events_event_config Configuration data for each authorized event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_events_event_config(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PutOpenconfigSystemSystemAaaAuthorizationEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(self, event_type, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_authorization_events_event_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_authorization_events_event_config Configuration data for each authorized event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_authorization_events_event_config_with_http_info(event_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_type: Reference to the event-type list key (required)
        :param PutOpenconfigSystemSystemAaaAuthorizationEventsEventConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_authorization_events_event_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `put_openconfig_system_system_aaa_authorization_events_event_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_authorization_events_event_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/authorization/events/event={event-type}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups Enclosing container for AAA server groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaServerGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups Enclosing container for AAA server groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemAaaServerGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group List of AAA server groups.  All servers in a group must have the same type as indicated by the server type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_config(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_config Configuration data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_config Configuration data for each server group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_config_type(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_config_type(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_config_type  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_config_type AAA server type -- all servers in the group must be of this type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_config_type_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupConfigType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_config_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_config_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_config_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/config/type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers Enclosing container the list of servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers Enclosing container the list of servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server List of AAA servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name Name assigned to the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout Set the timeout in seconds on responses from the AAA server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_config_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/config/timeout', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius Top-level container for RADIUS server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadius body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius Top-level container for RADIUS server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadius body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config Configuration data for RADIUS servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAcctPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port Port number for accounting requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAcctPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_acct_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/acct-port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port Port number for authentication requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigAuthPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_auth_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/auth-port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigRetransmitAttempts body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts Number of times the system may resend a request to the RADIUS server when it is unresponsive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigRetransmitAttempts body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_retransmit_attempts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/retransmit-attempts', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSecretKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSecretKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/secret-key', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address Source IP address to use in messages to the RADIUS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerRadiusConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_radius_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/radius/config/source-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs Top-level container for TACACS+ server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacs body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs Top-level container for TACACS+ server data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacs body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config Configuration data for TACACS+ server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port The port number on which to contact the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSecretKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key The unencrypted shared key used between the authentication server and the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSecretKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_secret_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/secret-key', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(self, name, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address  # noqa: E501

        OperationId: put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address Source IP address to use in messages to the TACACS server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address_with_http_info(name, address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to configured name of the server group (required)
        :param str address: Reference to the configured address of the AAA server (required)
        :param PutOpenconfigSystemSystemAaaServerGroupsServerGroupServersServerTacacsConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_aaa_server_groups_server_group_servers_server_tacacs_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/aaa/server-groups/server-group={name}/servers/server={address}/tacacs/config/source-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_clock(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_clock  # noqa: E501

        OperationId: put_openconfig_system_system_clock Top-level container for clock configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_clock(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemClock body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_clock_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_clock_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_clock_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_clock  # noqa: E501

        OperationId: put_openconfig_system_system_clock Top-level container for clock configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_clock_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemClock body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_clock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_clock`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_clock_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_clock_config  # noqa: E501

        OperationId: put_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_clock_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemClockConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_clock_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_clock_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_clock_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_clock_config  # noqa: E501

        OperationId: put_openconfig_system_system_clock_config Configuration data for system clock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_clock_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemClockConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_clock_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_clock_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_clock_config_timezone_name(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: put_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_clock_config_timezone_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemClockConfigTimezoneName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_clock_config_timezone_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_clock_config_timezone_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_clock_config_timezone_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_clock_config_timezone_name  # noqa: E501

        OperationId: put_openconfig_system_system_clock_config_timezone_name The TZ database name to use for the system, such as 'Europe/Stockholm'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_clock_config_timezone_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemClockConfigTimezoneName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_clock_config_timezone_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_clock_config_timezone_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/clock/config/timezone-name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config  # noqa: E501

        OperationId: put_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config  # noqa: E501

        OperationId: put_openconfig_system_system_config Global configuration data for the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_config_domain_name(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config_domain_name  # noqa: E501

        OperationId: put_openconfig_system_system_config_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_domain_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfigDomainName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_config_domain_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_config_domain_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_config_domain_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config_domain_name  # noqa: E501

        OperationId: put_openconfig_system_system_config_domain_name Specifies the domain name used to form fully qualified name for unqualified hostnames.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_domain_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfigDomainName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_config_domain_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_config_domain_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/domain-name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_config_hostname(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: put_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_hostname(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfigHostname body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_config_hostname_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_config_hostname_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_config_hostname_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config_hostname  # noqa: E501

        OperationId: put_openconfig_system_system_config_hostname The hostname of the device -- should be a single domain label, without the domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_hostname_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfigHostname body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_config_hostname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_config_hostname`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/hostname', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_config_login_banner(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config_login_banner  # noqa: E501

        OperationId: put_openconfig_system_system_config_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_login_banner(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfigLoginBanner body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_config_login_banner_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_config_login_banner_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_config_login_banner_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config_login_banner  # noqa: E501

        OperationId: put_openconfig_system_system_config_login_banner The console login message displayed before the login prompt, i.e., before a user logs into the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_login_banner_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfigLoginBanner body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_config_login_banner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_config_login_banner`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/login-banner', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_config_motd_banner(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config_motd_banner  # noqa: E501

        OperationId: put_openconfig_system_system_config_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_motd_banner(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfigMotdBanner body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_config_motd_banner_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_config_motd_banner_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_config_motd_banner_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_config_motd_banner  # noqa: E501

        OperationId: put_openconfig_system_system_config_motd_banner The console message displayed after a user logs into the system.  They system may append additional standard information such as the current system date and time, uptime, last login timestamp, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_config_motd_banner_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemConfigMotdBanner body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_config_motd_banner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_config_motd_banner`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/config/motd-banner', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns  # noqa: E501

        OperationId: put_openconfig_system_system_dns Enclosing container for DNS resolver data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDns body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns  # noqa: E501

        OperationId: put_openconfig_system_system_dns Enclosing container for DNS resolver data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDns body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_config  # noqa: E501

        OperationId: put_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDnsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_config  # noqa: E501

        OperationId: put_openconfig_system_system_dns_config Configuration data for the DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDnsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_config_search(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: put_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_config_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDnsConfigSearch body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_config_search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_config_search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_config_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_config_search  # noqa: E501

        OperationId: put_openconfig_system_system_dns_config_search An ordered list of domains to search when resolving a host name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_config_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDnsConfigSearch body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_config_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_config_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/config/search', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_host_entries(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries Enclosing container for list of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDnsHostEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_host_entries_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_host_entries_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_host_entries_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries Enclosing container for list of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDnsHostEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_host_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_host_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_host_entries_host_entry(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_host_entries_host_entry_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry List of static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_host_entries_host_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `put_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_host_entries_host_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_host_entries_host_entry_config(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry_config  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry_config Configuration data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_config(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry_config  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry_config Configuration data for static host entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_config_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_host_entries_host_entry_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `put_openconfig_system_system_dns_host_entries_host_entry_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_host_entries_host_entry_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_host_entries_host_entry_config_alias(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_config_alias(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry_config_alias  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry_config_alias Additional aliases for the hostname  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_config_alias_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntryConfigAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_host_entries_host_entry_config_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `put_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_host_entries_host_entry_config_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/alias', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address List of IPv4 addressses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv4Address body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_host_entries_host_entry_config_ipv4_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv4-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(self, hostname, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address  # noqa: E501

        OperationId: put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address List of IPv6 addresses for the host entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address_with_http_info(hostname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostname: Reference to the hostname list key (required)
        :param PutOpenconfigSystemSystemDnsHostEntriesHostEntryConfigIpv6Address body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hostname' is set
        if ('hostname' not in params or
                params['hostname'] is None):
            raise ValueError("Missing the required parameter `hostname` when calling `put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_host_entries_host_entry_config_ipv6_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in params:
            path_params['hostname'] = params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/host-entries/host-entry={hostname}/config/ipv6-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_servers(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_servers  # noqa: E501

        OperationId: put_openconfig_system_system_dns_servers Enclosing container for DNS resolver list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_servers(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDnsServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_servers_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_servers_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_servers_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_servers  # noqa: E501

        OperationId: put_openconfig_system_system_dns_servers Enclosing container for DNS resolver list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_servers_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemDnsServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_servers_server(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: put_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_servers_server(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PutOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_servers_server_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_servers_server_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_servers_server_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_servers_server  # noqa: E501

        OperationId: put_openconfig_system_system_dns_servers_server List of the DNS servers that the resolver should query.  When the resolver is invoked by a calling application, it sends the query to the first name server in this list.  If no response has been received within 'timeout' seconds, the resolver continues with the next server in the list. If no response is received from any server, the resolver continues with the first server again.  When the resolver has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.  Implementations MAY limit the number of entries in this list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_servers_server_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PutOpenconfigSystemSystemDnsServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_dns_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_servers_server_config(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_servers_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_dns_servers_server_config Configuration data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_servers_server_config(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PutOpenconfigSystemSystemDnsServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_servers_server_config_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_servers_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_dns_servers_server_config Configuration data for each DNS resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_servers_server_config_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PutOpenconfigSystemSystemDnsServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_dns_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_dns_servers_server_config_port(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: put_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_servers_server_config_port(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PutOpenconfigSystemSystemDnsServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_dns_servers_server_config_port_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_dns_servers_server_config_port  # noqa: E501

        OperationId: put_openconfig_system_system_dns_servers_server_config_port The port number of the DNS server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_dns_servers_server_config_port_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address of the DNS server (required)
        :param PutOpenconfigSystemSystemDnsServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_dns_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_dns_servers_server_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_dns_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/dns/servers/server={address}/config/port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_grpc_server(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server Top-level container for the gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_grpc_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_grpc_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_grpc_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server Top-level container for the gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_grpc_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_grpc_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_grpc_server_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_grpc_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_grpc_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_grpc_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config Configuration data for the system gRPC server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_grpc_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_grpc_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_grpc_server_config_certificate_id(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_certificate_id  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_certificate_id(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigCertificateId body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_certificate_id  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_certificate_id The certificate ID to be used for authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_certificate_id_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigCertificateId body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_grpc_server_config_certificate_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_grpc_server_config_certificate_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/certificate-id', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_grpc_server_config_enable(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_grpc_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_grpc_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_grpc_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_enable  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_enable Enables the gRPC server. The gRPC server is enabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_grpc_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_grpc_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/enable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_grpc_server_config_listen_addresses(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_listen_addresses(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigListenAddresses body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_listen_addresses  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_listen_addresses The IP addresses that the gRPC server should listen on. This may be an IPv4 or an IPv6 address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_listen_addresses_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigListenAddresses body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_grpc_server_config_listen_addresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_grpc_server_config_listen_addresses`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/listen-addresses', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_grpc_server_config_port(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_port  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_port(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_grpc_server_config_port_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_grpc_server_config_port_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_grpc_server_config_port_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_port  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_port TCP port on which the gRPC server should listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_port_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_grpc_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_grpc_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_grpc_server_config_transport_security(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_transport_security  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_transport_security(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigTransportSecurity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_grpc_server_config_transport_security_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_grpc_server_config_transport_security_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_grpc_server_config_transport_security_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_grpc_server_config_transport_security  # noqa: E501

        OperationId: put_openconfig_system_system_grpc_server_config_transport_security Enables gRPC transport security (e.g., TLS or SSL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_grpc_server_config_transport_security_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemGrpcServerConfigTransportSecurity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_grpc_server_config_transport_security" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_grpc_server_config_transport_security`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/grpc-server/config/transport-security', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging  # noqa: E501

        OperationId: put_openconfig_system_system_logging Top-level container for data related to logging / syslog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemLogging body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging  # noqa: E501

        OperationId: put_openconfig_system_system_logging Top-level container for data related to logging / syslog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemLogging body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_console(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_console  # noqa: E501

        OperationId: put_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_console(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemLoggingConsole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_console_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_console_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_console_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_console  # noqa: E501

        OperationId: put_openconfig_system_system_logging_console Top-level container for data related to console-based logging  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_console_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemLoggingConsole body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_console" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_console`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_console_selectors(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: put_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_console_selectors(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemLoggingConsoleSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_console_selectors_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_console_selectors_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_console_selectors_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_console_selectors  # noqa: E501

        OperationId: put_openconfig_system_system_logging_console_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_console_selectors_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemLoggingConsoleSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_console_selectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_console_selectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_console_selectors_selector(self, facility, severity, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: put_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_console_selectors_selector(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PutOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_console_selectors_selector_with_http_info(self, facility, severity, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_console_selectors_selector  # noqa: E501

        OperationId: put_openconfig_system_system_logging_console_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_console_selectors_selector_with_http_info(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PutOpenconfigSystemSystemLoggingConsoleSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_console_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `put_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `put_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_console_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_console_selectors_selector_config(self, facility, severity, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_console_selectors_selector_config  # noqa: E501

        OperationId: put_openconfig_system_system_logging_console_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_console_selectors_selector_config(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PutOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(self, facility, severity, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_console_selectors_selector_config  # noqa: E501

        OperationId: put_openconfig_system_system_logging_console_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_console_selectors_selector_config_with_http_info(facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PutOpenconfigSystemSystemLoggingConsoleSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_console_selectors_selector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `put_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `put_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_console_selectors_selector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/console/selectors/selector={facility},{severity}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_remote_servers(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers Enclosing container for the list of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemLoggingRemoteServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_remote_servers_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_remote_servers_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_remote_servers_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers Enclosing container for the list of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemLoggingRemoteServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_remote_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_remote_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_remote_servers_remote_server(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server List of remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_remote_servers_remote_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_remote_servers_remote_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_remote_servers_remote_server_config(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_config Configuration data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_config(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_config Configuration data for remote log servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_config_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_remote_servers_remote_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigRemotePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port Sets the destination port number for syslog UDP messages to the server.  The default for syslog is 514.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigRemotePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_config_remote_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config/remote-port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address Source IP address for packets to the log server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/config/source-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_remote_servers_remote_server_selectors(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_selectors  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_selectors(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(self, host, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_selectors  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_selectors Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_with_http_info(host, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectors body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_remote_servers_remote_server_selectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector List of selectors for log messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_with_http_info(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelector body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(self, host, facility, severity, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config  # noqa: E501

        OperationId: put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config_with_http_info(host, facility, severity, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: Reference to the host list key (required)
        :param str facility: Reference to facility list key (required)
        :param str severity: Reference to severity list key (required)
        :param PutOpenconfigSystemSystemLoggingRemoteServersRemoteServerSelectorsSelectorConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'facility', 'severity', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'facility' is set
        if ('facility' not in params or
                params['facility'] is None):
            raise ValueError("Missing the required parameter `facility` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_logging_remote_servers_remote_server_selectors_selector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'facility' in params:
            path_params['facility'] = params['facility']  # noqa: E501
        if 'severity' in params:
            path_params['severity'] = params['severity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/logging/remote-servers/remote-server={host}/selectors/selector={facility},{severity}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_memory(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_memory  # noqa: E501

        OperationId: put_openconfig_system_system_memory Top-level container for system memory data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_memory(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMemory body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_memory_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_memory_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_memory_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_memory  # noqa: E501

        OperationId: put_openconfig_system_system_memory Top-level container for system memory data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_memory_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMemory body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_memory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_memory`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/memory', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_messages(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages  # noqa: E501

        OperationId: put_openconfig_system_system_messages Top-level container for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMessages body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_messages_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_messages_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_messages_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages  # noqa: E501

        OperationId: put_openconfig_system_system_messages Top-level container for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMessages body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_messages_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_config  # noqa: E501

        OperationId: put_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMessagesConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_messages_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_messages_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_messages_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_config  # noqa: E501

        OperationId: put_openconfig_system_system_messages_config Configuration data for Syslog messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMessagesConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_messages_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_messages_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_messages_config_severity(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: put_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_config_severity(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMessagesConfigSeverity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_messages_config_severity_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_messages_config_severity_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_messages_config_severity_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_config_severity  # noqa: E501

        OperationId: put_openconfig_system_system_messages_config_severity Specifies that only messages of the given severity (or greater severity) are sent over the RPC.  This is analogous to differentiating which severity is to be sent to legacy Syslog servers, as opposed to local buffer or files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_config_severity_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMessagesConfigSeverity body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_messages_config_severity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_messages_config_severity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/config/severity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_messages_debug_entries(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_debug_entries  # noqa: E501

        OperationId: put_openconfig_system_system_messages_debug_entries Enclosing container for list of debugs to enable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_debug_entries(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMessagesDebugEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_messages_debug_entries_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_messages_debug_entries_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_messages_debug_entries_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_debug_entries  # noqa: E501

        OperationId: put_openconfig_system_system_messages_debug_entries Enclosing container for list of debugs to enable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_debug_entries_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemMessagesDebugEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_messages_debug_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_messages_debug_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_messages_debug_entries_debug_service(self, service, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: put_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_debug_entries_debug_service(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PutOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(self, service, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_debug_entries_debug_service  # noqa: E501

        OperationId: put_openconfig_system_system_messages_debug_entries_debug_service List of debugging entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_debug_entries_debug_service_with_http_info(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PutOpenconfigSystemSystemMessagesDebugEntriesDebugService body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_messages_debug_entries_debug_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `put_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_messages_debug_entries_debug_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_messages_debug_entries_debug_service_config(self, service, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_debug_entries_debug_service_config  # noqa: E501

        OperationId: put_openconfig_system_system_messages_debug_entries_debug_service_config Configuration data for debug service entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_debug_entries_debug_service_config(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PutOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(self, service, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_debug_entries_debug_service_config  # noqa: E501

        OperationId: put_openconfig_system_system_messages_debug_entries_debug_service_config Configuration data for debug service entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_debug_entries_debug_service_config_with_http_info(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PutOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_messages_debug_entries_debug_service_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `put_openconfig_system_system_messages_debug_entries_debug_service_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_messages_debug_entries_debug_service_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(self, service, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PutOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(self, service, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled  # noqa: E501

        OperationId: put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled Enable and disable debugging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled_with_http_info(service, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: Reference to the debug-enable service key. (required)
        :param PutOpenconfigSystemSystemMessagesDebugEntriesDebugServiceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_messages_debug_entries_debug_service_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/messages/debug-entries/debug-service={service}/config/enabled', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp  # noqa: E501

        OperationId: put_openconfig_system_system_ntp Top-level container for NTP configuration and state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp  # noqa: E501

        OperationId: put_openconfig_system_system_ntp Top-level container for NTP configuration and state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_config  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_config Configuration data for NTP client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_config_enable_ntp_auth(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_config_enable_ntp_auth  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_config_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_config_enable_ntp_auth(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpConfigEnableNtpAuth body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_config_enable_ntp_auth  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_config_enable_ntp_auth Enable or disable NTP authentication -- when enabled, the system will only use packets containing a trusted authentication key to synchronize the time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_config_enable_ntp_auth_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpConfigEnableNtpAuth body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_config_enable_ntp_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_config_enable_ntp_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/enable-ntp-auth', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_config_enabled(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_config_enabled(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_config_enabled_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_config_enabled  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_config_enabled Enables the NTP protocol and indicates that the system should attempt to synchronize the system clock with an NTP server from the servers defined in the 'ntp/server' list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_config_enabled_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/enabled', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_config_ntp_source_address(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_config_ntp_source_address  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_config_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_config_ntp_source_address(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpConfigNtpSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_config_ntp_source_address  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_config_ntp_source_address Source address to use on outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_config_ntp_source_address_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpConfigNtpSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_config_ntp_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_config_ntp_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/config/ntp-source-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_ntp_keys(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys Enclosing container for list of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpNtpKeys body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_ntp_keys_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_ntp_keys_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_ntp_keys_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys Enclosing container for list of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpNtpKeys body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_ntp_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_ntp_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_ntp_keys_ntp_key(self, key_id, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_ntp_key(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PutOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys_ntp_key  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys_ntp_key List of NTP authentication keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_ntp_key_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PutOpenconfigSystemSystemNtpNtpKeysNtpKey body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_ntp_keys_ntp_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `put_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_ntp_keys_ntp_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_ntp_keys_ntp_key_config(self, key_id, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys_ntp_key_config  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys_ntp_key_config Configuration data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PutOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys_ntp_key_config  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys_ntp_key_config Configuration data for NTP auth keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PutOpenconfigSystemSystemNtpNtpKeysNtpKeyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_ntp_keys_ntp_key_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `put_openconfig_system_system_ntp_ntp_keys_ntp_key_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_ntp_keys_ntp_key_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(self, key_id, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PutOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type Encryption type used for the NTP authentication key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PutOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config/key-type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value(self, key_id, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PutOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(self, key_id, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value NTP authentication key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value_with_http_info(key_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key_id: Reference to auth key-id list key (required)
        :param PutOpenconfigSystemSystemNtpNtpKeysNtpKeyConfigKeyValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_ntp_keys_ntp_key_config_key_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['key-id'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/ntp-keys/ntp-key={key-id}/config/key-value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_servers(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers Enclosing container for the list of NTP servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_servers_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_servers_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_servers_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers Enclosing container for the list of NTP servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemNtpServers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_servers_server(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_servers_server_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_servers_server_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_servers_server_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server List of NTP servers to use for system clock synchronization.  If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_servers_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_ntp_servers_server`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_servers_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_servers_server_config(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config Configuration data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_servers_server_config_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config Configuration data for an NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_servers_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_ntp_servers_server_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_servers_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_servers_server_config_association_type(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_association_type  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_association_type(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigAssociationType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_association_type  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_association_type The desired association type for this NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_association_type_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigAssociationType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_servers_server_config_association_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_ntp_servers_server_config_association_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_servers_server_config_association_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/association-type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_servers_server_config_iburst(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_iburst  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_iburst(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigIburst body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_iburst  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_iburst Indicates whether this server should enable burst synchronization or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_iburst_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigIburst body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_servers_server_config_iburst" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_ntp_servers_server_config_iburst`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_servers_server_config_iburst`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/iburst', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_servers_server_config_port(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_port(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_servers_server_config_port_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_port  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_port The port number of the NTP server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_port_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_servers_server_config_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_ntp_servers_server_config_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_servers_server_config_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_servers_server_config_prefer(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_prefer  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_prefer(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigPrefer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_prefer  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_prefer Indicates whether this server should be preferred or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_prefer_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigPrefer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_servers_server_config_prefer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_ntp_servers_server_config_prefer`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_servers_server_config_prefer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/prefer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ntp_servers_server_config_version(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_version  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_version(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigVersion body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ntp_servers_server_config_version_with_http_info(self, address, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ntp_servers_server_config_version  # noqa: E501

        OperationId: put_openconfig_system_system_ntp_servers_server_config_version Version number to put in outgoing NTP packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ntp_servers_server_config_version_with_http_info(address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: References the configured address or hostname of the NTP server. (required)
        :param PutOpenconfigSystemSystemNtpServersServerConfigVersion body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ntp_servers_server_config_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `put_openconfig_system_system_ntp_servers_server_config_version`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ntp_servers_server_config_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ntp/servers/server={address}/config/version', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_processes(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_processes  # noqa: E501

        OperationId: put_openconfig_system_system_processes Parameters related to all monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_processes(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemProcesses body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_processes_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_processes_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_processes_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_processes  # noqa: E501

        OperationId: put_openconfig_system_system_processes Parameters related to all monitored processes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_processes_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemProcesses body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_processes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_processes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/processes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ssh_server(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server Top-level container for ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ssh_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ssh_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ssh_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server Top-level container for ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ssh_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ssh_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ssh_server_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ssh_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ssh_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ssh_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config Configuration data for the system ssh server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ssh_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ssh_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ssh_server_config_enable(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ssh_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ssh_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ssh_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_enable  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_enable Enables the ssh server.  The ssh server is enabled by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ssh_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ssh_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/enable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ssh_server_config_protocol_version(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_protocol_version  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_protocol_version(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigProtocolVersion body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_protocol_version  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_protocol_version Set the protocol version for SSH connections to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_protocol_version_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigProtocolVersion body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ssh_server_config_protocol_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ssh_server_config_protocol_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/protocol-version', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ssh_server_config_rate_limit(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_rate_limit  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_rate_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigRateLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_rate_limit  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_rate_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigRateLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ssh_server_config_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ssh_server_config_rate_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/rate-limit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ssh_server_config_session_limit(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_session_limit  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_session_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigSessionLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ssh_server_config_session_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ssh_server_config_session_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ssh_server_config_session_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_session_limit  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_session_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigSessionLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ssh_server_config_session_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ssh_server_config_session_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/session-limit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_ssh_server_config_timeout(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_timeout  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_timeout(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_ssh_server_config_timeout_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_ssh_server_config_timeout_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_ssh_server_config_timeout_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_ssh_server_config_timeout  # noqa: E501

        OperationId: put_openconfig_system_system_ssh_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_ssh_server_config_timeout_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemSshServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_ssh_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_ssh_server_config_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/ssh-server/config/timeout', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_telnet_server(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server Top-level container for telnet terminal servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_telnet_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_telnet_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_telnet_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server Top-level container for telnet terminal servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_telnet_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_telnet_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_telnet_server_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_telnet_server_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_telnet_server_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_telnet_server_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config Configuration data for telnet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_telnet_server_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_telnet_server_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_telnet_server_config_enable(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_enable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_telnet_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_telnet_server_config_enable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_telnet_server_config_enable_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config_enable  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config_enable Enables the telnet server.  Telnet is disabled by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_enable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfigEnable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_telnet_server_config_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_telnet_server_config_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/enable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_telnet_server_config_rate_limit(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config_rate_limit  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_rate_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfigRateLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config_rate_limit  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config_rate_limit Set a limit on the number of connection attempts per minute to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_rate_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfigRateLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_telnet_server_config_rate_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_telnet_server_config_rate_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/rate-limit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_telnet_server_config_session_limit(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config_session_limit  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_session_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfigSessionLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_telnet_server_config_session_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_telnet_server_config_session_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_telnet_server_config_session_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config_session_limit  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config_session_limit Set a limit on the number of simultaneous active terminal sessions to the system for the protocol (e.g., ssh, telnet, ...)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_session_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfigSessionLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_telnet_server_config_session_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_telnet_server_config_session_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/session-limit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_system_system_telnet_server_config_timeout(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config_timeout  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_timeout(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_system_system_telnet_server_config_timeout_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_system_system_telnet_server_config_timeout_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_system_system_telnet_server_config_timeout_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_system_system_telnet_server_config_timeout  # noqa: E501

        OperationId: put_openconfig_system_system_telnet_server_config_timeout Set the idle timeout in seconds on terminal connections to the system for the protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_system_system_telnet_server_config_timeout_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSystemSystemTelnetServerConfigTimeout body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_system_system_telnet_server_config_timeout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_system_system_telnet_server_config_timeout`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-system:system/telnet-server/config/timeout', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
