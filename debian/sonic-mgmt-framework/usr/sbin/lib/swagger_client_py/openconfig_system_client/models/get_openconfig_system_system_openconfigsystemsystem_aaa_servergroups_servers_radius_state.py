# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_aaa_servergroups_servers_radius_state_counters import GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters  # noqa: F401,E501


class GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_port': 'int',
        'acct_port': 'int',
        'secret_key': 'str',
        'source_address': 'str',
        'retransmit_attempts': 'int',
        'counters': 'GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters'
    }

    attribute_map = {
        'auth_port': 'auth-port',
        'acct_port': 'acct-port',
        'secret_key': 'secret-key',
        'source_address': 'source-address',
        'retransmit_attempts': 'retransmit-attempts',
        'counters': 'counters'
    }

    def __init__(self, auth_port=None, acct_port=None, secret_key=None, source_address=None, retransmit_attempts=None, counters=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState - a model defined in Swagger"""  # noqa: E501

        self._auth_port = None
        self._acct_port = None
        self._secret_key = None
        self._source_address = None
        self._retransmit_attempts = None
        self._counters = None
        self.discriminator = None

        if auth_port is not None:
            self.auth_port = auth_port
        if acct_port is not None:
            self.acct_port = acct_port
        if secret_key is not None:
            self.secret_key = secret_key
        if source_address is not None:
            self.source_address = source_address
        if retransmit_attempts is not None:
            self.retransmit_attempts = retransmit_attempts
        if counters is not None:
            self.counters = counters

    @property
    def auth_port(self):
        """Gets the auth_port of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501


        :return: The auth_port of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :rtype: int
        """
        return self._auth_port

    @auth_port.setter
    def auth_port(self, auth_port):
        """Sets the auth_port of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.


        :param auth_port: The auth_port of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :type: int
        """

        self._auth_port = auth_port

    @property
    def acct_port(self):
        """Gets the acct_port of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501


        :return: The acct_port of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :rtype: int
        """
        return self._acct_port

    @acct_port.setter
    def acct_port(self, acct_port):
        """Sets the acct_port of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.


        :param acct_port: The acct_port of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :type: int
        """

        self._acct_port = acct_port

    @property
    def secret_key(self):
        """Gets the secret_key of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501


        :return: The secret_key of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.


        :param secret_key: The secret_key of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def source_address(self):
        """Gets the source_address of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501


        :return: The source_address of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.


        :param source_address: The source_address of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def retransmit_attempts(self):
        """Gets the retransmit_attempts of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501


        :return: The retransmit_attempts of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :rtype: int
        """
        return self._retransmit_attempts

    @retransmit_attempts.setter
    def retransmit_attempts(self, retransmit_attempts):
        """Sets the retransmit_attempts of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.


        :param retransmit_attempts: The retransmit_attempts of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :type: int
        """

        self._retransmit_attempts = retransmit_attempts

    @property
    def counters(self):
        """Gets the counters of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501


        :return: The counters of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.


        :param counters: The counters of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters
        """

        self._counters = counters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
