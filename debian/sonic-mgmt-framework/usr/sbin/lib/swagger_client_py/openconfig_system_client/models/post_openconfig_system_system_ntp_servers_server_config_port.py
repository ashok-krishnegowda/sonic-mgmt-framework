# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_system_client.models.openconfig_system_system_ntp_servers_server_config_association_type import OpenconfigSystemSystemNtpServersServerConfigAssociationType  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_ntp_servers_server_config_iburst import OpenconfigSystemSystemNtpServersServerConfigIburst  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_ntp_servers_server_config_port import OpenconfigSystemSystemNtpServersServerConfigPort  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_ntp_servers_server_config_prefer import OpenconfigSystemSystemNtpServersServerConfigPrefer  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_ntp_servers_server_config_version import OpenconfigSystemSystemNtpServersServerConfigVersion  # noqa: F401,E501


class PostOpenconfigSystemSystemNtpServersServerConfigPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_systemport': 'int',
        'openconfig_systemversion': 'int',
        'openconfig_systemassociation_type': 'str',
        'openconfig_systemiburst': 'bool',
        'openconfig_systemprefer': 'bool'
    }

    attribute_map = {
        'openconfig_systemport': 'openconfig-system:port',
        'openconfig_systemversion': 'openconfig-system:version',
        'openconfig_systemassociation_type': 'openconfig-system:association-type',
        'openconfig_systemiburst': 'openconfig-system:iburst',
        'openconfig_systemprefer': 'openconfig-system:prefer'
    }

    def __init__(self, openconfig_systemport=None, openconfig_systemversion=None, openconfig_systemassociation_type=None, openconfig_systemiburst=None, openconfig_systemprefer=None):  # noqa: E501
        """PostOpenconfigSystemSystemNtpServersServerConfigPort - a model defined in Swagger"""  # noqa: E501

        self._openconfig_systemport = None
        self._openconfig_systemversion = None
        self._openconfig_systemassociation_type = None
        self._openconfig_systemiburst = None
        self._openconfig_systemprefer = None
        self.discriminator = None

        if openconfig_systemport is not None:
            self.openconfig_systemport = openconfig_systemport
        if openconfig_systemversion is not None:
            self.openconfig_systemversion = openconfig_systemversion
        if openconfig_systemassociation_type is not None:
            self.openconfig_systemassociation_type = openconfig_systemassociation_type
        if openconfig_systemiburst is not None:
            self.openconfig_systemiburst = openconfig_systemiburst
        if openconfig_systemprefer is not None:
            self.openconfig_systemprefer = openconfig_systemprefer

    @property
    def openconfig_systemport(self):
        """Gets the openconfig_systemport of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501


        :return: The openconfig_systemport of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_systemport

    @openconfig_systemport.setter
    def openconfig_systemport(self, openconfig_systemport):
        """Sets the openconfig_systemport of this PostOpenconfigSystemSystemNtpServersServerConfigPort.


        :param openconfig_systemport: The openconfig_systemport of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :type: int
        """

        self._openconfig_systemport = openconfig_systemport

    @property
    def openconfig_systemversion(self):
        """Gets the openconfig_systemversion of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501


        :return: The openconfig_systemversion of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_systemversion

    @openconfig_systemversion.setter
    def openconfig_systemversion(self, openconfig_systemversion):
        """Sets the openconfig_systemversion of this PostOpenconfigSystemSystemNtpServersServerConfigPort.


        :param openconfig_systemversion: The openconfig_systemversion of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :type: int
        """

        self._openconfig_systemversion = openconfig_systemversion

    @property
    def openconfig_systemassociation_type(self):
        """Gets the openconfig_systemassociation_type of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501


        :return: The openconfig_systemassociation_type of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_systemassociation_type

    @openconfig_systemassociation_type.setter
    def openconfig_systemassociation_type(self, openconfig_systemassociation_type):
        """Sets the openconfig_systemassociation_type of this PostOpenconfigSystemSystemNtpServersServerConfigPort.


        :param openconfig_systemassociation_type: The openconfig_systemassociation_type of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVER", "PEER", "POOL"]  # noqa: E501
        if openconfig_systemassociation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `openconfig_systemassociation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(openconfig_systemassociation_type, allowed_values)
            )

        self._openconfig_systemassociation_type = openconfig_systemassociation_type

    @property
    def openconfig_systemiburst(self):
        """Gets the openconfig_systemiburst of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501


        :return: The openconfig_systemiburst of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_systemiburst

    @openconfig_systemiburst.setter
    def openconfig_systemiburst(self, openconfig_systemiburst):
        """Sets the openconfig_systemiburst of this PostOpenconfigSystemSystemNtpServersServerConfigPort.


        :param openconfig_systemiburst: The openconfig_systemiburst of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :type: bool
        """

        self._openconfig_systemiburst = openconfig_systemiburst

    @property
    def openconfig_systemprefer(self):
        """Gets the openconfig_systemprefer of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501


        :return: The openconfig_systemprefer of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_systemprefer

    @openconfig_systemprefer.setter
    def openconfig_systemprefer(self, openconfig_systemprefer):
        """Sets the openconfig_systemprefer of this PostOpenconfigSystemSystemNtpServersServerConfigPort.


        :param openconfig_systemprefer: The openconfig_systemprefer of this PostOpenconfigSystemSystemNtpServersServerConfigPort.  # noqa: E501
        :type: bool
        """

        self._openconfig_systemprefer = openconfig_systemprefer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOpenconfigSystemSystemNtpServersServerConfigPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOpenconfigSystemSystemNtpServersServerConfigPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
