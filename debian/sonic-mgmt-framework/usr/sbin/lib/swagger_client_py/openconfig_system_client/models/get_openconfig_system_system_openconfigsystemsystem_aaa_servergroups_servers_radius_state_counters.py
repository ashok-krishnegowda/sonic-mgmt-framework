# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'retried_access_requests': 'int',
        'access_accepts': 'int',
        'access_rejects': 'int',
        'timeout_access_requests': 'int'
    }

    attribute_map = {
        'retried_access_requests': 'retried-access-requests',
        'access_accepts': 'access-accepts',
        'access_rejects': 'access-rejects',
        'timeout_access_requests': 'timeout-access-requests'
    }

    def __init__(self, retried_access_requests=None, access_accepts=None, access_rejects=None, timeout_access_requests=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters - a model defined in Swagger"""  # noqa: E501

        self._retried_access_requests = None
        self._access_accepts = None
        self._access_rejects = None
        self._timeout_access_requests = None
        self.discriminator = None

        if retried_access_requests is not None:
            self.retried_access_requests = retried_access_requests
        if access_accepts is not None:
            self.access_accepts = access_accepts
        if access_rejects is not None:
            self.access_rejects = access_rejects
        if timeout_access_requests is not None:
            self.timeout_access_requests = timeout_access_requests

    @property
    def retried_access_requests(self):
        """Gets the retried_access_requests of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501


        :return: The retried_access_requests of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._retried_access_requests

    @retried_access_requests.setter
    def retried_access_requests(self, retried_access_requests):
        """Sets the retried_access_requests of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.


        :param retried_access_requests: The retried_access_requests of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501
        :type: int
        """

        self._retried_access_requests = retried_access_requests

    @property
    def access_accepts(self):
        """Gets the access_accepts of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501


        :return: The access_accepts of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._access_accepts

    @access_accepts.setter
    def access_accepts(self, access_accepts):
        """Sets the access_accepts of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.


        :param access_accepts: The access_accepts of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501
        :type: int
        """

        self._access_accepts = access_accepts

    @property
    def access_rejects(self):
        """Gets the access_rejects of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501


        :return: The access_rejects of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._access_rejects

    @access_rejects.setter
    def access_rejects(self, access_rejects):
        """Sets the access_rejects of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.


        :param access_rejects: The access_rejects of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501
        :type: int
        """

        self._access_rejects = access_rejects

    @property
    def timeout_access_requests(self):
        """Gets the timeout_access_requests of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501


        :return: The timeout_access_requests of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._timeout_access_requests

    @timeout_access_requests.setter
    def timeout_access_requests(self, timeout_access_requests):
        """Sets the timeout_access_requests of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.


        :param timeout_access_requests: The timeout_access_requests of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters.  # noqa: E501
        :type: int
        """

        self._timeout_access_requests = timeout_access_requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadiusStateCounters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
