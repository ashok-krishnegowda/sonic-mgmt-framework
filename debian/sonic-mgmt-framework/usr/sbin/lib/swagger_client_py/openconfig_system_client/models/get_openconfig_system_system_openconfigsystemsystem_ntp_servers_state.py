# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'port': 'int',
        'version': 'int',
        'association_type': 'str',
        'iburst': 'bool',
        'prefer': 'bool',
        'stratum': 'int',
        'root_delay': 'int',
        'root_dispersion': 'int',
        'offset': 'int',
        'poll_interval': 'int'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'version': 'version',
        'association_type': 'association-type',
        'iburst': 'iburst',
        'prefer': 'prefer',
        'stratum': 'stratum',
        'root_delay': 'root-delay',
        'root_dispersion': 'root-dispersion',
        'offset': 'offset',
        'poll_interval': 'poll-interval'
    }

    def __init__(self, address=None, port=None, version=None, association_type=None, iburst=None, prefer=None, stratum=None, root_delay=None, root_dispersion=None, offset=None, poll_interval=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._port = None
        self._version = None
        self._association_type = None
        self._iburst = None
        self._prefer = None
        self._stratum = None
        self._root_delay = None
        self._root_dispersion = None
        self._offset = None
        self._poll_interval = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if port is not None:
            self.port = port
        if version is not None:
            self.version = version
        if association_type is not None:
            self.association_type = association_type
        if iburst is not None:
            self.iburst = iburst
        if prefer is not None:
            self.prefer = prefer
        if stratum is not None:
            self.stratum = stratum
        if root_delay is not None:
            self.root_delay = root_delay
        if root_dispersion is not None:
            self.root_dispersion = root_dispersion
        if offset is not None:
            self.offset = offset
        if poll_interval is not None:
            self.poll_interval = poll_interval

    @property
    def address(self):
        """Gets the address of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The address of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param address: The address of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def port(self):
        """Gets the port of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The port of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param port: The port of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def version(self):
        """Gets the version of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The version of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param version: The version of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def association_type(self):
        """Gets the association_type of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The association_type of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: str
        """
        return self._association_type

    @association_type.setter
    def association_type(self, association_type):
        """Sets the association_type of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param association_type: The association_type of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVER", "PEER", "POOL"]  # noqa: E501
        if association_type not in allowed_values:
            raise ValueError(
                "Invalid value for `association_type` ({0}), must be one of {1}"  # noqa: E501
                .format(association_type, allowed_values)
            )

        self._association_type = association_type

    @property
    def iburst(self):
        """Gets the iburst of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The iburst of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: bool
        """
        return self._iburst

    @iburst.setter
    def iburst(self, iburst):
        """Sets the iburst of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param iburst: The iburst of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: bool
        """

        self._iburst = iburst

    @property
    def prefer(self):
        """Gets the prefer of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The prefer of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: bool
        """
        return self._prefer

    @prefer.setter
    def prefer(self, prefer):
        """Sets the prefer of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param prefer: The prefer of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: bool
        """

        self._prefer = prefer

    @property
    def stratum(self):
        """Gets the stratum of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The stratum of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: int
        """
        return self._stratum

    @stratum.setter
    def stratum(self, stratum):
        """Sets the stratum of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param stratum: The stratum of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: int
        """

        self._stratum = stratum

    @property
    def root_delay(self):
        """Gets the root_delay of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The root_delay of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: int
        """
        return self._root_delay

    @root_delay.setter
    def root_delay(self, root_delay):
        """Sets the root_delay of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param root_delay: The root_delay of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: int
        """

        self._root_delay = root_delay

    @property
    def root_dispersion(self):
        """Gets the root_dispersion of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The root_dispersion of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: int
        """
        return self._root_dispersion

    @root_dispersion.setter
    def root_dispersion(self, root_dispersion):
        """Sets the root_dispersion of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param root_dispersion: The root_dispersion of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: int
        """

        self._root_dispersion = root_dispersion

    @property
    def offset(self):
        """Gets the offset of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The offset of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param offset: The offset of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def poll_interval(self):
        """Gets the poll_interval of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501


        :return: The poll_interval of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :rtype: int
        """
        return self._poll_interval

    @poll_interval.setter
    def poll_interval(self, poll_interval):
        """Sets the poll_interval of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.


        :param poll_interval: The poll_interval of this GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState.  # noqa: E501
        :type: int
        """

        self._poll_interval = poll_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystemNtpServersState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
