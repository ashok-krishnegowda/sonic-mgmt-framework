# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'resource': 'str',
        'text': 'str',
        'time_created': 'int',
        'severity': 'str',
        'type_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'resource': 'resource',
        'text': 'text',
        'time_created': 'time-created',
        'severity': 'severity',
        'type_id': 'type-id'
    }

    def __init__(self, id=None, resource=None, text=None, time_created=None, severity=None, type_id=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._resource = None
        self._text = None
        self._time_created = None
        self._severity = None
        self._type_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if resource is not None:
            self.resource = resource
        if text is not None:
            self.text = text
        if time_created is not None:
            self.time_created = time_created
        if severity is not None:
            self.severity = severity
        if type_id is not None:
            self.type_id = type_id

    @property
    def id(self):
        """Gets the id of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501


        :return: The id of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.


        :param id: The id of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource(self):
        """Gets the resource of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501


        :return: The resource of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.


        :param resource: The resource of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def text(self):
        """Gets the text of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501


        :return: The text of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.


        :param text: The text of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def time_created(self):
        """Gets the time_created of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501


        :return: The time_created of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :rtype: int
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.


        :param time_created: The time_created of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :type: int
        """

        self._time_created = time_created

    @property
    def severity(self):
        """Gets the severity of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501


        :return: The severity of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.


        :param severity: The severity of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def type_id(self):
        """Gets the type_id of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501


        :return: The type_id of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.


        :param type_id: The type_id of this GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystemAlarmsState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
