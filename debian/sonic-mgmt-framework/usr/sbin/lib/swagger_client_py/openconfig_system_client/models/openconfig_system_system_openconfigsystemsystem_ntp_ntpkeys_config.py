# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_id': 'int',
        'key_type': 'str',
        'key_value': 'str'
    }

    attribute_map = {
        'key_id': 'key-id',
        'key_type': 'key-type',
        'key_value': 'key-value'
    }

    def __init__(self, key_id=None, key_type=None, key_value=None):  # noqa: E501
        """OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig - a model defined in Swagger"""  # noqa: E501

        self._key_id = None
        self._key_type = None
        self._key_value = None
        self.discriminator = None

        if key_id is not None:
            self.key_id = key_id
        if key_type is not None:
            self.key_type = key_type
        if key_value is not None:
            self.key_value = key_value

    @property
    def key_id(self):
        """Gets the key_id of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501


        :return: The key_id of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501
        :rtype: int
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.


        :param key_id: The key_id of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501
        :type: int
        """

        self._key_id = key_id

    @property
    def key_type(self):
        """Gets the key_type of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501


        :return: The key_type of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.


        :param key_type: The key_type of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501
        :type: str
        """

        self._key_type = key_type

    @property
    def key_value(self):
        """Gets the key_value of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501


        :return: The key_value of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.


        :param key_value: The key_value of this OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig.  # noqa: E501
        :type: str
        """

        self._key_value = key_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigSystemSystemOpenconfigsystemsystemNtpNtpkeysConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
