# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msg': 'str',
        'priority': 'int',
        'app_name': 'str',
        'procid': 'str',
        'msgid': 'str'
    }

    attribute_map = {
        'msg': 'msg',
        'priority': 'priority',
        'app_name': 'app-name',
        'procid': 'procid',
        'msgid': 'msgid'
    }

    def __init__(self, msg=None, priority=None, app_name=None, procid=None, msgid=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage - a model defined in Swagger"""  # noqa: E501

        self._msg = None
        self._priority = None
        self._app_name = None
        self._procid = None
        self._msgid = None
        self.discriminator = None

        if msg is not None:
            self.msg = msg
        if priority is not None:
            self.priority = priority
        if app_name is not None:
            self.app_name = app_name
        if procid is not None:
            self.procid = procid
        if msgid is not None:
            self.msgid = msgid

    @property
    def msg(self):
        """Gets the msg of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501


        :return: The msg of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.


        :param msg: The msg of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :type: str
        """

        self._msg = msg

    @property
    def priority(self):
        """Gets the priority of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501


        :return: The priority of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.


        :param priority: The priority of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def app_name(self):
        """Gets the app_name of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501


        :return: The app_name of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.


        :param app_name: The app_name of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def procid(self):
        """Gets the procid of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501


        :return: The procid of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :rtype: str
        """
        return self._procid

    @procid.setter
    def procid(self, procid):
        """Sets the procid of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.


        :param procid: The procid of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :type: str
        """

        self._procid = procid

    @property
    def msgid(self):
        """Gets the msgid of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501


        :return: The msgid of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :rtype: str
        """
        return self._msgid

    @msgid.setter
    def msgid(self, msgid):
        """Sets the msgid of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.


        :param msgid: The msgid of this GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage.  # noqa: E501
        :type: str
        """

        self._msgid = msgid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystemMessagesStateMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
