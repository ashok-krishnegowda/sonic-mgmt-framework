# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_system_client.models.openconfig_system_system_grpc_server_config_certificate_id import OpenconfigSystemSystemGrpcServerConfigCertificateId  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_grpc_server_config_enable import OpenconfigSystemSystemGrpcServerConfigEnable  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_grpc_server_config_listen_addresses import OpenconfigSystemSystemGrpcServerConfigListenAddresses  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_grpc_server_config_port import OpenconfigSystemSystemGrpcServerConfigPort  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_grpc_server_config_transport_security import OpenconfigSystemSystemGrpcServerConfigTransportSecurity  # noqa: F401,E501


class PostOpenconfigSystemSystemGrpcServerConfigEnable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_systemenable': 'bool',
        'openconfig_systemport': 'int',
        'openconfig_systemtransport_security': 'bool',
        'openconfig_systemcertificate_id': 'str',
        'openconfig_systemlisten_addresses': 'list[str]'
    }

    attribute_map = {
        'openconfig_systemenable': 'openconfig-system:enable',
        'openconfig_systemport': 'openconfig-system:port',
        'openconfig_systemtransport_security': 'openconfig-system:transport-security',
        'openconfig_systemcertificate_id': 'openconfig-system:certificate-id',
        'openconfig_systemlisten_addresses': 'openconfig-system:listen-addresses'
    }

    def __init__(self, openconfig_systemenable=None, openconfig_systemport=None, openconfig_systemtransport_security=None, openconfig_systemcertificate_id=None, openconfig_systemlisten_addresses=None):  # noqa: E501
        """PostOpenconfigSystemSystemGrpcServerConfigEnable - a model defined in Swagger"""  # noqa: E501

        self._openconfig_systemenable = None
        self._openconfig_systemport = None
        self._openconfig_systemtransport_security = None
        self._openconfig_systemcertificate_id = None
        self._openconfig_systemlisten_addresses = None
        self.discriminator = None

        if openconfig_systemenable is not None:
            self.openconfig_systemenable = openconfig_systemenable
        if openconfig_systemport is not None:
            self.openconfig_systemport = openconfig_systemport
        if openconfig_systemtransport_security is not None:
            self.openconfig_systemtransport_security = openconfig_systemtransport_security
        if openconfig_systemcertificate_id is not None:
            self.openconfig_systemcertificate_id = openconfig_systemcertificate_id
        if openconfig_systemlisten_addresses is not None:
            self.openconfig_systemlisten_addresses = openconfig_systemlisten_addresses

    @property
    def openconfig_systemenable(self):
        """Gets the openconfig_systemenable of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501


        :return: The openconfig_systemenable of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_systemenable

    @openconfig_systemenable.setter
    def openconfig_systemenable(self, openconfig_systemenable):
        """Sets the openconfig_systemenable of this PostOpenconfigSystemSystemGrpcServerConfigEnable.


        :param openconfig_systemenable: The openconfig_systemenable of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :type: bool
        """

        self._openconfig_systemenable = openconfig_systemenable

    @property
    def openconfig_systemport(self):
        """Gets the openconfig_systemport of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501


        :return: The openconfig_systemport of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_systemport

    @openconfig_systemport.setter
    def openconfig_systemport(self, openconfig_systemport):
        """Sets the openconfig_systemport of this PostOpenconfigSystemSystemGrpcServerConfigEnable.


        :param openconfig_systemport: The openconfig_systemport of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :type: int
        """

        self._openconfig_systemport = openconfig_systemport

    @property
    def openconfig_systemtransport_security(self):
        """Gets the openconfig_systemtransport_security of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501


        :return: The openconfig_systemtransport_security of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_systemtransport_security

    @openconfig_systemtransport_security.setter
    def openconfig_systemtransport_security(self, openconfig_systemtransport_security):
        """Sets the openconfig_systemtransport_security of this PostOpenconfigSystemSystemGrpcServerConfigEnable.


        :param openconfig_systemtransport_security: The openconfig_systemtransport_security of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :type: bool
        """

        self._openconfig_systemtransport_security = openconfig_systemtransport_security

    @property
    def openconfig_systemcertificate_id(self):
        """Gets the openconfig_systemcertificate_id of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501


        :return: The openconfig_systemcertificate_id of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_systemcertificate_id

    @openconfig_systemcertificate_id.setter
    def openconfig_systemcertificate_id(self, openconfig_systemcertificate_id):
        """Sets the openconfig_systemcertificate_id of this PostOpenconfigSystemSystemGrpcServerConfigEnable.


        :param openconfig_systemcertificate_id: The openconfig_systemcertificate_id of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :type: str
        """

        self._openconfig_systemcertificate_id = openconfig_systemcertificate_id

    @property
    def openconfig_systemlisten_addresses(self):
        """Gets the openconfig_systemlisten_addresses of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501


        :return: The openconfig_systemlisten_addresses of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :rtype: list[str]
        """
        return self._openconfig_systemlisten_addresses

    @openconfig_systemlisten_addresses.setter
    def openconfig_systemlisten_addresses(self, openconfig_systemlisten_addresses):
        """Sets the openconfig_systemlisten_addresses of this PostOpenconfigSystemSystemGrpcServerConfigEnable.


        :param openconfig_systemlisten_addresses: The openconfig_systemlisten_addresses of this PostOpenconfigSystemSystemGrpcServerConfigEnable.  # noqa: E501
        :type: list[str]
        """

        self._openconfig_systemlisten_addresses = openconfig_systemlisten_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOpenconfigSystemSystemGrpcServerConfigEnable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOpenconfigSystemSystemGrpcServerConfigEnable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
