# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_aaa_servergroups_servers_radius import GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadius  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_aaa_servergroups_servers_state import GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersState  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_aaa_servergroups_servers_tacacs import GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersTacacs  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_openconfigsystemsystem_aaa_servergroups_servers_config import OpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersConfig  # noqa: F401,E501


class GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'config': 'OpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersConfig',
        'state': 'GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersState',
        'tacacs': 'GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersTacacs',
        'radius': 'GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadius'
    }

    attribute_map = {
        'address': 'address',
        'config': 'config',
        'state': 'state',
        'tacacs': 'tacacs',
        'radius': 'radius'
    }

    def __init__(self, address=None, config=None, state=None, tacacs=None, radius=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._config = None
        self._state = None
        self._tacacs = None
        self._radius = None
        self.discriminator = None

        self.address = address
        if config is not None:
            self.config = config
        if state is not None:
            self.state = state
        if tacacs is not None:
            self.tacacs = tacacs
        if radius is not None:
            self.radius = radius

    @property
    def address(self):
        """Gets the address of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501


        :return: The address of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.


        :param address: The address of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def config(self):
        """Gets the config of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501


        :return: The config of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :rtype: OpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.


        :param config: The config of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :type: OpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersConfig
        """

        self._config = config

    @property
    def state(self):
        """Gets the state of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501


        :return: The state of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.


        :param state: The state of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersState
        """

        self._state = state

    @property
    def tacacs(self):
        """Gets the tacacs of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501


        :return: The tacacs of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersTacacs
        """
        return self._tacacs

    @tacacs.setter
    def tacacs(self, tacacs):
        """Sets the tacacs of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.


        :param tacacs: The tacacs of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersTacacs
        """

        self._tacacs = tacacs

    @property
    def radius(self):
        """Gets the radius of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501


        :return: The radius of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadius
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.


        :param radius: The radius of this GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersRadius
        """

        self._radius = radius

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystemAaaServergroupsServersServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
