# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_aaa import GetOpenconfigSystemSystemOpenconfigsystemsystemAaa  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_alarms import GetOpenconfigSystemSystemOpenconfigsystemsystemAlarms  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_clock import GetOpenconfigSystemSystemOpenconfigsystemsystemClock  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_cpus import GetOpenconfigSystemSystemOpenconfigsystemsystemCpus  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_dns import GetOpenconfigSystemSystemOpenconfigsystemsystemDns  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_grpcserver import GetOpenconfigSystemSystemOpenconfigsystemsystemGrpcserver  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_logging import GetOpenconfigSystemSystemOpenconfigsystemsystemLogging  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_memory import GetOpenconfigSystemSystemOpenconfigsystemsystemMemory  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_messages import GetOpenconfigSystemSystemOpenconfigsystemsystemMessages  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_ntp import GetOpenconfigSystemSystemOpenconfigsystemsystemNtp  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_processes import GetOpenconfigSystemSystemOpenconfigsystemsystemProcesses  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_sshserver import GetOpenconfigSystemSystemOpenconfigsystemsystemSshserver  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_state import GetOpenconfigSystemSystemOpenconfigsystemsystemState  # noqa: F401,E501
from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_telnetserver import GetOpenconfigSystemSystemOpenconfigsystemsystemTelnetserver  # noqa: F401,E501
from openconfig_system_client.models.openconfig_system_system_openconfigsystemsystem_config import OpenconfigSystemSystemOpenconfigsystemsystemConfig  # noqa: F401,E501


class GetOpenconfigSystemSystemOpenconfigsystemsystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'OpenconfigSystemSystemOpenconfigsystemsystemConfig',
        'state': 'GetOpenconfigSystemSystemOpenconfigsystemsystemState',
        'clock': 'GetOpenconfigSystemSystemOpenconfigsystemsystemClock',
        'dns': 'GetOpenconfigSystemSystemOpenconfigsystemsystemDns',
        'ntp': 'GetOpenconfigSystemSystemOpenconfigsystemsystemNtp',
        'grpc_server': 'GetOpenconfigSystemSystemOpenconfigsystemsystemGrpcserver',
        'ssh_server': 'GetOpenconfigSystemSystemOpenconfigsystemsystemSshserver',
        'telnet_server': 'GetOpenconfigSystemSystemOpenconfigsystemsystemTelnetserver',
        'logging': 'GetOpenconfigSystemSystemOpenconfigsystemsystemLogging',
        'aaa': 'GetOpenconfigSystemSystemOpenconfigsystemsystemAaa',
        'memory': 'GetOpenconfigSystemSystemOpenconfigsystemsystemMemory',
        'cpus': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpus',
        'processes': 'GetOpenconfigSystemSystemOpenconfigsystemsystemProcesses',
        'alarms': 'GetOpenconfigSystemSystemOpenconfigsystemsystemAlarms',
        'messages': 'GetOpenconfigSystemSystemOpenconfigsystemsystemMessages'
    }

    attribute_map = {
        'config': 'config',
        'state': 'state',
        'clock': 'clock',
        'dns': 'dns',
        'ntp': 'ntp',
        'grpc_server': 'grpc-server',
        'ssh_server': 'ssh-server',
        'telnet_server': 'telnet-server',
        'logging': 'logging',
        'aaa': 'aaa',
        'memory': 'memory',
        'cpus': 'cpus',
        'processes': 'processes',
        'alarms': 'alarms',
        'messages': 'messages'
    }

    def __init__(self, config=None, state=None, clock=None, dns=None, ntp=None, grpc_server=None, ssh_server=None, telnet_server=None, logging=None, aaa=None, memory=None, cpus=None, processes=None, alarms=None, messages=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystem - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._state = None
        self._clock = None
        self._dns = None
        self._ntp = None
        self._grpc_server = None
        self._ssh_server = None
        self._telnet_server = None
        self._logging = None
        self._aaa = None
        self._memory = None
        self._cpus = None
        self._processes = None
        self._alarms = None
        self._messages = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if state is not None:
            self.state = state
        if clock is not None:
            self.clock = clock
        if dns is not None:
            self.dns = dns
        if ntp is not None:
            self.ntp = ntp
        if grpc_server is not None:
            self.grpc_server = grpc_server
        if ssh_server is not None:
            self.ssh_server = ssh_server
        if telnet_server is not None:
            self.telnet_server = telnet_server
        if logging is not None:
            self.logging = logging
        if aaa is not None:
            self.aaa = aaa
        if memory is not None:
            self.memory = memory
        if cpus is not None:
            self.cpus = cpus
        if processes is not None:
            self.processes = processes
        if alarms is not None:
            self.alarms = alarms
        if messages is not None:
            self.messages = messages

    @property
    def config(self):
        """Gets the config of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The config of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: OpenconfigSystemSystemOpenconfigsystemsystemConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param config: The config of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: OpenconfigSystemSystemOpenconfigsystemsystemConfig
        """

        self._config = config

    @property
    def state(self):
        """Gets the state of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The state of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param state: The state of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemState
        """

        self._state = state

    @property
    def clock(self):
        """Gets the clock of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The clock of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemClock
        """
        return self._clock

    @clock.setter
    def clock(self, clock):
        """Sets the clock of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param clock: The clock of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemClock
        """

        self._clock = clock

    @property
    def dns(self):
        """Gets the dns of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The dns of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemDns
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param dns: The dns of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemDns
        """

        self._dns = dns

    @property
    def ntp(self):
        """Gets the ntp of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The ntp of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemNtp
        """
        return self._ntp

    @ntp.setter
    def ntp(self, ntp):
        """Sets the ntp of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param ntp: The ntp of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemNtp
        """

        self._ntp = ntp

    @property
    def grpc_server(self):
        """Gets the grpc_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The grpc_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemGrpcserver
        """
        return self._grpc_server

    @grpc_server.setter
    def grpc_server(self, grpc_server):
        """Sets the grpc_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param grpc_server: The grpc_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemGrpcserver
        """

        self._grpc_server = grpc_server

    @property
    def ssh_server(self):
        """Gets the ssh_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The ssh_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemSshserver
        """
        return self._ssh_server

    @ssh_server.setter
    def ssh_server(self, ssh_server):
        """Sets the ssh_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param ssh_server: The ssh_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemSshserver
        """

        self._ssh_server = ssh_server

    @property
    def telnet_server(self):
        """Gets the telnet_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The telnet_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemTelnetserver
        """
        return self._telnet_server

    @telnet_server.setter
    def telnet_server(self, telnet_server):
        """Sets the telnet_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param telnet_server: The telnet_server of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemTelnetserver
        """

        self._telnet_server = telnet_server

    @property
    def logging(self):
        """Gets the logging of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The logging of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param logging: The logging of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemLogging
        """

        self._logging = logging

    @property
    def aaa(self):
        """Gets the aaa of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The aaa of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemAaa
        """
        return self._aaa

    @aaa.setter
    def aaa(self, aaa):
        """Sets the aaa of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param aaa: The aaa of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemAaa
        """

        self._aaa = aaa

    @property
    def memory(self):
        """Gets the memory of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The memory of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemMemory
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param memory: The memory of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemMemory
        """

        self._memory = memory

    @property
    def cpus(self):
        """Gets the cpus of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The cpus of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpus
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param cpus: The cpus of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpus
        """

        self._cpus = cpus

    @property
    def processes(self):
        """Gets the processes of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The processes of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemProcesses
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param processes: The processes of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemProcesses
        """

        self._processes = processes

    @property
    def alarms(self):
        """Gets the alarms of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The alarms of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemAlarms
        """
        return self._alarms

    @alarms.setter
    def alarms(self, alarms):
        """Sets the alarms of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param alarms: The alarms of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemAlarms
        """

        self._alarms = alarms

    @property
    def messages(self):
        """Gets the messages of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501


        :return: The messages of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemMessages
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this GetOpenconfigSystemSystemOpenconfigsystemsystem.


        :param messages: The messages of this GetOpenconfigSystemSystemOpenconfigsystemsystem.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemMessages
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
