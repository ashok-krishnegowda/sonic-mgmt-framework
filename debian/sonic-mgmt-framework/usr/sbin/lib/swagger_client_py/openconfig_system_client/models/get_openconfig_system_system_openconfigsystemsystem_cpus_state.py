# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_system_client.models.get_openconfig_system_system_openconfigsystemsystem_cpus_state_total import GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal  # noqa: F401,E501


class GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'str',
        'total': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal',
        'user': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal',
        'kernel': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal',
        'nice': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal',
        'idle': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal',
        'wait': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal',
        'hardware_interrupt': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal',
        'software_interrupt': 'GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal'
    }

    attribute_map = {
        'index': 'index',
        'total': 'total',
        'user': 'user',
        'kernel': 'kernel',
        'nice': 'nice',
        'idle': 'idle',
        'wait': 'wait',
        'hardware_interrupt': 'hardware-interrupt',
        'software_interrupt': 'software-interrupt'
    }

    def __init__(self, index=None, total=None, user=None, kernel=None, nice=None, idle=None, wait=None, hardware_interrupt=None, software_interrupt=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState - a model defined in Swagger"""  # noqa: E501

        self._index = None
        self._total = None
        self._user = None
        self._kernel = None
        self._nice = None
        self._idle = None
        self._wait = None
        self._hardware_interrupt = None
        self._software_interrupt = None
        self.discriminator = None

        if index is not None:
            self.index = index
        if total is not None:
            self.total = total
        if user is not None:
            self.user = user
        if kernel is not None:
            self.kernel = kernel
        if nice is not None:
            self.nice = nice
        if idle is not None:
            self.idle = idle
        if wait is not None:
            self.wait = wait
        if hardware_interrupt is not None:
            self.hardware_interrupt = hardware_interrupt
        if software_interrupt is not None:
            self.software_interrupt = software_interrupt

    @property
    def index(self):
        """Gets the index of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The index of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param index: The index of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def total(self):
        """Gets the total of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The total of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param total: The total of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """

        self._total = total

    @property
    def user(self):
        """Gets the user of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The user of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param user: The user of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """

        self._user = user

    @property
    def kernel(self):
        """Gets the kernel of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The kernel of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """
        return self._kernel

    @kernel.setter
    def kernel(self, kernel):
        """Sets the kernel of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param kernel: The kernel of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """

        self._kernel = kernel

    @property
    def nice(self):
        """Gets the nice of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The nice of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """
        return self._nice

    @nice.setter
    def nice(self, nice):
        """Sets the nice of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param nice: The nice of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """

        self._nice = nice

    @property
    def idle(self):
        """Gets the idle of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The idle of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """
        return self._idle

    @idle.setter
    def idle(self, idle):
        """Sets the idle of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param idle: The idle of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """

        self._idle = idle

    @property
    def wait(self):
        """Gets the wait of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The wait of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param wait: The wait of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """

        self._wait = wait

    @property
    def hardware_interrupt(self):
        """Gets the hardware_interrupt of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The hardware_interrupt of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """
        return self._hardware_interrupt

    @hardware_interrupt.setter
    def hardware_interrupt(self, hardware_interrupt):
        """Sets the hardware_interrupt of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param hardware_interrupt: The hardware_interrupt of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """

        self._hardware_interrupt = hardware_interrupt

    @property
    def software_interrupt(self):
        """Gets the software_interrupt of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501


        :return: The software_interrupt of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :rtype: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """
        return self._software_interrupt

    @software_interrupt.setter
    def software_interrupt(self, software_interrupt):
        """Sets the software_interrupt of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.


        :param software_interrupt: The software_interrupt of this GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState.  # noqa: E501
        :type: GetOpenconfigSystemSystemOpenconfigsystemsystemCpusStateTotal
        """

        self._software_interrupt = software_interrupt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystemCpusState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
