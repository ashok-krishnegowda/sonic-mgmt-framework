# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pid': 'int',
        'name': 'str',
        'args': 'list[str]',
        'start_time': 'int',
        'uptime': 'int',
        'cpu_usage_user': 'int',
        'cpu_usage_system': 'int',
        'cpu_utilization': 'int',
        'memory_usage': 'int',
        'memory_utilization': 'int'
    }

    attribute_map = {
        'pid': 'pid',
        'name': 'name',
        'args': 'args',
        'start_time': 'start-time',
        'uptime': 'uptime',
        'cpu_usage_user': 'cpu-usage-user',
        'cpu_usage_system': 'cpu-usage-system',
        'cpu_utilization': 'cpu-utilization',
        'memory_usage': 'memory-usage',
        'memory_utilization': 'memory-utilization'
    }

    def __init__(self, pid=None, name=None, args=None, start_time=None, uptime=None, cpu_usage_user=None, cpu_usage_system=None, cpu_utilization=None, memory_usage=None, memory_utilization=None):  # noqa: E501
        """GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState - a model defined in Swagger"""  # noqa: E501

        self._pid = None
        self._name = None
        self._args = None
        self._start_time = None
        self._uptime = None
        self._cpu_usage_user = None
        self._cpu_usage_system = None
        self._cpu_utilization = None
        self._memory_usage = None
        self._memory_utilization = None
        self.discriminator = None

        if pid is not None:
            self.pid = pid
        if name is not None:
            self.name = name
        if args is not None:
            self.args = args
        if start_time is not None:
            self.start_time = start_time
        if uptime is not None:
            self.uptime = uptime
        if cpu_usage_user is not None:
            self.cpu_usage_user = cpu_usage_user
        if cpu_usage_system is not None:
            self.cpu_usage_system = cpu_usage_system
        if cpu_utilization is not None:
            self.cpu_utilization = cpu_utilization
        if memory_usage is not None:
            self.memory_usage = memory_usage
        if memory_utilization is not None:
            self.memory_utilization = memory_utilization

    @property
    def pid(self):
        """Gets the pid of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The pid of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param pid: The pid of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def name(self):
        """Gets the name of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The name of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param name: The name of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def args(self):
        """Gets the args of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The args of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param args: The args of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: list[str]
        """

        self._args = args

    @property
    def start_time(self):
        """Gets the start_time of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The start_time of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param start_time: The start_time of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def uptime(self):
        """Gets the uptime of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The uptime of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param uptime: The uptime of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: int
        """

        self._uptime = uptime

    @property
    def cpu_usage_user(self):
        """Gets the cpu_usage_user of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The cpu_usage_user of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage_user

    @cpu_usage_user.setter
    def cpu_usage_user(self, cpu_usage_user):
        """Sets the cpu_usage_user of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param cpu_usage_user: The cpu_usage_user of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: int
        """

        self._cpu_usage_user = cpu_usage_user

    @property
    def cpu_usage_system(self):
        """Gets the cpu_usage_system of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The cpu_usage_system of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage_system

    @cpu_usage_system.setter
    def cpu_usage_system(self, cpu_usage_system):
        """Sets the cpu_usage_system of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param cpu_usage_system: The cpu_usage_system of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: int
        """

        self._cpu_usage_system = cpu_usage_system

    @property
    def cpu_utilization(self):
        """Gets the cpu_utilization of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The cpu_utilization of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: int
        """
        return self._cpu_utilization

    @cpu_utilization.setter
    def cpu_utilization(self, cpu_utilization):
        """Sets the cpu_utilization of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param cpu_utilization: The cpu_utilization of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: int
        """

        self._cpu_utilization = cpu_utilization

    @property
    def memory_usage(self):
        """Gets the memory_usage of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The memory_usage of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: int
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param memory_usage: The memory_usage of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: int
        """

        self._memory_usage = memory_usage

    @property
    def memory_utilization(self):
        """Gets the memory_utilization of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501


        :return: The memory_utilization of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :rtype: int
        """
        return self._memory_utilization

    @memory_utilization.setter
    def memory_utilization(self, memory_utilization):
        """Sets the memory_utilization of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.


        :param memory_utilization: The memory_utilization of this GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState.  # noqa: E501
        :type: int
        """

        self._memory_utilization = memory_utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSystemSystemOpenconfigsystemsystemProcessesState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
