# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'port': 'int',
        'transport_security': 'bool',
        'certificate_id': 'str',
        'listen_addresses': 'list[str]'
    }

    attribute_map = {
        'enable': 'enable',
        'port': 'port',
        'transport_security': 'transport-security',
        'certificate_id': 'certificate-id',
        'listen_addresses': 'listen-addresses'
    }

    def __init__(self, enable=None, port=None, transport_security=None, certificate_id=None, listen_addresses=None):  # noqa: E501
        """OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig - a model defined in Swagger"""  # noqa: E501

        self._enable = None
        self._port = None
        self._transport_security = None
        self._certificate_id = None
        self._listen_addresses = None
        self.discriminator = None

        if enable is not None:
            self.enable = enable
        if port is not None:
            self.port = port
        if transport_security is not None:
            self.transport_security = transport_security
        if certificate_id is not None:
            self.certificate_id = certificate_id
        if listen_addresses is not None:
            self.listen_addresses = listen_addresses

    @property
    def enable(self):
        """Gets the enable of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501


        :return: The enable of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.


        :param enable: The enable of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def port(self):
        """Gets the port of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501


        :return: The port of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.


        :param port: The port of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def transport_security(self):
        """Gets the transport_security of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501


        :return: The transport_security of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :rtype: bool
        """
        return self._transport_security

    @transport_security.setter
    def transport_security(self, transport_security):
        """Sets the transport_security of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.


        :param transport_security: The transport_security of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :type: bool
        """

        self._transport_security = transport_security

    @property
    def certificate_id(self):
        """Gets the certificate_id of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501


        :return: The certificate_id of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.


        :param certificate_id: The certificate_id of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :type: str
        """

        self._certificate_id = certificate_id

    @property
    def listen_addresses(self):
        """Gets the listen_addresses of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501


        :return: The listen_addresses of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._listen_addresses

    @listen_addresses.setter
    def listen_addresses(self, listen_addresses):
        """Sets the listen_addresses of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.


        :param listen_addresses: The listen_addresses of this OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig.  # noqa: E501
        :type: list[str]
        """

        self._listen_addresses = listen_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigSystemSystemOpenconfigsystemsystemGrpcserverConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
