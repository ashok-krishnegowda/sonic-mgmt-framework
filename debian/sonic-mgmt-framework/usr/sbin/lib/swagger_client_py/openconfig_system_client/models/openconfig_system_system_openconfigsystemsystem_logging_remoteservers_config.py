# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'source_address': 'str',
        'remote_port': 'int'
    }

    attribute_map = {
        'host': 'host',
        'source_address': 'source-address',
        'remote_port': 'remote-port'
    }

    def __init__(self, host=None, source_address=None, remote_port=None):  # noqa: E501
        """OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig - a model defined in Swagger"""  # noqa: E501

        self._host = None
        self._source_address = None
        self._remote_port = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if source_address is not None:
            self.source_address = source_address
        if remote_port is not None:
            self.remote_port = remote_port

    @property
    def host(self):
        """Gets the host of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501


        :return: The host of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.


        :param host: The host of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def source_address(self):
        """Gets the source_address of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501


        :return: The source_address of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.


        :param source_address: The source_address of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def remote_port(self):
        """Gets the remote_port of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501


        :return: The remote_port of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501
        :rtype: int
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.


        :param remote_port: The remote_port of this OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig.  # noqa: E501
        :type: int
        """

        self._remote_port = remote_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigSystemSystemOpenconfigsystemsystemLoggingRemoteserversConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
