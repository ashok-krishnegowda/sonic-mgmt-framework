# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SonicPortSonicPortSonicportsonicportPORTPORTLIST(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ifname': 'str',
        'index': 'int',
        'speed': 'int',
        'valid_speeds': 'str',
        'alias': 'str',
        'description': 'str',
        'mtu': 'int',
        'lanes': 'str',
        'admin_status': 'str'
    }

    attribute_map = {
        'ifname': 'ifname',
        'index': 'index',
        'speed': 'speed',
        'valid_speeds': 'valid_speeds',
        'alias': 'alias',
        'description': 'description',
        'mtu': 'mtu',
        'lanes': 'lanes',
        'admin_status': 'admin_status'
    }

    def __init__(self, ifname=None, index=None, speed=None, valid_speeds=None, alias=None, description=None, mtu=None, lanes=None, admin_status=None):  # noqa: E501
        """SonicPortSonicPortSonicportsonicportPORTPORTLIST - a model defined in Swagger"""  # noqa: E501

        self._ifname = None
        self._index = None
        self._speed = None
        self._valid_speeds = None
        self._alias = None
        self._description = None
        self._mtu = None
        self._lanes = None
        self._admin_status = None
        self.discriminator = None

        self.ifname = ifname
        if index is not None:
            self.index = index
        if speed is not None:
            self.speed = speed
        if valid_speeds is not None:
            self.valid_speeds = valid_speeds
        if alias is not None:
            self.alias = alias
        if description is not None:
            self.description = description
        if mtu is not None:
            self.mtu = mtu
        if lanes is not None:
            self.lanes = lanes
        if admin_status is not None:
            self.admin_status = admin_status

    @property
    def ifname(self):
        """Gets the ifname of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The ifname of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: str
        """
        return self._ifname

    @ifname.setter
    def ifname(self, ifname):
        """Sets the ifname of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param ifname: The ifname of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: str
        """
        if ifname is None:
            raise ValueError("Invalid value for `ifname`, must not be `None`")  # noqa: E501

        self._ifname = ifname

    @property
    def index(self):
        """Gets the index of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The index of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param index: The index of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def speed(self):
        """Gets the speed of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The speed of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param speed: The speed of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: int
        """

        self._speed = speed

    @property
    def valid_speeds(self):
        """Gets the valid_speeds of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The valid_speeds of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: str
        """
        return self._valid_speeds

    @valid_speeds.setter
    def valid_speeds(self, valid_speeds):
        """Sets the valid_speeds of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param valid_speeds: The valid_speeds of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: str
        """

        self._valid_speeds = valid_speeds

    @property
    def alias(self):
        """Gets the alias of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The alias of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param alias: The alias of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def description(self):
        """Gets the description of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The description of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param description: The description of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mtu(self):
        """Gets the mtu of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The mtu of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param mtu: The mtu of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def lanes(self):
        """Gets the lanes of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The lanes of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: str
        """
        return self._lanes

    @lanes.setter
    def lanes(self, lanes):
        """Sets the lanes of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param lanes: The lanes of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: str
        """

        self._lanes = lanes

    @property
    def admin_status(self):
        """Gets the admin_status of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501


        :return: The admin_status of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :rtype: str
        """
        return self._admin_status

    @admin_status.setter
    def admin_status(self, admin_status):
        """Sets the admin_status of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.


        :param admin_status: The admin_status of this SonicPortSonicPortSonicportsonicportPORTPORTLIST.  # noqa: E501
        :type: str
        """
        allowed_values = ["up", "down"]  # noqa: E501
        if admin_status not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_status` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_status, allowed_values)
            )

        self._admin_status = admin_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SonicPortSonicPortSonicportsonicportPORTPORTLIST, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SonicPortSonicPortSonicportsonicportPORTPORTLIST):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
