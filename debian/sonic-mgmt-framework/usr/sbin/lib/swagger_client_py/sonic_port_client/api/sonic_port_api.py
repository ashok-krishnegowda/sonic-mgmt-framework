# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sonic_port_client.api_client import ApiClient


class SonicPortApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_list_sonic_port_sonic_port_port_port_list(self, **kwargs):  # noqa: E501
        """delete_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: delete_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_port_sonic_port_port_port_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_sonic_port_sonic_port_port_port_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_sonic_port_sonic_port_port_port_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_sonic_port_sonic_port_port_port_list_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: delete_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_port_sonic_port_port_port_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port(self, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port  # noqa: E501

        OperationId: delete_sonic_port_sonic_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port  # noqa: E501

        OperationId: delete_sonic_port_sonic_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port(self, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list_admin_status(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_admin_status  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_admin_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_admin_status(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_admin_status  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_admin_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list_admin_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list_admin_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/admin_status', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list_alias(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_alias  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_alias   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_alias(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_alias_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_alias  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_alias   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/alias', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list_description(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_description  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_description(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_description_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_description  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/description', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list_index(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_index(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_index_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/index', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list_lanes(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_lanes  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_lanes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_lanes(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_lanes_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_lanes  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_lanes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list_lanes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list_lanes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/lanes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list_mtu(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_mtu  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_mtu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_mtu(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_mtu_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_mtu  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_mtu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list_mtu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list_mtu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/mtu', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list_speed(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_speed  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_speed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_speed(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_speed_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_speed  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_speed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list_speed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list_speed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/speed', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_port_sonic_port_port_port_list_valid_speeds(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_valid_speeds  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_valid_speeds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_valid_speeds(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """delete_sonic_port_sonic_port_port_port_list_valid_speeds  # noqa: E501

        OperationId: delete_sonic_port_sonic_port_port_port_list_valid_speeds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_port_sonic_port_port_port_list_valid_speeds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `delete_sonic_port_sonic_port_port_port_list_valid_speeds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/valid_speeds', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_sonic_port_sonic_port_port_port_list(self, **kwargs):  # noqa: E501
        """get_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: get_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_port_sonic_port_port_port_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicPortSonicPortPortPortList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_sonic_port_sonic_port_port_port_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_sonic_port_sonic_port_port_port_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_sonic_port_sonic_port_port_port_list_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: get_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_port_sonic_port_port_port_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicPortSonicPortPortPortList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port(self, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port  # noqa: E501

        OperationId: get_sonic_port_sonic_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicPortSonicPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port  # noqa: E501

        OperationId: get_sonic_port_sonic_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicPortSonicPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port(self, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicPortSonicPortPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicPortSonicPortPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list_admin_status(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_admin_status  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_admin_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_admin_status(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListAdminStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_admin_status  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_admin_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListAdminStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list_admin_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list_admin_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/admin_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortListAdminStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list_alias(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_alias  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_alias   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_alias(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListAlias
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_alias_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_alias  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_alias   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListAlias
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/alias', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortListAlias',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list_description(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_description  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_description(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_description_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_description  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortListDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list_index(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_index(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListIndex
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_index_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListIndex
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/index', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortListIndex',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list_lanes(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_lanes  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_lanes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_lanes(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListLanes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_lanes_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_lanes  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_lanes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListLanes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list_lanes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list_lanes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/lanes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortListLanes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list_mtu(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_mtu  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_mtu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_mtu(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListMtu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_mtu_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_mtu  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_mtu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListMtu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list_mtu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list_mtu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/mtu', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortListMtu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list_speed(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_speed  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_speed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_speed(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListSpeed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_speed_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_speed  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_speed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListSpeed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list_speed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list_speed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/speed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortListSpeed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_port_sonic_port_port_port_list_valid_speeds(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_valid_speeds  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_valid_speeds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_valid_speeds(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListValidSpeeds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, **kwargs)  # noqa: E501
            return data

    def get_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(self, ifname, **kwargs):  # noqa: E501
        """get_sonic_port_sonic_port_port_port_list_valid_speeds  # noqa: E501

        OperationId: get_sonic_port_sonic_port_port_port_list_valid_speeds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :return: GetSonicPortSonicPortPortPortListValidSpeeds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_port_sonic_port_port_port_list_valid_speeds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `get_sonic_port_sonic_port_port_port_list_valid_speeds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/valid_speeds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicPortSonicPortPortPortListValidSpeeds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_sonic_port_sonic_port_port_port_list(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: patch_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_port_sonic_port_port_port_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_sonic_port_sonic_port_port_port_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_sonic_port_sonic_port_port_port_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_sonic_port_sonic_port_port_port_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: patch_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_port_sonic_port_port_port_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_sonic_port_sonic_port_port_port_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port(self, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port  # noqa: E501

        OperationId: patch_sonic_port_sonic_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicPortSonicPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port  # noqa: E501

        OperationId: patch_sonic_port_sonic_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicPortSonicPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port(self, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicPortSonicPortPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicPortSonicPortPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list_admin_status(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_admin_status  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_admin_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_admin_status(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListAdminStatus body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_admin_status  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_admin_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListAdminStatus body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list_admin_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list_admin_status`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list_admin_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/admin_status', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list_alias(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_alias  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_alias   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_alias(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_alias_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_alias  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_alias   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list_alias`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/alias', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list_description(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_description  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_description(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_description_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_description  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/description', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list_index(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_index(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListIndex body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_index_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListIndex body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list_index`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/index', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list_lanes(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_lanes  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_lanes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_lanes(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListLanes body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_lanes_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_lanes  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_lanes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListLanes body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list_lanes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list_lanes`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list_lanes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/lanes', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list_mtu(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_mtu  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_mtu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_mtu(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListMtu body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_mtu_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_mtu  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_mtu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListMtu body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list_mtu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list_mtu`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list_mtu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/mtu', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list_speed(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_speed  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_speed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_speed(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListSpeed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_speed_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_speed  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_speed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListSpeed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list_speed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list_speed`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list_speed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/speed', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_port_sonic_port_port_port_list_valid_speeds(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_valid_speeds  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_valid_speeds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_valid_speeds(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListValidSpeeds body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """patch_sonic_port_sonic_port_port_port_list_valid_speeds  # noqa: E501

        OperationId: patch_sonic_port_sonic_port_port_port_list_valid_speeds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PatchSonicPortSonicPortPortPortListValidSpeeds body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_port_sonic_port_port_port_list_valid_speeds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `patch_sonic_port_sonic_port_port_port_list_valid_speeds`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_port_sonic_port_port_port_list_valid_speeds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/valid_speeds', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_sonic_port_sonic_port_port_port_list(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: post_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_port_sonic_port_port_port_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_sonic_port_sonic_port_port_port_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_sonic_port_sonic_port_port_port_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_sonic_port_sonic_port_port_port_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: post_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_port_sonic_port_port_port_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_sonic_port_sonic_port_port_port_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_port_sonic_port_port(self, body, **kwargs):  # noqa: E501
        """post_sonic_port_sonic_port_port  # noqa: E501

        OperationId: post_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_port_sonic_port_port(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSonicPortSonicPortPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_port_sonic_port_port_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_port_sonic_port_port_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_sonic_port_sonic_port_port_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_sonic_port_sonic_port_port  # noqa: E501

        OperationId: post_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_port_sonic_port_port_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSonicPortSonicPortPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_port_sonic_port_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_port_sonic_port_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_port_sonic_port_port_port_list_index(self, ifname, body, **kwargs):  # noqa: E501
        """post_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: post_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_port_sonic_port_port_port_list_index(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PostSonicPortSonicPortPortPortListIndex body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def post_sonic_port_sonic_port_port_port_list_index_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """post_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: post_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PostSonicPortSonicPortPortPortListIndex body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_port_sonic_port_port_port_list_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `post_sonic_port_sonic_port_port_port_list_index`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_port_sonic_port_port_port_list_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_sonic_port_sonic_port_port_port_list(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: put_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_port_sonic_port_port_port_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_sonic_port_sonic_port_port_port_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_sonic_port_sonic_port_port_port_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_sonic_port_sonic_port_port_port_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: put_list_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_port_sonic_port_port_port_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_sonic_port_sonic_port_port_port_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port(self, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port  # noqa: E501

        OperationId: put_sonic_port_sonic_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicPortSonicPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port  # noqa: E501

        OperationId: put_sonic_port_sonic_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicPortSonicPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port(self, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicPortSonicPortPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicPortSonicPortPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list_admin_status(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_admin_status  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_admin_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_admin_status(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListAdminStatus body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_admin_status  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_admin_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_admin_status_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListAdminStatus body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list_admin_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list_admin_status`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list_admin_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/admin_status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list_alias(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_alias  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_alias   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_alias(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_alias_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_alias  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_alias   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_alias_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListAlias body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list_alias`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/alias', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list_description(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_description  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_description(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_description_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_description  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_description_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/description', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list_index(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_index(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListIndex body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_index_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_index  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_index_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListIndex body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list_index`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/index', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list_lanes(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_lanes  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_lanes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_lanes(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListLanes body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_lanes_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_lanes  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_lanes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_lanes_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListLanes body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list_lanes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list_lanes`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list_lanes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/lanes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list_mtu(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_mtu  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_mtu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_mtu(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListMtu body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_mtu_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_mtu  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_mtu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_mtu_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListMtu body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list_mtu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list_mtu`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list_mtu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/mtu', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list_speed(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_speed  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_speed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_speed(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListSpeed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_speed_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_speed  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_speed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_speed_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListSpeed body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list_speed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list_speed`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list_speed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/speed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_port_sonic_port_port_port_list_valid_speeds(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_valid_speeds  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_valid_speeds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_valid_speeds(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListValidSpeeds body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(self, ifname, body, **kwargs):  # noqa: E501
        """put_sonic_port_sonic_port_port_port_list_valid_speeds  # noqa: E501

        OperationId: put_sonic_port_sonic_port_port_port_list_valid_speeds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_port_sonic_port_port_port_list_valid_speeds_with_http_info(ifname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ifname:  (required)
        :param PutSonicPortSonicPortPortPortListValidSpeeds body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ifname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_port_sonic_port_port_port_list_valid_speeds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ifname' is set
        if ('ifname' not in params or
                params['ifname'] is None):
            raise ValueError("Missing the required parameter `ifname` when calling `put_sonic_port_sonic_port_port_port_list_valid_speeds`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_port_sonic_port_port_port_list_valid_speeds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ifname' in params:
            path_params['ifname'] = params['ifname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-port:sonic-port/PORT/PORT_LIST={ifname}/valid_speeds', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
