# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sonic_interface_client.api_client import ApiClient


class SonicInterfaceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list(self, **kwargs):  # noqa: E501
        """delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_IPADDR_LIST', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_sonic_interface_sonic_interface_interface_interface_list(self, **kwargs):  # noqa: E501
        """delete_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: delete_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_interface_sonic_interface_interface_interface_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: delete_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_interface_sonic_interface(self, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_interface_sonic_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_interface_sonic_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_interface_sonic_interface_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_interface_sonic_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_interface_sonic_interface_interface(self, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_interface_sonic_interface_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_interface_sonic_interface_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_interface_sonic_interface_interface_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_interface_sonic_interface_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list(self, portname, ip_prefix, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list(portname, ip_prefix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param str ip_prefix:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, **kwargs)  # noqa: E501
            return data

    def delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(self, portname, ip_prefix, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param str ip_prefix:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'ip_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501
        # verify the required parameter 'ip_prefix' is set
        if ('ip_prefix' not in params or
                params['ip_prefix'] is None):
            raise ValueError("Missing the required parameter `ip_prefix` when calling `delete_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501
        if 'ip_prefix' in params:
            path_params['ip_prefix'] = params['ip_prefix']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_IPADDR_LIST={portname},{ip_prefix}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_interface_sonic_interface_interface_interface_list(self, portname, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_interface_interface_list(portname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, portname, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `delete_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name(self, portname, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name(portname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(self, portname, **kwargs):  # noqa: E501
        """delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `delete_sonic_interface_sonic_interface_interface_interface_list_vrf_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}/vrf-name', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list(self, **kwargs):  # noqa: E501
        """get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_IPADDR_LIST', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_sonic_interface_sonic_interface_interface_interface_list(self, **kwargs):  # noqa: E501
        """get_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: get_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_interface_sonic_interface_interface_interface_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: get_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicInterfaceSonicInterfaceInterfaceInterfaceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_interface_sonic_interface(self, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicInterfaceSonicInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_interface_sonic_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_interface_sonic_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_interface_sonic_interface_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicInterfaceSonicInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_interface_sonic_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicInterfaceSonicInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_interface_sonic_interface_interface(self, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicInterfaceSonicInterfaceInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_interface_sonic_interface_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_interface_sonic_interface_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_interface_sonic_interface_interface_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicInterfaceSonicInterfaceInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_interface_sonic_interface_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicInterfaceSonicInterfaceInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_interface_sonic_interface_interface_interface_ipaddr_list(self, portname, ip_prefix, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_interface_interface_ipaddr_list(portname, ip_prefix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param str ip_prefix:  (required)
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, **kwargs)  # noqa: E501
            return data

    def get_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(self, portname, ip_prefix, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param str ip_prefix:  (required)
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'ip_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_interface_sonic_interface_interface_interface_ipaddr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `get_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501
        # verify the required parameter 'ip_prefix' is set
        if ('ip_prefix' not in params or
                params['ip_prefix'] is None):
            raise ValueError("Missing the required parameter `ip_prefix` when calling `get_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501
        if 'ip_prefix' in params:
            path_params['ip_prefix'] = params['ip_prefix']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_IPADDR_LIST={portname},{ip_prefix}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_interface_sonic_interface_interface_interface_list(self, portname, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_interface_interface_list(portname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, **kwargs)  # noqa: E501
            return data

    def get_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, portname, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `get_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicInterfaceSonicInterfaceInterfaceInterfaceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_interface_sonic_interface_interface_interface_list_vrf_name(self, portname, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_interface_interface_list_vrf_name(portname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, **kwargs)  # noqa: E501
            return data

    def get_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(self, portname, **kwargs):  # noqa: E501
        """get_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: get_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :return: GetSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_interface_sonic_interface_interface_interface_list_vrf_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `get_sonic_interface_sonic_interface_interface_interface_list_vrf_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}/vrf-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_IPADDR_LIST', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_sonic_interface_sonic_interface_interface_interface_list(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: patch_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_interface_sonic_interface_interface_interface_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: patch_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_interface_sonic_interface(self, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicInterfaceSonicInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_interface_sonic_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_interface_sonic_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_interface_sonic_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicInterfaceSonicInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_interface_sonic_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_interface_sonic_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_interface_sonic_interface_interface(self, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicInterfaceSonicInterfaceInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_interface_sonic_interface_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_interface_sonic_interface_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_interface_sonic_interface_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicInterfaceSonicInterfaceInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_interface_sonic_interface_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_interface_sonic_interface_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list(self, portname, ip_prefix, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list(portname, ip_prefix, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param str ip_prefix:  (required)
        :param PatchSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(self, portname, ip_prefix, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param str ip_prefix:  (required)
        :param PatchSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'ip_prefix', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501
        # verify the required parameter 'ip_prefix' is set
        if ('ip_prefix' not in params or
                params['ip_prefix'] is None):
            raise ValueError("Missing the required parameter `ip_prefix` when calling `patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501
        if 'ip_prefix' in params:
            path_params['ip_prefix'] = params['ip_prefix']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_IPADDR_LIST={portname},{ip_prefix}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_interface_sonic_interface_interface_interface_list(self, portname, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_interface_interface_list(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PatchSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, portname, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PatchSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `patch_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name(self, portname, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PatchSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(self, portname, body, **kwargs):  # noqa: E501
        """patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PatchSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_interface_sonic_interface_interface_interface_list_vrf_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}/vrf-name', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_sonic_interface_sonic_interface_interface_interface_list(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: post_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_interface_sonic_interface_interface_interface_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: post_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_interface_sonic_interface_interface(self, body, **kwargs):  # noqa: E501
        """post_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: post_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_interface_sonic_interface_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSonicInterfaceSonicInterfaceInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_interface_sonic_interface_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_interface_sonic_interface_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_sonic_interface_sonic_interface_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: post_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_interface_sonic_interface_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSonicInterfaceSonicInterfaceInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_interface_sonic_interface_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_interface_sonic_interface_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_interface_sonic_interface_interface_interface_list_vrf_name(self, portname, body, **kwargs):  # noqa: E501
        """post_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: post_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_interface_sonic_interface_interface_interface_list_vrf_name(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PostSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, **kwargs)  # noqa: E501
            return data

    def post_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(self, portname, body, **kwargs):  # noqa: E501
        """post_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: post_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PostSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_interface_sonic_interface_interface_interface_list_vrf_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `post_sonic_interface_sonic_interface_interface_interface_list_vrf_name`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_interface_sonic_interface_interface_interface_list_vrf_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_IPADDR_LIST', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_sonic_interface_sonic_interface_interface_interface_list(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: put_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_interface_sonic_interface_interface_interface_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: put_list_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_interface_sonic_interface_interface_interface_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_interface_sonic_interface(self, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicInterfaceSonicInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_interface_sonic_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_interface_sonic_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_interface_sonic_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicInterfaceSonicInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_interface_sonic_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_interface_sonic_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_interface_sonic_interface_interface(self, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicInterfaceSonicInterfaceInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_interface_sonic_interface_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_interface_sonic_interface_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_interface_sonic_interface_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface_interface  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface_interface   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicInterfaceSonicInterfaceInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_interface_sonic_interface_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_interface_sonic_interface_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_interface_sonic_interface_interface_interface_ipaddr_list(self, portname, ip_prefix, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_interface_interface_ipaddr_list(portname, ip_prefix, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param str ip_prefix:  (required)
        :param PutSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(self, portname, ip_prefix, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface_interface_interface_ipaddr_list  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface_interface_interface_ipaddr_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_interface_interface_ipaddr_list_with_http_info(portname, ip_prefix, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param str ip_prefix:  (required)
        :param PutSonicInterfaceSonicInterfaceInterfaceInterfaceIpaddrList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'ip_prefix', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_interface_sonic_interface_interface_interface_ipaddr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `put_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501
        # verify the required parameter 'ip_prefix' is set
        if ('ip_prefix' not in params or
                params['ip_prefix'] is None):
            raise ValueError("Missing the required parameter `ip_prefix` when calling `put_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_interface_sonic_interface_interface_interface_ipaddr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501
        if 'ip_prefix' in params:
            path_params['ip_prefix'] = params['ip_prefix']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_IPADDR_LIST={portname},{ip_prefix}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_interface_sonic_interface_interface_interface_list(self, portname, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_interface_interface_list(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PutSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_interface_sonic_interface_interface_interface_list_with_http_info(self, portname, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface_interface_interface_list  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface_interface_interface_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_interface_interface_list_with_http_info(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PutSonicInterfaceSonicInterfaceInterfaceInterfaceList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_interface_sonic_interface_interface_interface_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `put_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_interface_sonic_interface_interface_interface_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_interface_sonic_interface_interface_interface_list_vrf_name(self, portname, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_interface_interface_list_vrf_name(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PutSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(self, portname, body, **kwargs):  # noqa: E501
        """put_sonic_interface_sonic_interface_interface_interface_list_vrf_name  # noqa: E501

        OperationId: put_sonic_interface_sonic_interface_interface_interface_list_vrf_name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_interface_sonic_interface_interface_interface_list_vrf_name_with_http_info(portname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portname:  (required)
        :param PutSonicInterfaceSonicInterfaceInterfaceInterfaceListVrfName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_interface_sonic_interface_interface_interface_list_vrf_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portname' is set
        if ('portname' not in params or
                params['portname'] is None):
            raise ValueError("Missing the required parameter `portname` when calling `put_sonic_interface_sonic_interface_interface_interface_list_vrf_name`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_interface_sonic_interface_interface_interface_list_vrf_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portname' in params:
            path_params['portname'] = params['portname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-interface:sonic-interface/INTERFACE/INTERFACE_LIST={portname}/vrf-name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
