# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openconfig_acl_client.api_client import ApiClient


class OpenconfigAclApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(self, name, type, sequence_id, tcp_flags, **kwargs):  # noqa: E501
        """del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(name, type, sequence_id, tcp_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param str tcp_flags: List of TCP flags to match (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, tcp_flags, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, tcp_flags, **kwargs)  # noqa: E501
            return data

    def del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(self, name, type, sequence_id, tcp_flags, **kwargs):  # noqa: E501
        """del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, tcp_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param str tcp_flags: List of TCP flags to match (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'tcp_flags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'tcp_flags' is set
        if ('tcp_flags' not in params or
                params['tcp_flags'] is None):
            raise ValueError("Missing the required parameter `tcp_flags` when calling `del_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501
        if 'tcp_flags' in params:
            path_params['tcp-flags'] = params['tcp_flags']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/tcp-flags={tcp-flags}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_acl_acl_acl_sets_acl_set(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_acl_sets_acl_set(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_acl_acl_interfaces_interface(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_interfaces_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_acl_acl_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_acl_acl_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_acl_acl_interfaces_interface_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_interfaces_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl(self, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl  # noqa: E501

        OperationId: delete_openconfig_acl_acl Top level enclosing container for ACL model config and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl  # noqa: E501

        OperationId: delete_openconfig_acl_acl Top level enclosing container for ACL model config and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets(self, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set(self, name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries(self, name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries Access list entries container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries Access list entries container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions Enclosing container for list of ACL actions associated with an entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions Enclosing container for list of ACL actions associated with an entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config/forwarding-action', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config/log-action', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/config/description', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface Input interface container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface Input interface container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config/interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config/subinterface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4 Top level container for IPv4 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4 Top level container for IPv4 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/destination-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/dscp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/hop-limit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/protocol', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/source-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6 Top-level container for IPv6 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6 Top-level container for IPv6 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/destination-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/destination-flow-label', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/dscp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/hop-limit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/protocol', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/source-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/source-flow-label', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2 Ethernet header fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2 Ethernet header fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/destination-mac', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/destination-mac-mask', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/ethertype', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/source-mac', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/source-mac-mask', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport Transport fields container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport Transport fields container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/destination-port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/source-port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/tcp-flags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_acl_sets_acl_set_config_description(self, name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_config_description(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: delete_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_acl_sets_acl_set_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/config/description', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces(self, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces Enclosing container for the list of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces Enclosing container for the list of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets Enclosing container the list of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets Enclosing container the list of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, set_name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets Enclosing container the list of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets Enclosing container the list of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, set_name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface_interface_ref(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_interface_ref  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_interface_ref(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_interface_ref  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface_interface_ref_config(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config/interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config/subinterface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_acl_acl_acl_sets_acl_set(self, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_acl_sets_acl_set(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclAclSetsAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclAclSetsAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_acl_acl_interfaces_interface(self, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_acl_acl_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_acl_acl_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_acl_acl_interfaces_interface_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry List of ACL entries assigned to an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry List of ACL entries assigned to an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/acl-entries/acl-entry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry List of ACL entries assigned to an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry List of ACL entries assigned to an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/acl-entries/acl-entry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(self, name, type, sequence_id, tcp_flags, **kwargs):  # noqa: E501
        """get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(name, type, sequence_id, tcp_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param str tcp_flags: List of TCP flags to match (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, tcp_flags, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, tcp_flags, **kwargs)  # noqa: E501
            return data

    def get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(self, name, type, sequence_id, tcp_flags, **kwargs):  # noqa: E501
        """get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, tcp_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param str tcp_flags: List of TCP flags to match (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'tcp_flags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'tcp_flags' is set
        if ('tcp_flags' not in params or
                params['tcp_flags'] is None):
            raise ValueError("Missing the required parameter `tcp_flags` when calling `get_llist_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501
        if 'tcp_flags' in params:
            path_params['tcp-flags'] = params['tcp_flags']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/tcp-flags={tcp-flags}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl  # noqa: E501

        OperationId: get_openconfig_acl_acl Top level enclosing container for ACL model config and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAcl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl  # noqa: E501

        OperationId: get_openconfig_acl_acl Top level enclosing container for ACL model config and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAcl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAcl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclAclSets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclAclSets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries Access list entries container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries Access list entries container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions Enclosing container for list of ACL actions associated with an entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions Enclosing container for list of ACL actions associated with an entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config/forwarding-action', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigLogAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigLogAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config/log-action', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigLogAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state State information for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state State information for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsStateForwardingAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsStateForwardingAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_forwarding_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/state/forwarding-action', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsStateForwardingAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsStateLogAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsStateLogAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_state_log_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/state/log-action', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsStateLogAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config Access list entries config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config Access list entries config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/config/description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface Input interface container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface Input interface container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigSubinterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigSubinterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config/subinterface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigSubinterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state Operational state for interface-ref  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state Operational state for interface-ref  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefStateInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefStateInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/state/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefStateInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefStateSubinterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefStateSubinterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_state_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/state/subinterface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefStateSubinterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4 Top level container for IPv4 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4 Top level container for IPv4 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/destination-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDestinationAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/dscp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDscp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigHopLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigHopLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/hop-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigHopLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state State information for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state State information for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/state/destination-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateDestinationAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/state/dscp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateDscp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateHopLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateHopLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/state/hop-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateHopLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/state/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_state_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/state/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4StateSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6 Top-level container for IPv6 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6 Top-level container for IPv6 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/destination-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationFlowLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationFlowLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/destination-flow-label', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationFlowLabel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/dscp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDscp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigHopLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigHopLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/hop-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigHopLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceFlowLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceFlowLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/source-flow-label', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceFlowLabel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state Operational state data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state Operational state data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/state/destination-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDestinationAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDestinationFlowLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDestinationFlowLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_destination_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/state/destination-flow-label', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDestinationFlowLabel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/state/dscp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateDscp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateHopLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateHopLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/state/hop-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateHopLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/state/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/state/source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateSourceFlowLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateSourceFlowLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_state_source_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/state/source-flow-label', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6StateSourceFlowLabel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2 Ethernet header fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2 Ethernet header fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMac
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMac
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/destination-mac', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMac',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMacMask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMacMask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/destination-mac-mask', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMacMask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigEthertype
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigEthertype
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/ethertype', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigEthertype',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/source-mac', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMacMask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMacMask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/source-mac-mask', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMacMask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state State Information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state State Information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateDestinationMac
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateDestinationMac
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/state/destination-mac', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateDestinationMac',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateDestinationMacMask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateDestinationMacMask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_destination_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/state/destination-mac-mask', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateDestinationMacMask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateEthertype
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateEthertype
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_ethertype`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/state/ethertype', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateEthertype',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateSourceMac
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateSourceMac
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/state/source-mac', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateSourceMac',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateSourceMacMask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateSourceMacMask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_state_source_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/state/source-mac-mask', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2StateSourceMacMask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state State information for ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state State information for ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/state/description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets Count of the number of octets (bytes) matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateMatchedOctets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets Count of the number of octets (bytes) matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateMatchedOctets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/state/matched-octets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateMatchedOctets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets Count of the number of packets matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateMatchedPackets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets Count of the number of packets matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateMatchedPackets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/state/matched-packets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateMatchedPackets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id The sequence id determines the order in which ACL entries are applied.  The sequence id must be unique for each entry in an ACL set.  Target devices should apply the ACL entry rules in ascending order determined by sequence id (low to high), rather than the relying only on order in the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateSequenceId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id The sequence id determines the order in which ACL entries are applied.  The sequence id must be unique for each entry in an ACL set.  Target devices should apply the ACL entry rules in ascending order determined by sequence id (low to high), rather than the relying only on order in the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateSequenceId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_state_sequence_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/state/sequence-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryStateSequenceId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport Transport fields container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport Transport fields container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/destination-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/source-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/tcp-flags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state State data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state State data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateDestinationPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateDestinationPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_destination_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/state/destination-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateDestinationPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateSourcePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateSourcePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_source_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/state/source-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateSourcePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateTcpFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags_with_http_info(name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags_with_http_info(self, name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags_with_http_info(name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateTcpFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_state_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/state/tcp-flags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportStateTcpFlags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_config(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_config Access list config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_config(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_config Access list config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_config_description(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_config_description(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetConfigDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetConfigDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/config/description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetConfigDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_state(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_state Access list state information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_state(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_state_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_state_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_state_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_state Access list state information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_state_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_state_description(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_state_description  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_state_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_state_description(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetStateDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_state_description_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_state_description_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_state_description_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_state_description  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_state_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_state_description_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetStateDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_state_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_state_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_state_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/state/description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetStateDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_state_name(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_state_name  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_state_name The name of the access-list set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_state_name(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_state_name_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_state_name_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_state_name_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_state_name  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_state_name The name of the access-list set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_state_name_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_state_name`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_acl_sets_acl_set_state_type(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_state_type  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_state_type The type determines the fields allowed in the ACL entries belonging to the ACL set (e.g., IPv4, IPv6, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_state_type(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_acl_sets_acl_set_state_type_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_acl_sets_acl_set_state_type_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_acl_sets_acl_set_state_type_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_acl_sets_acl_set_state_type  # noqa: E501

        OperationId: get_openconfig_acl_acl_acl_sets_acl_set_state_type The type determines the fields allowed in the ACL entries belonging to the ACL set (e.g., IPv4, IPv6, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_acl_sets_acl_set_state_type_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :return: GetOpenconfigAclAclAclSetsAclSetStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_acl_sets_acl_set_state_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_acl_acl_acl_sets_acl_set_state_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_acl_sets_acl_set_state_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/state/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclAclSetsAclSetStateType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces Enclosing container for the list of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces Enclosing container for the list of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_config(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_config Configuration for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_config_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_config Configuration for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets Enclosing container the list of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets Enclosing container the list of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries Enclosing container for list of references to ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries Enclosing container for list of references to ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/acl-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry List of ACL entries assigned to an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_with_http_info(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry List of ACL entries assigned to an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/acl-entries/acl-entry={sequence-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state Operational state data for per-interface ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_with_http_info(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state Operational state data for per-interface ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_with_http_info(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/acl-entries/acl-entry={sequence-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets Count of the number of octets (bytes) matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryStateMatchedOctets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets Count of the number of octets (bytes) matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryStateMatchedOctets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/acl-entries/acl-entry={sequence-id}/state/matched-octets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryStateMatchedOctets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets Count of the number of packets matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryStateMatchedPackets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets Count of the number of packets matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryStateMatchedPackets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/acl-entries/acl-entry={sequence-id}/state/matched-packets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetAclEntriesAclEntryStateMatchedPackets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state Operational state data for interface egress ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state Operational state data for interface egress ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name Reference to the ACL set name applied on egress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetStateSetName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name Reference to the ACL set name applied on egress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetStateSetName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_set_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/state/set-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetStateSetName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type Reference to the ACL set type applied on egress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type Reference to the ACL set type applied on egress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_state_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/state/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetStateType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets Enclosing container the list of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets Enclosing container the list of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries Enclosing container for list of references to ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries Enclosing container for list of references to ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/acl-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry List of ACL entries assigned to an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_with_http_info(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry List of ACL entries assigned to an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_with_http_info(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/acl-entries/acl-entry={sequence-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state Operational state data for per-interface ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_with_http_info(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state Operational state data for per-interface ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_with_http_info(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/acl-entries/acl-entry={sequence-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets Count of the number of octets (bytes) matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryStateMatchedOctets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets Count of the number of octets (bytes) matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets_with_http_info(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryStateMatchedOctets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_octets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/acl-entries/acl-entry={sequence-id}/state/matched-octets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryStateMatchedOctets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets Count of the number of packets matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryStateMatchedPackets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(id, set_name, type, sequence_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(self, id, set_name, type, sequence_id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets Count of the number of packets matching the current ACL entry.  An implementation should provide this counter on a per-interface per-ACL-entry if possible.  If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.  An implementation that provides counters per entry per interface is not required to also provide an aggregate count, e.g., per entry -- the user is expected to be able implement the required aggregation if such a count is needed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets_with_http_info(id, set_name, type, sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param int sequence_id: Reference to per-interface acl entry key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryStateMatchedPackets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_acl_entries_acl_entry_state_matched_packets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/acl-entries/acl-entry={sequence-id}/state/matched-packets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetAclEntriesAclEntryStateMatchedPackets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state Operational state data for interface ingress ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state Operational state data for interface ingress ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name Reference to the ACL set name applied on ingress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetStateSetName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name Reference to the ACL set name applied on ingress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetStateSetName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_set_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/state/set-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetStateSetName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type Reference to the ACL set type applied on ingress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type_with_http_info(id, set_name, type, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type_with_http_info(self, id, set_name, type, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type Reference to the ACL set type applied on ingress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type_with_http_info(id, set_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_state_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/state/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetStateType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_interface_ref(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRef
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRef
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceInterfaceRef',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_config(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigSubinterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigSubinterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config/subinterface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigSubinterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_state(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_state Operational state for interface-ref  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_state(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_state_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_state Operational state for interface-ref  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_interface_ref_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_interface_ref_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceInterfaceRefState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefStateInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefStateInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_interface_ref_state_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/state/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceInterfaceRefStateInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefStateSubinterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceInterfaceRefStateSubinterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_interface_ref_state_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/state/subinterface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceInterfaceRefStateSubinterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_state(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_state Operational state for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_state(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_state_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_state_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_state_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_state Operational state for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_state_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_interfaces_interface_state_id(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_state_id  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_state_id User-defined identifier for the interface -- a common convention could be '<if name>.<subif index>'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_state_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceStateId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_interfaces_interface_state_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_interfaces_interface_state_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_interfaces_interface_state_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_interfaces_interface_state_id  # noqa: E501

        OperationId: get_openconfig_acl_acl_interfaces_interface_state_id User-defined identifier for the interface -- a common convention could be '<if name>.<subif index>'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_interfaces_interface_state_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :return: GetOpenconfigAclAclInterfacesInterfaceStateId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_interfaces_interface_state_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_acl_acl_interfaces_interface_state_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/state/id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclInterfacesInterfaceStateId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_state(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_state Global operational state data for ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_state  # noqa: E501

        OperationId: get_openconfig_acl_acl_state Global operational state data for ACLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_acl_acl_state_counter_capability(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_state_counter_capability  # noqa: E501

        OperationId: get_openconfig_acl_acl_state_counter_capability System reported indication of how ACL counters are reported by the target  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_state_counter_capability(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclStateCounterCapability
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_acl_acl_state_counter_capability_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_acl_acl_state_counter_capability_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_acl_acl_state_counter_capability_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_acl_acl_state_counter_capability  # noqa: E501

        OperationId: get_openconfig_acl_acl_state_counter_capability System reported indication of how ACL counters are reported by the target  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_acl_acl_state_counter_capability_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigAclAclStateCounterCapability
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_acl_acl_state_counter_capability" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/state/counter-capability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAclAclStateCounterCapability',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_acl_acl_acl_sets_acl_set(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_acl_sets_acl_set(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchListOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchListOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_acl_acl_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_acl_acl_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_acl_acl_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchListOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchListOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchListOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchListOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl  # noqa: E501

        OperationId: patch_openconfig_acl_acl Top level enclosing container for ACL model config and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigAclAcl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl  # noqa: E501

        OperationId: patch_openconfig_acl_acl Top level enclosing container for ACL model config and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigAclAcl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigAclAclAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigAclAclAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set(self, name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries(self, name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries Access list entries container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries Access list entries container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions Enclosing container for list of ACL actions associated with an entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions Enclosing container for list of ACL actions associated with an entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config/forwarding-action', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigLogAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigLogAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config/log-action', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config Access list entries config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config Access list entries config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/config/description', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface Input interface container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface Input interface container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config/interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigSubinterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigSubinterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config/subinterface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4 Top level container for IPv4 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4 Top level container for IPv4 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDestinationAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDestinationAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/destination-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/dscp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigHopLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigHopLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/hop-limit', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/protocol', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/source-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6 Top-level container for IPv6 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6 Top-level container for IPv6 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/destination-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationFlowLabel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationFlowLabel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/destination-flow-label', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/dscp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigHopLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigHopLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/hop-limit', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/protocol', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/source-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceFlowLabel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceFlowLabel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/source-flow-label', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2 Ethernet header fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2 Ethernet header fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/destination-mac', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMacMask body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMacMask body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/destination-mac-mask', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigEthertype body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigEthertype body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/ethertype', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/source-mac', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMacMask body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMacMask body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/source-mac-mask', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport Transport fields container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransport body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport Transport fields container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransport body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/destination-port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/source-port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/tcp-flags', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_config(self, name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_config Access list config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_config(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_config Access list config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_acl_sets_acl_set_config_description(self, name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_config_description(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: patch_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PatchOpenconfigAclAclAclSetsAclSetConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_acl_sets_acl_set_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/config/description', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces Enclosing container for the list of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigAclAclInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces Enclosing container for the list of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigAclAclInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_config(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_config Configuration for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_config(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_config_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_config Configuration for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets Enclosing container the list of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceEgressAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets Enclosing container the list of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceEgressAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets Enclosing container the list of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceIngressAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets Enclosing container the list of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceIngressAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_interface_ref(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_interface_ref  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_interface_ref(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_interface_ref  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_interface_ref_config(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config/interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigSubinterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PatchOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigSubinterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config/subinterface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_acl_acl_acl_sets_acl_set(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_acl_sets_acl_set(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PostListOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PostListOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_acl_acl_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_acl_acl_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_acl_acl_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostListOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostListOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostListOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostListOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets(self, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigAclAclAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigAclAclAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config Access list entries config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config Access list entries config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_config(self, name, type, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_config Access list config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_config(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_config Access list config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_acl_sets_acl_set_config_description(self, name, type, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_config_description(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: post_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PostOpenconfigAclAclAclSetsAclSetConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_acl_sets_acl_set_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_interfaces_interface_config(self, id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_config Configuration for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_config(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_interfaces_interface_config_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_config Configuration for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_openconfig_acl_acl_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_interfaces_interface_interface_ref_config(self, id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_interface_ref_config(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_interfaces_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_openconfig_acl_acl_interfaces_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_interfaces_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(self, id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PostOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_acl_acl_acl_sets_acl_set(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_acl_sets_acl_set(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_acl_sets_acl_set_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutListOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutListOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_acl_acl_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_acl_acl_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_acl_acl_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutListOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutListOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutListOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutListOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl(self, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl  # noqa: E501

        OperationId: put_openconfig_acl_acl Top level enclosing container for ACL model config and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigAclAcl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl  # noqa: E501

        OperationId: put_openconfig_acl_acl Top level enclosing container for ACL model config and operational state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigAclAcl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets(self, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigAclAclAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets Access list entries variables enclosing container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigAclAclAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set(self, name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set List of ACL sets, each comprising of a list of ACL entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutOpenconfigAclAclAclSetsAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries(self, name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries Access list entries container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries Access list entries container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntries body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry List of ACL entries comprising an ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntry body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions Enclosing container for list of ACL actions associated with an entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions Enclosing container for list of ACL actions associated with an entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config Config data for ACL actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action Specifies the forwarding action.  One forwarding action must be specified for each ACL entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigForwardingAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_forwarding_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config/forwarding-action', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigLogAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action Specifies the log action and destination for matched packets.  The default is not to log the packet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryActionsConfigLogAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_actions_config_log_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/actions/config/log-action', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config Access list entries config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config Access list entries config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description A user-defined description, or comment, for this Access List Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/config/description', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface Input interface container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface Input interface container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config/interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigSubinterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryInputInterfaceInterfaceRefConfigSubinterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_input_interface_interface_ref_config_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/input-interface/interface-ref/config/subinterface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4 Top level container for IPv4 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4 Top level container for IPv4 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config Configuration data for IPv4 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDestinationAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address Destination IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDestinationAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/destination-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/dscp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigHopLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigHopLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/hop-limit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/protocol', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address Source IPv4 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv4ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv4_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv4/config/source-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6 Top-level container for IPv6 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6 Top-level container for IPv6 match field data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config Configuration data for IPv6 match fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address Destination IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/destination-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationFlowLabel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label Destination IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDestinationFlowLabel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_destination_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/destination-flow-label', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp Value of diffserv codepoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/dscp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigHopLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit The IP packet's hop limit -- known as TTL (in hops) in IPv4 packets, and hop limit in IPv6  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigHopLimit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_hop_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/hop-limit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol The protocol carried in the IP packet, expressed either as its IP protocol number, or by a defined identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/protocol', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address Source IPv6 address prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/source-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceFlowLabel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label Source IPv6 Flow label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryIpv6ConfigSourceFlowLabel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_ipv6_config_source_flow_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/ipv6/config/source-flow-label', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2 Ethernet header fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2 Ethernet header fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2Config body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac Destination IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/destination-mac', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMacMask body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask Destination IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigDestinationMacMask body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_destination_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/destination-mac-mask', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigEthertype body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype Ethertype field to match in Ethernet packets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigEthertype body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_ethertype`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/ethertype', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac Source IEEE 802 MAC address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMac body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/source-mac', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMacMask body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask Source IEEE 802 MAC address mask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryL2ConfigSourceMacMask body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_l2_config_source_mac_mask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/l2/config/source-mac-mask', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport Transport fields container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransport body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport Transport fields container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransport body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config Configuration data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port Destination port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_destination_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/destination-port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port Source port or range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_source_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/source-port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(self, name, type, sequence_id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags List of TCP flags to match  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags_with_http_info(name, type, sequence_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param int sequence_id: references the list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigTcpFlags body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'sequence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'sequence_id' is set
        if ('sequence_id' not in params or
                params['sequence_id'] is None):
            raise ValueError("Missing the required parameter `sequence_id` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_acl_entries_acl_entry_transport_config_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'sequence_id' in params:
            path_params['sequence-id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/acl-entries/acl-entry={sequence-id}/transport/config/tcp-flags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_config(self, name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_config Access list config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_config(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_config Access list config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_config_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_acl_sets_acl_set_config_description(self, name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_config_description(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(self, name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_acl_sets_acl_set_config_description  # noqa: E501

        OperationId: put_openconfig_acl_acl_acl_sets_acl_set_config_description Description, or comment, for the ACL set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_acl_sets_acl_set_config_description_with_http_info(name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the name list key (required)
        :param str type: Reference to the type list key (required)
        :param PutOpenconfigAclAclAclSetsAclSetConfigDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_acl_sets_acl_set_config_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_acl_sets_acl_set_config_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/acl-sets/acl-set={name},{type}/config/description', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces(self, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces Enclosing container for the list of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigAclAclInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces Enclosing container for the list of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigAclAclInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface List of interfaces on which ACLs are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_config(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_config Configuration for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_config(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_config_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_config Configuration for ACL per-interface data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_config_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_egress_acl_sets(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_egress_acl_sets  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_egress_acl_sets Enclosing container the list of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceEgressAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_egress_acl_sets  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_egress_acl_sets Enclosing container the list of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceEgressAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_egress_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set List of egress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceEgressAclSetsEgressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_egress_acl_sets_egress_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/egress-acl-sets/egress-acl-set={set-name},{type}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets Enclosing container the list of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceIngressAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets Enclosing container the list of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceIngressAclSets body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set List of ingress ACLs on the interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSet body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(self, id, set_name, type, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config_with_http_info(id, set_name, type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param str set_name: Reference to set name list key (required)
        :param str type: Reference to type list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceIngressAclSetsIngressAclSetConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_name', 'type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_ingress_acl_sets_ingress_acl_set_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'set_name' in params:
            path_params['set-name'] = params['set_name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/ingress-acl-sets/ingress-acl-set={set-name},{type}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_interface_ref(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_interface_ref  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_interface_ref(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_interface_ref  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_interface_ref Reference to an interface or subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_interface_ref_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceInterfaceRef body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_interface_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_interface_ref`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_interface_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_interface_ref_config(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_interface_ref_config(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_interface_ref_config  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_interface_ref_config Configured reference to interface / subinterface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceInterfaceRefConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_interface_ref_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_interface_ref_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_interface_ref_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_interface_ref_config_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config/interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigSubinterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface  # noqa: E501

        OperationId: put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Reference to the interface id list key (required)
        :param PutOpenconfigAclAclInterfacesInterfaceInterfaceRefConfigSubinterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_acl_acl_interfaces_interface_interface_ref_config_subinterface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-acl:acl/interfaces/interface={id}/interface-ref/config/subinterface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
