# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequence_id': 'int',
        'description': 'str',
        'matched_packets': 'int',
        'matched_octets': 'int'
    }

    attribute_map = {
        'sequence_id': 'sequence-id',
        'description': 'description',
        'matched_packets': 'matched-packets',
        'matched_octets': 'matched-octets'
    }

    def __init__(self, sequence_id=None, description=None, matched_packets=None, matched_octets=None):  # noqa: E501
        """GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState - a model defined in Swagger"""  # noqa: E501

        self._sequence_id = None
        self._description = None
        self._matched_packets = None
        self._matched_octets = None
        self.discriminator = None

        if sequence_id is not None:
            self.sequence_id = sequence_id
        if description is not None:
            self.description = description
        if matched_packets is not None:
            self.matched_packets = matched_packets
        if matched_octets is not None:
            self.matched_octets = matched_octets

    @property
    def sequence_id(self):
        """Gets the sequence_id of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501


        :return: The sequence_id of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501
        :rtype: int
        """
        return self._sequence_id

    @sequence_id.setter
    def sequence_id(self, sequence_id):
        """Sets the sequence_id of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.


        :param sequence_id: The sequence_id of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501
        :type: int
        """

        self._sequence_id = sequence_id

    @property
    def description(self):
        """Gets the description of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501


        :return: The description of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.


        :param description: The description of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def matched_packets(self):
        """Gets the matched_packets of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501


        :return: The matched_packets of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501
        :rtype: int
        """
        return self._matched_packets

    @matched_packets.setter
    def matched_packets(self, matched_packets):
        """Sets the matched_packets of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.


        :param matched_packets: The matched_packets of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501
        :type: int
        """

        self._matched_packets = matched_packets

    @property
    def matched_octets(self):
        """Gets the matched_octets of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501


        :return: The matched_octets of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501
        :rtype: int
        """
        return self._matched_octets

    @matched_octets.setter
    def matched_octets(self, matched_octets):
        """Sets the matched_octets of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.


        :param matched_octets: The matched_octets of this GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState.  # noqa: E501
        :type: int
        """

        self._matched_octets = matched_octets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigAclAclOpenconfigaclaclAclsetsAclentriesState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
