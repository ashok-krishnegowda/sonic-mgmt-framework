# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'src_ip': 'str',
        'dst_ip': 'str',
        'gre_type': 'str',
        'dscp': 'int',
        'ttl': 'int',
        'queue': 'int'
    }

    attribute_map = {
        'name': 'name',
        'src_ip': 'src_ip',
        'dst_ip': 'dst_ip',
        'gre_type': 'gre_type',
        'dscp': 'dscp',
        'ttl': 'ttl',
        'queue': 'queue'
    }

    def __init__(self, name=None, src_ip=None, dst_ip=None, gre_type=None, dscp=None, ttl=None, queue=None):  # noqa: E501
        """SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._src_ip = None
        self._dst_ip = None
        self._gre_type = None
        self._dscp = None
        self._ttl = None
        self._queue = None
        self.discriminator = None

        self.name = name
        if src_ip is not None:
            self.src_ip = src_ip
        if dst_ip is not None:
            self.dst_ip = dst_ip
        if gre_type is not None:
            self.gre_type = gre_type
        if dscp is not None:
            self.dscp = dscp
        if ttl is not None:
            self.ttl = ttl
        if queue is not None:
            self.queue = queue

    @property
    def name(self):
        """Gets the name of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501


        :return: The name of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.


        :param name: The name of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def src_ip(self):
        """Gets the src_ip of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501


        :return: The src_ip of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.


        :param src_ip: The src_ip of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :type: str
        """

        self._src_ip = src_ip

    @property
    def dst_ip(self):
        """Gets the dst_ip of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501


        :return: The dst_ip of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.


        :param dst_ip: The dst_ip of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :type: str
        """

        self._dst_ip = dst_ip

    @property
    def gre_type(self):
        """Gets the gre_type of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501


        :return: The gre_type of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :rtype: str
        """
        return self._gre_type

    @gre_type.setter
    def gre_type(self, gre_type):
        """Sets the gre_type of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.


        :param gre_type: The gre_type of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :type: str
        """

        self._gre_type = gre_type

    @property
    def dscp(self):
        """Gets the dscp of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501


        :return: The dscp of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :rtype: int
        """
        return self._dscp

    @dscp.setter
    def dscp(self, dscp):
        """Sets the dscp of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.


        :param dscp: The dscp of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :type: int
        """

        self._dscp = dscp

    @property
    def ttl(self):
        """Gets the ttl of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501


        :return: The ttl of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.


        :param ttl: The ttl of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    @property
    def queue(self):
        """Gets the queue of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501


        :return: The queue of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :rtype: int
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.


        :param queue: The queue of this SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST.  # noqa: E501
        :type: int
        """

        self._queue = queue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SonicMirrorSessionSonicMirrorSessionSonicmirrorsessionsonicmirrorsessionMIRRORSESSIONMIRRORSESSIONLIST):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
