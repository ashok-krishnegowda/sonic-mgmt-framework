# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sonic_mirror_session_client.api_client import ApiClient


class SonicMirrorSessionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, **kwargs):  # noqa: E501
        """delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session(self, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session(self, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/dscp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/dst_ip', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/gre_type', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/queue', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/src_ip', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl  # noqa: E501

        OperationId: delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/ttl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, **kwargs):  # noqa: E501
        """get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session(self, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicMirrorSessionSonicMirrorSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicMirrorSessionSonicMirrorSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session(self, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/dscp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDscp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDstIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDstIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/dst_ip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDstIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListGreType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListGreType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/gre_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListGreType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/queue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListQueue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/src_ip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListTtl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl  # noqa: E501

        OperationId: get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :return: GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListTtl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/ttl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListTtl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session(self, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicMirrorSessionSonicMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicMirrorSessionSonicMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session(self, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/dscp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDstIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDstIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/dst_ip', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListGreType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListGreType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/gre_type', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListQueue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListQueue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/queue', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/src_ip', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListTtl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl  # noqa: E501

        OperationId: patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PatchSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListTtl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/ttl', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_mirror_session_sonic_mirror_session_mirror_session(self, body, **kwargs):  # noqa: E501
        """post_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: post_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_mirror_session_sonic_mirror_session_mirror_session(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSonicMirrorSessionSonicMirrorSessionMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: post_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSonicMirrorSessionSonicMirrorSessionMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_mirror_session_sonic_mirror_session_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_mirror_session_sonic_mirror_session_mirror_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(self, name, body, **kwargs):  # noqa: E501
        """post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PostSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PostSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session(self, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicMirrorSessionSonicMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicMirrorSessionSonicMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session(self, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSession body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session_mirror_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/dscp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDstIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListDstIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_dst_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/dst_ip', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListGreType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListGreType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_gre_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/gre_type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListQueue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListQueue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/queue', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/src_ip', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListTtl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl  # noqa: E501

        OperationId: put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:  (required)
        :param PutSonicMirrorSessionSonicMirrorSessionMirrorSessionMirrorSessionListTtl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_mirror_session_sonic_mirror_session_mirror_session_mirror_session_list_ttl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-mirror-session:sonic-mirror-session/MIRROR_SESSION/MIRROR_SESSION_LIST={name}/ttl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
