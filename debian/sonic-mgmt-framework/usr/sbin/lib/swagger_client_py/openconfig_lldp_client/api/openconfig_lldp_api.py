# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openconfig_lldp_client.api_client import ApiClient


class OpenconfigLldpApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_list_openconfig_lldp_lldp_interfaces_interface(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_lldp_lldp_interfaces_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp Top-level container for LLDP configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp Top-level container for LLDP configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_config_chassis_id(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_chassis_id  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_chassis_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_config_chassis_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_config_chassis_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_config_chassis_id_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_chassis_id  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_chassis_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_config_chassis_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/chassis-id', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_config_chassis_id_type(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_chassis_id_type  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_chassis_id_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_chassis_id_type  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_config_chassis_id_type" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/chassis-id-type', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_config_enabled(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_enabled(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_config_enabled_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_config_enabled_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_config_enabled_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_enabled_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/enabled', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_config_hello_timer(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_hello_timer  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_hello_timer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_config_hello_timer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_config_hello_timer_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_config_hello_timer_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_hello_timer  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_hello_timer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_config_hello_timer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/hello-timer', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_config_suppress_tlv_advertisement" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/suppress-tlv-advertisement', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_config_system_description(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_system_description  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_system_description(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_config_system_description_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_config_system_description_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_config_system_description_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_system_description  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_system_description_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_config_system_description" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/system-description', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_config_system_name(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_system_name  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_system_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_config_system_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_config_system_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_config_system_name_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_config_system_name  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_config_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_config_system_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_config_system_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/system-name', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_interfaces(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_interfaces  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_interfaces Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_interfaces  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_interfaces Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_interfaces_interface(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_interfaces_interface(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_lldp_lldp_interfaces_interface_config_enabled(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_interfaces_interface_config_enabled(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: delete_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_lldp_lldp_interfaces_interface_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_lldp_lldp_interfaces_interface_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/config/enabled', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_lldp_lldp_interfaces_interface(self, **kwargs):  # noqa: E501
        """get_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_lldp_lldp_interfaces_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor  # noqa: E501

        OperationId: get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor List of LLDP neighbors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighbor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor  # noqa: E501

        OperationId: get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor List of LLDP neighbors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighbor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighbor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability(self, name, id, **kwargs):  # noqa: E501
        """get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability  # noqa: E501

        OperationId: get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability List of LLDP system capabilities advertised by the neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapability
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability  # noqa: E501

        OperationId: get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability List of LLDP system capabilities advertised by the neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapability
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/capabilities/capability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapability',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv(self, name, id, **kwargs):  # noqa: E501
        """get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv  # noqa: E501

        OperationId: get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv List of custom LLDP TLVs from a neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlv
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv  # noqa: E501

        OperationId: get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv List of custom LLDP TLVs from a neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlv
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_list_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/custom-tlvs/tlv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlv',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp  # noqa: E501

        OperationId: get_openconfig_lldp_lldp Top-level container for LLDP configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp  # noqa: E501

        OperationId: get_openconfig_lldp_lldp Top-level container for LLDP configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_config(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_config_chassis_id(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_chassis_id  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_chassis_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigChassisId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_config_chassis_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_config_chassis_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_config_chassis_id_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_chassis_id  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_chassis_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigChassisId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_config_chassis_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/chassis-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpConfigChassisId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_config_chassis_id_type(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_chassis_id_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_chassis_id_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigChassisIdType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_chassis_id_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigChassisIdType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_config_chassis_id_type" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/chassis-id-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpConfigChassisIdType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_config_enabled(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_enabled(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_config_enabled_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_config_enabled_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_config_enabled_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_enabled_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpConfigEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_config_hello_timer(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_hello_timer  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_hello_timer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigHelloTimer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_config_hello_timer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_config_hello_timer_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_config_hello_timer_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_hello_timer  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_hello_timer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigHelloTimer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_config_hello_timer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/hello-timer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpConfigHelloTimer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_config_suppress_tlv_advertisement(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_suppress_tlv_advertisement  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_suppress_tlv_advertisement(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigSuppressTlvAdvertisement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_suppress_tlv_advertisement  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigSuppressTlvAdvertisement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_config_suppress_tlv_advertisement" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/suppress-tlv-advertisement', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpConfigSuppressTlvAdvertisement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_config_system_description(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_system_description  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_system_description(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigSystemDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_config_system_description_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_config_system_description_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_config_system_description_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_system_description  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_system_description_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigSystemDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_config_system_description" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/system-description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpConfigSystemDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_config_system_name(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_system_name  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_system_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigSystemName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_config_system_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_config_system_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_config_system_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_config_system_name  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_config_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_config_system_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpConfigSystemName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_config_system_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/system-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpConfigSystemName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_config(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_config Configuration data for LLDP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_config(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_config Configuration data for LLDP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_config_enabled(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_config_enabled(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceConfigEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceConfigEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/config/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceConfigEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors Enclosing container for list of LLDP neighbors on an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighbors
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors Enclosing container for list of LLDP neighbors on an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighbors
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighbors',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor List of LLDP neighbors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighbor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor List of LLDP neighbors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighbor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighbor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities Enclosing container for list of LLDP capabilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities Enclosing container for list of LLDP capabilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/capabilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability(self, name, id, name2, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability List of LLDP system capabilities advertised by the neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability(name, id, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param str name2: Reference to capabilities list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapability
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_with_http_info(name, id, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_with_http_info(name, id, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_with_http_info(self, name, id, name2, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability List of LLDP system capabilities advertised by the neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_with_http_info(name, id, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param str name2: Reference to capabilities list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapability
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/capabilities/capability={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapability',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state(self, name, id, name2, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state Operational state data for LLDP capabilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state(name, id, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param str name2: Reference to capabilities list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapabilityState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_with_http_info(name, id, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_with_http_info(name, id, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_with_http_info(self, name, id, name2, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state Operational state data for LLDP capabilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_with_http_info(name, id, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param str name2: Reference to capabilities list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapabilityState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/capabilities/capability={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapabilityState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled(self, name, id, name2, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled Indicates whether the corresponding system capability is enabled on the neighbor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled(name, id, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param str name2: Reference to capabilities list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapabilityStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled_with_http_info(name, id, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled_with_http_info(name, id, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled_with_http_info(self, name, id, name2, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled Indicates whether the corresponding system capability is enabled on the neighbor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled_with_http_info(name, id, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param str name2: Reference to capabilities list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapabilityStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_capabilities_capability_state_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/capabilities/capability={name}/state/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCapabilitiesCapabilityStateEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs Enclosing container for list of custom TLVs from a neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs Enclosing container for list of custom TLVs from a neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/custom-tlvs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv(self, name, id, type, oui, oui_subtype, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv List of custom LLDP TLVs from a neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv(name, id, type, oui, oui_subtype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param int type: Reference to type list key (required)
        :param str oui: Reference to oui list key (required)
        :param str oui_subtype: Reference to oui-subtype list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlv
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_with_http_info(name, id, type, oui, oui_subtype, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_with_http_info(name, id, type, oui, oui_subtype, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_with_http_info(self, name, id, type, oui, oui_subtype, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv List of custom LLDP TLVs from a neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_with_http_info(name, id, type, oui, oui_subtype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param int type: Reference to type list key (required)
        :param str oui: Reference to oui list key (required)
        :param str oui_subtype: Reference to oui-subtype list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlv
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id', 'type', 'oui', 'oui_subtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv`")  # noqa: E501
        # verify the required parameter 'oui' is set
        if ('oui' not in params or
                params['oui'] is None):
            raise ValueError("Missing the required parameter `oui` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv`")  # noqa: E501
        # verify the required parameter 'oui_subtype' is set
        if ('oui_subtype' not in params or
                params['oui_subtype'] is None):
            raise ValueError("Missing the required parameter `oui_subtype` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'oui' in params:
            path_params['oui'] = params['oui']  # noqa: E501
        if 'oui_subtype' in params:
            path_params['oui-subtype'] = params['oui_subtype']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/custom-tlvs/tlv={type},{oui},{oui-subtype}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlv',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state(self, name, id, type, oui, oui_subtype, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state(name, id, type, oui, oui_subtype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param int type: Reference to type list key (required)
        :param str oui: Reference to oui list key (required)
        :param str oui_subtype: Reference to oui-subtype list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlvState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_with_http_info(name, id, type, oui, oui_subtype, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_with_http_info(name, id, type, oui, oui_subtype, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_with_http_info(self, name, id, type, oui, oui_subtype, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_with_http_info(name, id, type, oui, oui_subtype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param int type: Reference to type list key (required)
        :param str oui: Reference to oui list key (required)
        :param str oui_subtype: Reference to oui-subtype list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlvState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id', 'type', 'oui', 'oui_subtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state`")  # noqa: E501
        # verify the required parameter 'oui' is set
        if ('oui' not in params or
                params['oui'] is None):
            raise ValueError("Missing the required parameter `oui` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state`")  # noqa: E501
        # verify the required parameter 'oui_subtype' is set
        if ('oui_subtype' not in params or
                params['oui_subtype'] is None):
            raise ValueError("Missing the required parameter `oui_subtype` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'oui' in params:
            path_params['oui'] = params['oui']  # noqa: E501
        if 'oui_subtype' in params:
            path_params['oui-subtype'] = params['oui_subtype']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/custom-tlvs/tlv={type},{oui},{oui-subtype}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlvState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value(self, name, id, type, oui, oui_subtype, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value A variable-length octet-string containing the instance-specific information for this TLV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value(name, id, type, oui, oui_subtype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param int type: Reference to type list key (required)
        :param str oui: Reference to oui list key (required)
        :param str oui_subtype: Reference to oui-subtype list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlvStateValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value_with_http_info(name, id, type, oui, oui_subtype, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value_with_http_info(name, id, type, oui, oui_subtype, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value_with_http_info(self, name, id, type, oui, oui_subtype, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value A variable-length octet-string containing the instance-specific information for this TLV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value_with_http_info(name, id, type, oui, oui_subtype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :param int type: Reference to type list key (required)
        :param str oui: Reference to oui list key (required)
        :param str oui_subtype: Reference to oui-subtype list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlvStateValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id', 'type', 'oui', 'oui_subtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value`")  # noqa: E501
        # verify the required parameter 'oui' is set
        if ('oui' not in params or
                params['oui'] is None):
            raise ValueError("Missing the required parameter `oui` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value`")  # noqa: E501
        # verify the required parameter 'oui_subtype' is set
        if ('oui_subtype' not in params or
                params['oui_subtype'] is None):
            raise ValueError("Missing the required parameter `oui_subtype` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_custom_tlvs_tlv_state_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'oui' in params:
            path_params['oui'] = params['oui']  # noqa: E501
        if 'oui_subtype' in params:
            path_params['oui-subtype'] = params['oui_subtype']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/custom-tlvs/tlv={type},{oui},{oui-subtype}/state/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborCustomTlvsTlvStateValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age Age since discovery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateAge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age Age since discovery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateAge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateAge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateChassisId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateChassisId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/chassis-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateChassisId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateChassisIdType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateChassisIdType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_chassis_id_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/chassis-id-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateChassisIdType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update Seconds since last update received.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateLastUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update Seconds since last update received.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateLastUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_last_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/last-update', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateLastUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address The Management Address is a mandatory TLV which identifies a network address associated with the local LLDP agent, which can be used to reach the agent on the port identified in the Port ID TLV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateManagementAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address The Management Address is a mandatory TLV which identifies a network address associated with the local LLDP agent, which can be used to reach the agent on the port identified in the Port ID TLV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateManagementAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/management-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateManagementAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type The enumerated value for the network address type identified in this TLV. This enumeration is defined in the 'Assigned Numbers' RFC [RFC3232] and the ianaAddressFamilyNumbers object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateManagementAddressType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type The enumerated value for the network address type identified in this TLV. This enumeration is defined in the 'Assigned Numbers' RFC [RFC3232] and the ianaAddressFamilyNumbers object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateManagementAddressType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_management_address_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/management-address-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateManagementAddressType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description The binary string containing the actual port identifier for the port which this LLDP PDU was transmitted. The source and format of this field is defined by PtopoPortId from RFC2922.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description The binary string containing the actual port identifier for the port which this LLDP PDU was transmitted. The source and format of this field is defined by PtopoPortId from RFC2922.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/port-description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id The Port ID is a mandatory TLV which identifies the port component of the endpoint identifier associated with the transmitting LLDP agent. If the specified port is an IEEE 802.3 Repeater port, then this TLV is optional.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id The Port ID is a mandatory TLV which identifies the port component of the endpoint identifier associated with the transmitting LLDP agent. If the specified port is an IEEE 802.3 Repeater port, then this TLV is optional.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/port-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type This field identifies the format and source of the port identifier string. It is an enumerator defined by the PtopoPortIdType object from RFC2922.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortIdType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type This field identifies the format and source of the port identifier string. It is an enumerator defined by the PtopoPortIdType object from RFC2922.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortIdType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_port_id_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/port-id-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStatePortIdType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateSystemDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateSystemDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/system-description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateSystemDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateSystemName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateSystemName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_system_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/system-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateSystemName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl The time-to-live (TTL) is a mandatory TLV which indicates how long information from the neighbor should be considered valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateTtl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl_with_http_info(name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl_with_http_info(name, id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl_with_http_info(self, name, id, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl The time-to-live (TTL) is a mandatory TLV which indicates how long information from the neighbor should be considered valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl_with_http_info(name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param str id:   (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateTtl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_lldp_lldp_interfaces_interface_neighbors_neighbor_state_ttl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/neighbors/neighbor={id}/state/ttl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceNeighborsNeighborStateTtl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters LLDP counters on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters LLDP counters on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCounters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard The number of LLDP frames received and discarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameDiscard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard The number of LLDP frames received and discarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameDiscard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_discard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters/frame-discard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameDiscard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in The number of LLDP frames received with errors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameErrorIn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in The number of LLDP frames received with errors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameErrorIn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_in`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters/frame-error-in', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameErrorIn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out The number of frame transmit errors on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameErrorOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out The number of frame transmit errors on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameErrorOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_error_out`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters/frame-error-out', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameErrorOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in The number of lldp frames received.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameIn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in The number of lldp frames received.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameIn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_in`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters/frame-in', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameIn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out The number of frames transmitted out.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out The number of frames transmitted out.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters_frame_out`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters/frame-out', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCountersFrameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear Indicates the last time the counters were cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersLastClear
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear Indicates the last time the counters were cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersLastClear
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters_last_clear`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters/last-clear', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCountersLastClear',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard The number of TLV frames received and discarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersTlvDiscard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard The number of TLV frames received and discarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersTlvDiscard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_discard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters/tlv-discard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCountersTlvDiscard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown The number of frames received with unknown TLV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersTlvUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown The number of frames received with unknown TLV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateCountersTlvUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_counters_tlv_unknown`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/counters/tlv-unknown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateCountersTlvUnknown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_enabled(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_enabled(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_enabled_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_enabled_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_enabled_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_enabled_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_interfaces_interface_state_name(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_name Reference to the LLDP Ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_interfaces_interface_state_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_interfaces_interface_state_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_interfaces_interface_state_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_interfaces_interface_state_name Reference to the LLDP Ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_interfaces_interface_state_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigLldpLldpInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_interfaces_interface_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_lldp_lldp_interfaces_interface_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpInterfacesInterfaceStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state Operational state data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_chassis_id(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_chassis_id  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_chassis_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateChassisId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_chassis_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_chassis_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_chassis_id_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_chassis_id  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_chassis_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateChassisId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_chassis_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/chassis-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateChassisId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_chassis_id_type(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_chassis_id_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_chassis_id_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateChassisIdType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_chassis_id_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_chassis_id_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_chassis_id_type_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_chassis_id_type  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_chassis_id_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateChassisIdType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_chassis_id_type" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/chassis-id-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateChassisIdType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters Global LLDP counters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters Global LLDP counters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCounters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_entries_aged_out(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_entries_aged_out  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_entries_aged_out The number of entries aged out due to timeout.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_entries_aged_out(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersEntriesAgedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_entries_aged_out_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_entries_aged_out_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_entries_aged_out_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_entries_aged_out  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_entries_aged_out The number of entries aged out due to timeout.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_entries_aged_out_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersEntriesAgedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_entries_aged_out" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/entries-aged-out', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersEntriesAgedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_frame_discard(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_frame_discard  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_frame_discard The number of LLDP frames received and discarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_frame_discard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersFrameDiscard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_frame_discard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_frame_discard_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_frame_discard_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_frame_discard  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_frame_discard The number of LLDP frames received and discarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_frame_discard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersFrameDiscard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_frame_discard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/frame-discard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersFrameDiscard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_frame_error_in(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_frame_error_in  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_frame_error_in The number of LLDP frames received with errors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_frame_error_in(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersFrameErrorIn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_frame_error_in_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_frame_error_in_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_frame_error_in_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_frame_error_in  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_frame_error_in The number of LLDP frames received with errors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_frame_error_in_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersFrameErrorIn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_frame_error_in" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/frame-error-in', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersFrameErrorIn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_frame_in(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_frame_in  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_frame_in The number of lldp frames received.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_frame_in(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersFrameIn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_frame_in_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_frame_in_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_frame_in_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_frame_in  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_frame_in The number of lldp frames received.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_frame_in_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersFrameIn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_frame_in" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/frame-in', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersFrameIn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_frame_out(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_frame_out  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_frame_out The number of frames transmitted out.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_frame_out(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersFrameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_frame_out_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_frame_out_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_frame_out_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_frame_out  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_frame_out The number of frames transmitted out.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_frame_out_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersFrameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_frame_out" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/frame-out', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersFrameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_last_clear(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_last_clear  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_last_clear Indicates the last time the counters were cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_last_clear(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersLastClear
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_last_clear_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_last_clear_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_last_clear_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_last_clear  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_last_clear Indicates the last time the counters were cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_last_clear_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersLastClear
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_last_clear" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/last-clear', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersLastClear',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_tlv_accepted(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_tlv_accepted  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_tlv_accepted The number of valid TLVs received.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_tlv_accepted(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersTlvAccepted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_tlv_accepted_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_tlv_accepted_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_tlv_accepted_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_tlv_accepted  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_tlv_accepted The number of valid TLVs received.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_tlv_accepted_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersTlvAccepted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_tlv_accepted" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/tlv-accepted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersTlvAccepted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_tlv_discard(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_tlv_discard  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_tlv_discard The number of TLV frames received and discarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_tlv_discard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersTlvDiscard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_tlv_discard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_tlv_discard_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_tlv_discard_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_tlv_discard  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_tlv_discard The number of TLV frames received and discarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_tlv_discard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersTlvDiscard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_tlv_discard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/tlv-discard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersTlvDiscard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_counters_tlv_unknown(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_tlv_unknown  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_tlv_unknown The number of frames received with unknown TLV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_tlv_unknown(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersTlvUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_counters_tlv_unknown_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_counters_tlv_unknown_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_counters_tlv_unknown_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_counters_tlv_unknown  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_counters_tlv_unknown The number of frames received with unknown TLV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_counters_tlv_unknown_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateCountersTlvUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_counters_tlv_unknown" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/counters/tlv-unknown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateCountersTlvUnknown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_enabled(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_enabled(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_enabled_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_enabled_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_enabled_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_enabled  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_enabled_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateEnabled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_enabled" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateEnabled',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_hello_timer(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_hello_timer  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_hello_timer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateHelloTimer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_hello_timer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_hello_timer_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_hello_timer_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_hello_timer  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_hello_timer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateHelloTimer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_hello_timer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/hello-timer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateHelloTimer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_suppress_tlv_advertisement(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_suppress_tlv_advertisement  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_suppress_tlv_advertisement(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateSuppressTlvAdvertisement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_suppress_tlv_advertisement_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_suppress_tlv_advertisement_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_suppress_tlv_advertisement_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_suppress_tlv_advertisement  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_suppress_tlv_advertisement_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateSuppressTlvAdvertisement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_suppress_tlv_advertisement" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/suppress-tlv-advertisement', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateSuppressTlvAdvertisement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_system_description(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_system_description  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_system_description(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateSystemDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_system_description_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_system_description_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_system_description_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_system_description  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_system_description_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateSystemDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_system_description" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/system-description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateSystemDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_lldp_lldp_state_system_name(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_system_name  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_system_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateSystemName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_lldp_lldp_state_system_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_lldp_lldp_state_system_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_lldp_lldp_state_system_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_lldp_lldp_state_system_name  # noqa: E501

        OperationId: get_openconfig_lldp_lldp_state_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_lldp_lldp_state_system_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigLldpLldpStateSystemName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_lldp_lldp_state_system_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/state/system-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigLldpLldpStateSystemName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_lldp_lldp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_lldp_lldp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp Top-level container for LLDP configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp Top-level container for LLDP configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_config_chassis_id(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_chassis_id  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_chassis_id(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigChassisId body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_config_chassis_id_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_config_chassis_id_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_config_chassis_id_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_chassis_id  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_chassis_id_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigChassisId body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_config_chassis_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_config_chassis_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/chassis-id', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_config_chassis_id_type(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_chassis_id_type  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_chassis_id_type(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigChassisIdType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_chassis_id_type  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigChassisIdType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_config_chassis_id_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_config_chassis_id_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/chassis-id-type', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_config_enabled(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_enabled(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_config_enabled_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_enabled_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/enabled', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_config_hello_timer(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_hello_timer  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_hello_timer(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigHelloTimer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_config_hello_timer_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_config_hello_timer_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_config_hello_timer_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_hello_timer  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_hello_timer_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigHelloTimer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_config_hello_timer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_config_hello_timer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/hello-timer', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigSuppressTlvAdvertisement body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigSuppressTlvAdvertisement body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_config_suppress_tlv_advertisement`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/suppress-tlv-advertisement', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_config_system_description(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_system_description  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_system_description(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigSystemDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_config_system_description_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_config_system_description_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_config_system_description_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_system_description  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_system_description_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigSystemDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_config_system_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_config_system_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/system-description', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_config_system_name(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_system_name  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_system_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigSystemName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_config_system_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_config_system_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_config_system_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_config_system_name  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_config_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_config_system_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpConfigSystemName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_config_system_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_config_system_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/system-name', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_interfaces(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_interfaces  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_interfaces Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_interfaces(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_interfaces_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_interfaces  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_interfaces Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_interfaces_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigLldpLldpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_interfaces_interface(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_interfaces_interface(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_interfaces_interface_config Configuration data for LLDP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigLldpLldpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_interfaces_interface_config Configuration data for LLDP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigLldpLldpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_lldp_lldp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_lldp_lldp_interfaces_interface_config_enabled(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_interfaces_interface_config_enabled(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigLldpLldpInterfacesInterfaceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: patch_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigLldpLldpInterfacesInterfaceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_lldp_lldp_interfaces_interface_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_lldp_lldp_interfaces_interface_config_enabled`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_lldp_lldp_interfaces_interface_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/config/enabled', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_lldp_lldp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_lldp_lldp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_lldp_lldp_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: post_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_lldp_lldp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigLldpLldpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_lldp_lldp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_lldp_lldp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_lldp_lldp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: post_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_lldp_lldp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigLldpLldpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_lldp_lldp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_lldp_lldp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_lldp_lldp_config_enabled(self, body, **kwargs):  # noqa: E501
        """post_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: post_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_lldp_lldp_config_enabled(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigLldpLldpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_lldp_lldp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_lldp_lldp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_lldp_lldp_config_enabled_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: post_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_lldp_lldp_config_enabled_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigLldpLldpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_lldp_lldp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_lldp_lldp_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_lldp_lldp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_lldp_lldp_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_lldp_lldp_interfaces_interface_config Configuration data for LLDP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_lldp_lldp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigLldpLldpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_lldp_lldp_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_lldp_lldp_interfaces_interface_config Configuration data for LLDP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigLldpLldpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_lldp_lldp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_lldp_lldp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_lldp_lldp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_lldp_lldp_interfaces_interface_config_enabled(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: post_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_lldp_lldp_interfaces_interface_config_enabled(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigLldpLldpInterfacesInterfaceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: post_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigLldpLldpInterfacesInterfaceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_lldp_lldp_interfaces_interface_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_lldp_lldp_interfaces_interface_config_enabled`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_lldp_lldp_interfaces_interface_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_lldp_lldp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_lldp_lldp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_lldp_lldp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp  # noqa: E501

        OperationId: put_openconfig_lldp_lldp Top-level container for LLDP configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp  # noqa: E501

        OperationId: put_openconfig_lldp_lldp Top-level container for LLDP configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config Configuration data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_config_chassis_id(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_chassis_id  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_chassis_id(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigChassisId body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_config_chassis_id_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_config_chassis_id_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_config_chassis_id_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_chassis_id  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_chassis_id The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_chassis_id_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigChassisId body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_config_chassis_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_config_chassis_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/chassis-id', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_config_chassis_id_type(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_chassis_id_type  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_chassis_id_type(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigChassisIdType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_chassis_id_type  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_chassis_id_type This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_chassis_id_type_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigChassisIdType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_config_chassis_id_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_config_chassis_id_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/chassis-id-type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_config_enabled(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_enabled(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_config_enabled_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_config_enabled_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_enabled  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_enabled System level state of the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_enabled_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/enabled', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_config_hello_timer(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_hello_timer  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_hello_timer(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigHelloTimer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_config_hello_timer_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_config_hello_timer_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_config_hello_timer_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_hello_timer  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_hello_timer System level hello timer for the LLDP protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_hello_timer_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigHelloTimer body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_config_hello_timer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_config_hello_timer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/hello-timer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_config_suppress_tlv_advertisement(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_suppress_tlv_advertisement  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_suppress_tlv_advertisement(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigSuppressTlvAdvertisement body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_suppress_tlv_advertisement  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_suppress_tlv_advertisement Indicates whether the local system should suppress the advertisement of particular TLVs with the LLDP PDUs that it transmits. Where a TLV type is specified within this list, it should not be included in any LLDP PDU transmitted by the local agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_suppress_tlv_advertisement_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigSuppressTlvAdvertisement body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_config_suppress_tlv_advertisement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_config_suppress_tlv_advertisement`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/suppress-tlv-advertisement', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_config_system_description(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_system_description  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_system_description(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigSystemDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_config_system_description_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_config_system_description_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_config_system_description_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_system_description  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_system_description The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_system_description_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigSystemDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_config_system_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_config_system_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/system-description', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_config_system_name(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_system_name  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_system_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigSystemName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_config_system_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_config_system_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_config_system_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_config_system_name  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_config_system_name The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_config_system_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpConfigSystemName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_config_system_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_config_system_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/config/system-name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_interfaces(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_interfaces  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_interfaces Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_interfaces(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_interfaces_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_interfaces  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_interfaces Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_interfaces_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigLldpLldpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_interfaces_interface(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_interfaces_interface(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_interfaces_interface_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_interfaces_interface List of interfaces on which LLDP is enabled / available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_interfaces_interface_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigLldpLldpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_interfaces_interface_config Configuration data for LLDP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigLldpLldpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_interfaces_interface_config Configuration data for LLDP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigLldpLldpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_lldp_lldp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_lldp_lldp_interfaces_interface_config_enabled(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_interfaces_interface_config_enabled(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigLldpLldpInterfacesInterfaceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_lldp_lldp_interfaces_interface_config_enabled  # noqa: E501

        OperationId: put_openconfig_lldp_lldp_interfaces_interface_config_enabled Enable or disable the LLDP protocol on the interface.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_lldp_lldp_interfaces_interface_config_enabled_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigLldpLldpInterfacesInterfaceConfigEnabled body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_lldp_lldp_interfaces_interface_config_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_lldp_lldp_interfaces_interface_config_enabled`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_lldp_lldp_interfaces_interface_config_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-lldp:lldp/interfaces/interface={name}/config/enabled', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
