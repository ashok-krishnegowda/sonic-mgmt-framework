# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_lldp_client.models.get_openconfig_lldp_lldp_openconfiglldplldp_state_counters import GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters  # noqa: F401,E501


class GetOpenconfigLldpLldpOpenconfiglldplldpState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'hello_timer': 'int',
        'suppress_tlv_advertisement': 'list[str]',
        'system_name': 'str',
        'system_description': 'str',
        'chassis_id': 'str',
        'chassis_id_type': 'str',
        'counters': 'GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters'
    }

    attribute_map = {
        'enabled': 'enabled',
        'hello_timer': 'hello-timer',
        'suppress_tlv_advertisement': 'suppress-tlv-advertisement',
        'system_name': 'system-name',
        'system_description': 'system-description',
        'chassis_id': 'chassis-id',
        'chassis_id_type': 'chassis-id-type',
        'counters': 'counters'
    }

    def __init__(self, enabled=None, hello_timer=None, suppress_tlv_advertisement=None, system_name=None, system_description=None, chassis_id=None, chassis_id_type=None, counters=None):  # noqa: E501
        """GetOpenconfigLldpLldpOpenconfiglldplldpState - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._hello_timer = None
        self._suppress_tlv_advertisement = None
        self._system_name = None
        self._system_description = None
        self._chassis_id = None
        self._chassis_id_type = None
        self._counters = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if hello_timer is not None:
            self.hello_timer = hello_timer
        if suppress_tlv_advertisement is not None:
            self.suppress_tlv_advertisement = suppress_tlv_advertisement
        if system_name is not None:
            self.system_name = system_name
        if system_description is not None:
            self.system_description = system_description
        if chassis_id is not None:
            self.chassis_id = chassis_id
        if chassis_id_type is not None:
            self.chassis_id_type = chassis_id_type
        if counters is not None:
            self.counters = counters

    @property
    def enabled(self):
        """Gets the enabled of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501


        :return: The enabled of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GetOpenconfigLldpLldpOpenconfiglldplldpState.


        :param enabled: The enabled of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def hello_timer(self):
        """Gets the hello_timer of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501


        :return: The hello_timer of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :rtype: int
        """
        return self._hello_timer

    @hello_timer.setter
    def hello_timer(self, hello_timer):
        """Sets the hello_timer of this GetOpenconfigLldpLldpOpenconfiglldplldpState.


        :param hello_timer: The hello_timer of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :type: int
        """

        self._hello_timer = hello_timer

    @property
    def suppress_tlv_advertisement(self):
        """Gets the suppress_tlv_advertisement of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501


        :return: The suppress_tlv_advertisement of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :rtype: list[str]
        """
        return self._suppress_tlv_advertisement

    @suppress_tlv_advertisement.setter
    def suppress_tlv_advertisement(self, suppress_tlv_advertisement):
        """Sets the suppress_tlv_advertisement of this GetOpenconfigLldpLldpOpenconfiglldplldpState.


        :param suppress_tlv_advertisement: The suppress_tlv_advertisement of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :type: list[str]
        """

        self._suppress_tlv_advertisement = suppress_tlv_advertisement

    @property
    def system_name(self):
        """Gets the system_name of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501


        :return: The system_name of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this GetOpenconfigLldpLldpOpenconfiglldplldpState.


        :param system_name: The system_name of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def system_description(self):
        """Gets the system_description of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501


        :return: The system_description of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :rtype: str
        """
        return self._system_description

    @system_description.setter
    def system_description(self, system_description):
        """Sets the system_description of this GetOpenconfigLldpLldpOpenconfiglldplldpState.


        :param system_description: The system_description of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :type: str
        """

        self._system_description = system_description

    @property
    def chassis_id(self):
        """Gets the chassis_id of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501


        :return: The chassis_id of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :rtype: str
        """
        return self._chassis_id

    @chassis_id.setter
    def chassis_id(self, chassis_id):
        """Sets the chassis_id of this GetOpenconfigLldpLldpOpenconfiglldplldpState.


        :param chassis_id: The chassis_id of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :type: str
        """

        self._chassis_id = chassis_id

    @property
    def chassis_id_type(self):
        """Gets the chassis_id_type of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501


        :return: The chassis_id_type of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :rtype: str
        """
        return self._chassis_id_type

    @chassis_id_type.setter
    def chassis_id_type(self, chassis_id_type):
        """Sets the chassis_id_type of this GetOpenconfigLldpLldpOpenconfiglldplldpState.


        :param chassis_id_type: The chassis_id_type of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :type: str
        """
        allowed_values = ["CHASSIS_COMPONENT", "INTERFACE_ALIAS", "PORT_COMPONENT", "MAC_ADDRESS", "NETWORK_ADDRESS", "INTERFACE_NAME", "LOCAL"]  # noqa: E501
        if chassis_id_type not in allowed_values:
            raise ValueError(
                "Invalid value for `chassis_id_type` ({0}), must be one of {1}"  # noqa: E501
                .format(chassis_id_type, allowed_values)
            )

        self._chassis_id_type = chassis_id_type

    @property
    def counters(self):
        """Gets the counters of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501


        :return: The counters of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :rtype: GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this GetOpenconfigLldpLldpOpenconfiglldplldpState.


        :param counters: The counters of this GetOpenconfigLldpLldpOpenconfiglldplldpState.  # noqa: E501
        :type: GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters
        """

        self._counters = counters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigLldpLldpOpenconfiglldplldpState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigLldpLldpOpenconfiglldplldpState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
