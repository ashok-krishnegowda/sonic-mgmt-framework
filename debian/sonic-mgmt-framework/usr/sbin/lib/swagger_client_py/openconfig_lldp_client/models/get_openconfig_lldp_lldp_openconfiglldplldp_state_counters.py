# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frame_in': 'int',
        'frame_out': 'int',
        'frame_error_in': 'int',
        'frame_discard': 'int',
        'tlv_discard': 'int',
        'tlv_unknown': 'int',
        'last_clear': 'str',
        'tlv_accepted': 'int',
        'entries_aged_out': 'int'
    }

    attribute_map = {
        'frame_in': 'frame-in',
        'frame_out': 'frame-out',
        'frame_error_in': 'frame-error-in',
        'frame_discard': 'frame-discard',
        'tlv_discard': 'tlv-discard',
        'tlv_unknown': 'tlv-unknown',
        'last_clear': 'last-clear',
        'tlv_accepted': 'tlv-accepted',
        'entries_aged_out': 'entries-aged-out'
    }

    def __init__(self, frame_in=None, frame_out=None, frame_error_in=None, frame_discard=None, tlv_discard=None, tlv_unknown=None, last_clear=None, tlv_accepted=None, entries_aged_out=None):  # noqa: E501
        """GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters - a model defined in Swagger"""  # noqa: E501

        self._frame_in = None
        self._frame_out = None
        self._frame_error_in = None
        self._frame_discard = None
        self._tlv_discard = None
        self._tlv_unknown = None
        self._last_clear = None
        self._tlv_accepted = None
        self._entries_aged_out = None
        self.discriminator = None

        if frame_in is not None:
            self.frame_in = frame_in
        if frame_out is not None:
            self.frame_out = frame_out
        if frame_error_in is not None:
            self.frame_error_in = frame_error_in
        if frame_discard is not None:
            self.frame_discard = frame_discard
        if tlv_discard is not None:
            self.tlv_discard = tlv_discard
        if tlv_unknown is not None:
            self.tlv_unknown = tlv_unknown
        if last_clear is not None:
            self.last_clear = last_clear
        if tlv_accepted is not None:
            self.tlv_accepted = tlv_accepted
        if entries_aged_out is not None:
            self.entries_aged_out = entries_aged_out

    @property
    def frame_in(self):
        """Gets the frame_in of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The frame_in of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._frame_in

    @frame_in.setter
    def frame_in(self, frame_in):
        """Sets the frame_in of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param frame_in: The frame_in of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: int
        """

        self._frame_in = frame_in

    @property
    def frame_out(self):
        """Gets the frame_out of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The frame_out of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._frame_out

    @frame_out.setter
    def frame_out(self, frame_out):
        """Sets the frame_out of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param frame_out: The frame_out of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: int
        """

        self._frame_out = frame_out

    @property
    def frame_error_in(self):
        """Gets the frame_error_in of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The frame_error_in of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._frame_error_in

    @frame_error_in.setter
    def frame_error_in(self, frame_error_in):
        """Sets the frame_error_in of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param frame_error_in: The frame_error_in of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: int
        """

        self._frame_error_in = frame_error_in

    @property
    def frame_discard(self):
        """Gets the frame_discard of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The frame_discard of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._frame_discard

    @frame_discard.setter
    def frame_discard(self, frame_discard):
        """Sets the frame_discard of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param frame_discard: The frame_discard of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: int
        """

        self._frame_discard = frame_discard

    @property
    def tlv_discard(self):
        """Gets the tlv_discard of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The tlv_discard of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._tlv_discard

    @tlv_discard.setter
    def tlv_discard(self, tlv_discard):
        """Sets the tlv_discard of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param tlv_discard: The tlv_discard of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: int
        """

        self._tlv_discard = tlv_discard

    @property
    def tlv_unknown(self):
        """Gets the tlv_unknown of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The tlv_unknown of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._tlv_unknown

    @tlv_unknown.setter
    def tlv_unknown(self, tlv_unknown):
        """Sets the tlv_unknown of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param tlv_unknown: The tlv_unknown of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: int
        """

        self._tlv_unknown = tlv_unknown

    @property
    def last_clear(self):
        """Gets the last_clear of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The last_clear of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: str
        """
        return self._last_clear

    @last_clear.setter
    def last_clear(self, last_clear):
        """Sets the last_clear of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param last_clear: The last_clear of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: str
        """

        self._last_clear = last_clear

    @property
    def tlv_accepted(self):
        """Gets the tlv_accepted of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The tlv_accepted of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._tlv_accepted

    @tlv_accepted.setter
    def tlv_accepted(self, tlv_accepted):
        """Sets the tlv_accepted of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param tlv_accepted: The tlv_accepted of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: int
        """

        self._tlv_accepted = tlv_accepted

    @property
    def entries_aged_out(self):
        """Gets the entries_aged_out of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501


        :return: The entries_aged_out of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :rtype: int
        """
        return self._entries_aged_out

    @entries_aged_out.setter
    def entries_aged_out(self, entries_aged_out):
        """Sets the entries_aged_out of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.


        :param entries_aged_out: The entries_aged_out of this GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters.  # noqa: E501
        :type: int
        """

        self._entries_aged_out = entries_aged_out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigLldpLldpOpenconfiglldplldpStateCounters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
