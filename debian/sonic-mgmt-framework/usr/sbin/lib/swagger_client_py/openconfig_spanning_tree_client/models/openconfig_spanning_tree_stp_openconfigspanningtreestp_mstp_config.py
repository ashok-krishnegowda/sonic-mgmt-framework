# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'revision': 'int',
        'max_hop': 'int',
        'hello_time': 'int',
        'max_age': 'int',
        'forwarding_delay': 'int',
        'hold_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'revision': 'revision',
        'max_hop': 'max-hop',
        'hello_time': 'hello-time',
        'max_age': 'max-age',
        'forwarding_delay': 'forwarding-delay',
        'hold_count': 'hold-count'
    }

    def __init__(self, name=None, revision=None, max_hop=None, hello_time=None, max_age=None, forwarding_delay=None, hold_count=None):  # noqa: E501
        """OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._revision = None
        self._max_hop = None
        self._hello_time = None
        self._max_age = None
        self._forwarding_delay = None
        self._hold_count = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if revision is not None:
            self.revision = revision
        if max_hop is not None:
            self.max_hop = max_hop
        if hello_time is not None:
            self.hello_time = hello_time
        if max_age is not None:
            self.max_age = max_age
        if forwarding_delay is not None:
            self.forwarding_delay = forwarding_delay
        if hold_count is not None:
            self.hold_count = hold_count

    @property
    def name(self):
        """Gets the name of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501


        :return: The name of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.


        :param name: The name of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def revision(self):
        """Gets the revision of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501


        :return: The revision of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.


        :param revision: The revision of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def max_hop(self):
        """Gets the max_hop of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501


        :return: The max_hop of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_hop

    @max_hop.setter
    def max_hop(self, max_hop):
        """Sets the max_hop of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.


        :param max_hop: The max_hop of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :type: int
        """

        self._max_hop = max_hop

    @property
    def hello_time(self):
        """Gets the hello_time of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501


        :return: The hello_time of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :rtype: int
        """
        return self._hello_time

    @hello_time.setter
    def hello_time(self, hello_time):
        """Sets the hello_time of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.


        :param hello_time: The hello_time of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :type: int
        """

        self._hello_time = hello_time

    @property
    def max_age(self):
        """Gets the max_age of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501


        :return: The max_age of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.


        :param max_age: The max_age of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :type: int
        """

        self._max_age = max_age

    @property
    def forwarding_delay(self):
        """Gets the forwarding_delay of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501


        :return: The forwarding_delay of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :rtype: int
        """
        return self._forwarding_delay

    @forwarding_delay.setter
    def forwarding_delay(self, forwarding_delay):
        """Sets the forwarding_delay of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.


        :param forwarding_delay: The forwarding_delay of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :type: int
        """

        self._forwarding_delay = forwarding_delay

    @property
    def hold_count(self):
        """Gets the hold_count of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501


        :return: The hold_count of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :rtype: int
        """
        return self._hold_count

    @hold_count.setter
    def hold_count(self, hold_count):
        """Sets the hold_count of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.


        :param hold_count: The hold_count of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig.  # noqa: E501
        :type: int
        """

        self._hold_count = hold_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstpConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
