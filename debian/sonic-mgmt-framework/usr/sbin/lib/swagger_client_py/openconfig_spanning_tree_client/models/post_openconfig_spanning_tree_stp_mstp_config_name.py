# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_mstp_config_forwarding_delay import OpenconfigSpanningTreeStpMstpConfigForwardingDelay  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_mstp_config_hello_time import OpenconfigSpanningTreeStpMstpConfigHelloTime  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_mstp_config_hold_count import OpenconfigSpanningTreeStpMstpConfigHoldCount  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_mstp_config_max_age import OpenconfigSpanningTreeStpMstpConfigMaxAge  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_mstp_config_max_hop import OpenconfigSpanningTreeStpMstpConfigMaxHop  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_mstp_config_name import OpenconfigSpanningTreeStpMstpConfigName  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_mstp_config_revision import OpenconfigSpanningTreeStpMstpConfigRevision  # noqa: F401,E501


class PostOpenconfigSpanningTreeStpMstpConfigName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_spanning_treename': 'str',
        'openconfig_spanning_treerevision': 'int',
        'openconfig_spanning_treemax_hop': 'int',
        'openconfig_spanning_treehello_time': 'int',
        'openconfig_spanning_treemax_age': 'int',
        'openconfig_spanning_treeforwarding_delay': 'int',
        'openconfig_spanning_treehold_count': 'int'
    }

    attribute_map = {
        'openconfig_spanning_treename': 'openconfig-spanning-tree:name',
        'openconfig_spanning_treerevision': 'openconfig-spanning-tree:revision',
        'openconfig_spanning_treemax_hop': 'openconfig-spanning-tree:max-hop',
        'openconfig_spanning_treehello_time': 'openconfig-spanning-tree:hello-time',
        'openconfig_spanning_treemax_age': 'openconfig-spanning-tree:max-age',
        'openconfig_spanning_treeforwarding_delay': 'openconfig-spanning-tree:forwarding-delay',
        'openconfig_spanning_treehold_count': 'openconfig-spanning-tree:hold-count'
    }

    def __init__(self, openconfig_spanning_treename=None, openconfig_spanning_treerevision=None, openconfig_spanning_treemax_hop=None, openconfig_spanning_treehello_time=None, openconfig_spanning_treemax_age=None, openconfig_spanning_treeforwarding_delay=None, openconfig_spanning_treehold_count=None):  # noqa: E501
        """PostOpenconfigSpanningTreeStpMstpConfigName - a model defined in Swagger"""  # noqa: E501

        self._openconfig_spanning_treename = None
        self._openconfig_spanning_treerevision = None
        self._openconfig_spanning_treemax_hop = None
        self._openconfig_spanning_treehello_time = None
        self._openconfig_spanning_treemax_age = None
        self._openconfig_spanning_treeforwarding_delay = None
        self._openconfig_spanning_treehold_count = None
        self.discriminator = None

        if openconfig_spanning_treename is not None:
            self.openconfig_spanning_treename = openconfig_spanning_treename
        if openconfig_spanning_treerevision is not None:
            self.openconfig_spanning_treerevision = openconfig_spanning_treerevision
        if openconfig_spanning_treemax_hop is not None:
            self.openconfig_spanning_treemax_hop = openconfig_spanning_treemax_hop
        if openconfig_spanning_treehello_time is not None:
            self.openconfig_spanning_treehello_time = openconfig_spanning_treehello_time
        if openconfig_spanning_treemax_age is not None:
            self.openconfig_spanning_treemax_age = openconfig_spanning_treemax_age
        if openconfig_spanning_treeforwarding_delay is not None:
            self.openconfig_spanning_treeforwarding_delay = openconfig_spanning_treeforwarding_delay
        if openconfig_spanning_treehold_count is not None:
            self.openconfig_spanning_treehold_count = openconfig_spanning_treehold_count

    @property
    def openconfig_spanning_treename(self):
        """Gets the openconfig_spanning_treename of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501


        :return: The openconfig_spanning_treename of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_spanning_treename

    @openconfig_spanning_treename.setter
    def openconfig_spanning_treename(self, openconfig_spanning_treename):
        """Sets the openconfig_spanning_treename of this PostOpenconfigSpanningTreeStpMstpConfigName.


        :param openconfig_spanning_treename: The openconfig_spanning_treename of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :type: str
        """

        self._openconfig_spanning_treename = openconfig_spanning_treename

    @property
    def openconfig_spanning_treerevision(self):
        """Gets the openconfig_spanning_treerevision of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501


        :return: The openconfig_spanning_treerevision of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_spanning_treerevision

    @openconfig_spanning_treerevision.setter
    def openconfig_spanning_treerevision(self, openconfig_spanning_treerevision):
        """Sets the openconfig_spanning_treerevision of this PostOpenconfigSpanningTreeStpMstpConfigName.


        :param openconfig_spanning_treerevision: The openconfig_spanning_treerevision of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :type: int
        """

        self._openconfig_spanning_treerevision = openconfig_spanning_treerevision

    @property
    def openconfig_spanning_treemax_hop(self):
        """Gets the openconfig_spanning_treemax_hop of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501


        :return: The openconfig_spanning_treemax_hop of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_spanning_treemax_hop

    @openconfig_spanning_treemax_hop.setter
    def openconfig_spanning_treemax_hop(self, openconfig_spanning_treemax_hop):
        """Sets the openconfig_spanning_treemax_hop of this PostOpenconfigSpanningTreeStpMstpConfigName.


        :param openconfig_spanning_treemax_hop: The openconfig_spanning_treemax_hop of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :type: int
        """

        self._openconfig_spanning_treemax_hop = openconfig_spanning_treemax_hop

    @property
    def openconfig_spanning_treehello_time(self):
        """Gets the openconfig_spanning_treehello_time of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501


        :return: The openconfig_spanning_treehello_time of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_spanning_treehello_time

    @openconfig_spanning_treehello_time.setter
    def openconfig_spanning_treehello_time(self, openconfig_spanning_treehello_time):
        """Sets the openconfig_spanning_treehello_time of this PostOpenconfigSpanningTreeStpMstpConfigName.


        :param openconfig_spanning_treehello_time: The openconfig_spanning_treehello_time of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :type: int
        """

        self._openconfig_spanning_treehello_time = openconfig_spanning_treehello_time

    @property
    def openconfig_spanning_treemax_age(self):
        """Gets the openconfig_spanning_treemax_age of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501


        :return: The openconfig_spanning_treemax_age of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_spanning_treemax_age

    @openconfig_spanning_treemax_age.setter
    def openconfig_spanning_treemax_age(self, openconfig_spanning_treemax_age):
        """Sets the openconfig_spanning_treemax_age of this PostOpenconfigSpanningTreeStpMstpConfigName.


        :param openconfig_spanning_treemax_age: The openconfig_spanning_treemax_age of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :type: int
        """

        self._openconfig_spanning_treemax_age = openconfig_spanning_treemax_age

    @property
    def openconfig_spanning_treeforwarding_delay(self):
        """Gets the openconfig_spanning_treeforwarding_delay of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501


        :return: The openconfig_spanning_treeforwarding_delay of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_spanning_treeforwarding_delay

    @openconfig_spanning_treeforwarding_delay.setter
    def openconfig_spanning_treeforwarding_delay(self, openconfig_spanning_treeforwarding_delay):
        """Sets the openconfig_spanning_treeforwarding_delay of this PostOpenconfigSpanningTreeStpMstpConfigName.


        :param openconfig_spanning_treeforwarding_delay: The openconfig_spanning_treeforwarding_delay of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :type: int
        """

        self._openconfig_spanning_treeforwarding_delay = openconfig_spanning_treeforwarding_delay

    @property
    def openconfig_spanning_treehold_count(self):
        """Gets the openconfig_spanning_treehold_count of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501


        :return: The openconfig_spanning_treehold_count of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_spanning_treehold_count

    @openconfig_spanning_treehold_count.setter
    def openconfig_spanning_treehold_count(self, openconfig_spanning_treehold_count):
        """Sets the openconfig_spanning_treehold_count of this PostOpenconfigSpanningTreeStpMstpConfigName.


        :param openconfig_spanning_treehold_count: The openconfig_spanning_treehold_count of this PostOpenconfigSpanningTreeStpMstpConfigName.  # noqa: E501
        :type: int
        """

        self._openconfig_spanning_treehold_count = openconfig_spanning_treehold_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOpenconfigSpanningTreeStpMstpConfigName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOpenconfigSpanningTreeStpMstpConfigName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
