# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled_protocol': 'list[str]',
        'bridge_assurance': 'bool',
        'etherchannel_misconfig_guard': 'bool',
        'bpduguard_timeout_recovery': 'int',
        'loop_guard': 'bool',
        'bpdu_guard': 'bool',
        'bpdu_filter': 'bool'
    }

    attribute_map = {
        'enabled_protocol': 'enabled-protocol',
        'bridge_assurance': 'bridge-assurance',
        'etherchannel_misconfig_guard': 'etherchannel-misconfig-guard',
        'bpduguard_timeout_recovery': 'bpduguard-timeout-recovery',
        'loop_guard': 'loop-guard',
        'bpdu_guard': 'bpdu-guard',
        'bpdu_filter': 'bpdu-filter'
    }

    def __init__(self, enabled_protocol=None, bridge_assurance=None, etherchannel_misconfig_guard=None, bpduguard_timeout_recovery=None, loop_guard=None, bpdu_guard=None, bpdu_filter=None):  # noqa: E501
        """OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig - a model defined in Swagger"""  # noqa: E501

        self._enabled_protocol = None
        self._bridge_assurance = None
        self._etherchannel_misconfig_guard = None
        self._bpduguard_timeout_recovery = None
        self._loop_guard = None
        self._bpdu_guard = None
        self._bpdu_filter = None
        self.discriminator = None

        if enabled_protocol is not None:
            self.enabled_protocol = enabled_protocol
        if bridge_assurance is not None:
            self.bridge_assurance = bridge_assurance
        if etherchannel_misconfig_guard is not None:
            self.etherchannel_misconfig_guard = etherchannel_misconfig_guard
        if bpduguard_timeout_recovery is not None:
            self.bpduguard_timeout_recovery = bpduguard_timeout_recovery
        if loop_guard is not None:
            self.loop_guard = loop_guard
        if bpdu_guard is not None:
            self.bpdu_guard = bpdu_guard
        if bpdu_filter is not None:
            self.bpdu_filter = bpdu_filter

    @property
    def enabled_protocol(self):
        """Gets the enabled_protocol of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501


        :return: The enabled_protocol of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_protocol

    @enabled_protocol.setter
    def enabled_protocol(self, enabled_protocol):
        """Sets the enabled_protocol of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.


        :param enabled_protocol: The enabled_protocol of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :type: list[str]
        """

        self._enabled_protocol = enabled_protocol

    @property
    def bridge_assurance(self):
        """Gets the bridge_assurance of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501


        :return: The bridge_assurance of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._bridge_assurance

    @bridge_assurance.setter
    def bridge_assurance(self, bridge_assurance):
        """Sets the bridge_assurance of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.


        :param bridge_assurance: The bridge_assurance of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._bridge_assurance = bridge_assurance

    @property
    def etherchannel_misconfig_guard(self):
        """Gets the etherchannel_misconfig_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501


        :return: The etherchannel_misconfig_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._etherchannel_misconfig_guard

    @etherchannel_misconfig_guard.setter
    def etherchannel_misconfig_guard(self, etherchannel_misconfig_guard):
        """Sets the etherchannel_misconfig_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.


        :param etherchannel_misconfig_guard: The etherchannel_misconfig_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._etherchannel_misconfig_guard = etherchannel_misconfig_guard

    @property
    def bpduguard_timeout_recovery(self):
        """Gets the bpduguard_timeout_recovery of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501


        :return: The bpduguard_timeout_recovery of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :rtype: int
        """
        return self._bpduguard_timeout_recovery

    @bpduguard_timeout_recovery.setter
    def bpduguard_timeout_recovery(self, bpduguard_timeout_recovery):
        """Sets the bpduguard_timeout_recovery of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.


        :param bpduguard_timeout_recovery: The bpduguard_timeout_recovery of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :type: int
        """

        self._bpduguard_timeout_recovery = bpduguard_timeout_recovery

    @property
    def loop_guard(self):
        """Gets the loop_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501


        :return: The loop_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._loop_guard

    @loop_guard.setter
    def loop_guard(self, loop_guard):
        """Sets the loop_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.


        :param loop_guard: The loop_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._loop_guard = loop_guard

    @property
    def bpdu_guard(self):
        """Gets the bpdu_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501


        :return: The bpdu_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._bpdu_guard

    @bpdu_guard.setter
    def bpdu_guard(self, bpdu_guard):
        """Sets the bpdu_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.


        :param bpdu_guard: The bpdu_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._bpdu_guard = bpdu_guard

    @property
    def bpdu_filter(self):
        """Gets the bpdu_filter of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501


        :return: The bpdu_filter of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._bpdu_filter

    @bpdu_filter.setter
    def bpdu_filter(self, bpdu_filter):
        """Sets the bpdu_filter of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.


        :param bpdu_filter: The bpdu_filter of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._bpdu_filter = bpdu_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobalConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
