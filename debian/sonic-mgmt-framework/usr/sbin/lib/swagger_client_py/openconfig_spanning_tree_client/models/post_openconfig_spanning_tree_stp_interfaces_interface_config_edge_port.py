# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter import OpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduFilter  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard import OpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduGuard  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_interfaces_interface_config_edge_port import OpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_interfaces_interface_config_guard import OpenconfigSpanningTreeStpInterfacesInterfaceConfigGuard  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_interfaces_interface_config_link_type import OpenconfigSpanningTreeStpInterfacesInterfaceConfigLinkType  # noqa: F401,E501


class PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_spanning_treeedge_port': 'str',
        'openconfig_spanning_treelink_type': 'str',
        'openconfig_spanning_treeguard': 'str',
        'openconfig_spanning_treebpdu_guard': 'bool',
        'openconfig_spanning_treebpdu_filter': 'bool'
    }

    attribute_map = {
        'openconfig_spanning_treeedge_port': 'openconfig-spanning-tree:edge-port',
        'openconfig_spanning_treelink_type': 'openconfig-spanning-tree:link-type',
        'openconfig_spanning_treeguard': 'openconfig-spanning-tree:guard',
        'openconfig_spanning_treebpdu_guard': 'openconfig-spanning-tree:bpdu-guard',
        'openconfig_spanning_treebpdu_filter': 'openconfig-spanning-tree:bpdu-filter'
    }

    def __init__(self, openconfig_spanning_treeedge_port=None, openconfig_spanning_treelink_type=None, openconfig_spanning_treeguard=None, openconfig_spanning_treebpdu_guard=None, openconfig_spanning_treebpdu_filter=None):  # noqa: E501
        """PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort - a model defined in Swagger"""  # noqa: E501

        self._openconfig_spanning_treeedge_port = None
        self._openconfig_spanning_treelink_type = None
        self._openconfig_spanning_treeguard = None
        self._openconfig_spanning_treebpdu_guard = None
        self._openconfig_spanning_treebpdu_filter = None
        self.discriminator = None

        if openconfig_spanning_treeedge_port is not None:
            self.openconfig_spanning_treeedge_port = openconfig_spanning_treeedge_port
        if openconfig_spanning_treelink_type is not None:
            self.openconfig_spanning_treelink_type = openconfig_spanning_treelink_type
        if openconfig_spanning_treeguard is not None:
            self.openconfig_spanning_treeguard = openconfig_spanning_treeguard
        if openconfig_spanning_treebpdu_guard is not None:
            self.openconfig_spanning_treebpdu_guard = openconfig_spanning_treebpdu_guard
        if openconfig_spanning_treebpdu_filter is not None:
            self.openconfig_spanning_treebpdu_filter = openconfig_spanning_treebpdu_filter

    @property
    def openconfig_spanning_treeedge_port(self):
        """Gets the openconfig_spanning_treeedge_port of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501


        :return: The openconfig_spanning_treeedge_port of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_spanning_treeedge_port

    @openconfig_spanning_treeedge_port.setter
    def openconfig_spanning_treeedge_port(self, openconfig_spanning_treeedge_port):
        """Sets the openconfig_spanning_treeedge_port of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.


        :param openconfig_spanning_treeedge_port: The openconfig_spanning_treeedge_port of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :type: str
        """

        self._openconfig_spanning_treeedge_port = openconfig_spanning_treeedge_port

    @property
    def openconfig_spanning_treelink_type(self):
        """Gets the openconfig_spanning_treelink_type of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501


        :return: The openconfig_spanning_treelink_type of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_spanning_treelink_type

    @openconfig_spanning_treelink_type.setter
    def openconfig_spanning_treelink_type(self, openconfig_spanning_treelink_type):
        """Sets the openconfig_spanning_treelink_type of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.


        :param openconfig_spanning_treelink_type: The openconfig_spanning_treelink_type of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :type: str
        """
        allowed_values = ["P2P", "SHARED"]  # noqa: E501
        if openconfig_spanning_treelink_type not in allowed_values:
            raise ValueError(
                "Invalid value for `openconfig_spanning_treelink_type` ({0}), must be one of {1}"  # noqa: E501
                .format(openconfig_spanning_treelink_type, allowed_values)
            )

        self._openconfig_spanning_treelink_type = openconfig_spanning_treelink_type

    @property
    def openconfig_spanning_treeguard(self):
        """Gets the openconfig_spanning_treeguard of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501


        :return: The openconfig_spanning_treeguard of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_spanning_treeguard

    @openconfig_spanning_treeguard.setter
    def openconfig_spanning_treeguard(self, openconfig_spanning_treeguard):
        """Sets the openconfig_spanning_treeguard of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.


        :param openconfig_spanning_treeguard: The openconfig_spanning_treeguard of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROOT", "LOOP", "NONE"]  # noqa: E501
        if openconfig_spanning_treeguard not in allowed_values:
            raise ValueError(
                "Invalid value for `openconfig_spanning_treeguard` ({0}), must be one of {1}"  # noqa: E501
                .format(openconfig_spanning_treeguard, allowed_values)
            )

        self._openconfig_spanning_treeguard = openconfig_spanning_treeguard

    @property
    def openconfig_spanning_treebpdu_guard(self):
        """Gets the openconfig_spanning_treebpdu_guard of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501


        :return: The openconfig_spanning_treebpdu_guard of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_spanning_treebpdu_guard

    @openconfig_spanning_treebpdu_guard.setter
    def openconfig_spanning_treebpdu_guard(self, openconfig_spanning_treebpdu_guard):
        """Sets the openconfig_spanning_treebpdu_guard of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.


        :param openconfig_spanning_treebpdu_guard: The openconfig_spanning_treebpdu_guard of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :type: bool
        """

        self._openconfig_spanning_treebpdu_guard = openconfig_spanning_treebpdu_guard

    @property
    def openconfig_spanning_treebpdu_filter(self):
        """Gets the openconfig_spanning_treebpdu_filter of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501


        :return: The openconfig_spanning_treebpdu_filter of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_spanning_treebpdu_filter

    @openconfig_spanning_treebpdu_filter.setter
    def openconfig_spanning_treebpdu_filter(self, openconfig_spanning_treebpdu_filter):
        """Sets the openconfig_spanning_treebpdu_filter of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.


        :param openconfig_spanning_treebpdu_filter: The openconfig_spanning_treebpdu_filter of this PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort.  # noqa: E501
        :type: bool
        """

        self._openconfig_spanning_treebpdu_filter = openconfig_spanning_treebpdu_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
