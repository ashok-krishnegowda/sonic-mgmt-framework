# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_global import OpenconfigSpanningTreeStpGlobal  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_interfaces import OpenconfigSpanningTreeStpInterfaces  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_mstp import OpenconfigSpanningTreeStpMstp  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_openconfigspanningtreestp_global import OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobal  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_openconfigspanningtreestp_interfaces import OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfaces  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_openconfigspanningtreestp_mstp import OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstp  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_openconfigspanningtreestp_rapidpvst import OpenconfigSpanningTreeStpOpenconfigspanningtreestpRapidpvst  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_openconfigspanningtreestp_rstp import OpenconfigSpanningTreeStpOpenconfigspanningtreestpRstp  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_rapid_pvst import OpenconfigSpanningTreeStpRapidPvst  # noqa: F401,E501
from openconfig_spanning_tree_client.models.openconfig_spanning_tree_stp_rstp import OpenconfigSpanningTreeStpRstp  # noqa: F401,E501


class PostOpenconfigSpanningTreeStpGlobal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_spanning_treeglobal': 'OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobal',
        'openconfig_spanning_treerstp': 'OpenconfigSpanningTreeStpOpenconfigspanningtreestpRstp',
        'openconfig_spanning_treemstp': 'OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstp',
        'openconfig_spanning_treerapid_pvst': 'OpenconfigSpanningTreeStpOpenconfigspanningtreestpRapidpvst',
        'openconfig_spanning_treeinterfaces': 'OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfaces'
    }

    attribute_map = {
        'openconfig_spanning_treeglobal': 'openconfig-spanning-tree:global',
        'openconfig_spanning_treerstp': 'openconfig-spanning-tree:rstp',
        'openconfig_spanning_treemstp': 'openconfig-spanning-tree:mstp',
        'openconfig_spanning_treerapid_pvst': 'openconfig-spanning-tree:rapid-pvst',
        'openconfig_spanning_treeinterfaces': 'openconfig-spanning-tree:interfaces'
    }

    def __init__(self, openconfig_spanning_treeglobal=None, openconfig_spanning_treerstp=None, openconfig_spanning_treemstp=None, openconfig_spanning_treerapid_pvst=None, openconfig_spanning_treeinterfaces=None):  # noqa: E501
        """PostOpenconfigSpanningTreeStpGlobal - a model defined in Swagger"""  # noqa: E501

        self._openconfig_spanning_treeglobal = None
        self._openconfig_spanning_treerstp = None
        self._openconfig_spanning_treemstp = None
        self._openconfig_spanning_treerapid_pvst = None
        self._openconfig_spanning_treeinterfaces = None
        self.discriminator = None

        if openconfig_spanning_treeglobal is not None:
            self.openconfig_spanning_treeglobal = openconfig_spanning_treeglobal
        if openconfig_spanning_treerstp is not None:
            self.openconfig_spanning_treerstp = openconfig_spanning_treerstp
        if openconfig_spanning_treemstp is not None:
            self.openconfig_spanning_treemstp = openconfig_spanning_treemstp
        if openconfig_spanning_treerapid_pvst is not None:
            self.openconfig_spanning_treerapid_pvst = openconfig_spanning_treerapid_pvst
        if openconfig_spanning_treeinterfaces is not None:
            self.openconfig_spanning_treeinterfaces = openconfig_spanning_treeinterfaces

    @property
    def openconfig_spanning_treeglobal(self):
        """Gets the openconfig_spanning_treeglobal of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501


        :return: The openconfig_spanning_treeglobal of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :rtype: OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobal
        """
        return self._openconfig_spanning_treeglobal

    @openconfig_spanning_treeglobal.setter
    def openconfig_spanning_treeglobal(self, openconfig_spanning_treeglobal):
        """Sets the openconfig_spanning_treeglobal of this PostOpenconfigSpanningTreeStpGlobal.


        :param openconfig_spanning_treeglobal: The openconfig_spanning_treeglobal of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :type: OpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobal
        """

        self._openconfig_spanning_treeglobal = openconfig_spanning_treeglobal

    @property
    def openconfig_spanning_treerstp(self):
        """Gets the openconfig_spanning_treerstp of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501


        :return: The openconfig_spanning_treerstp of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :rtype: OpenconfigSpanningTreeStpOpenconfigspanningtreestpRstp
        """
        return self._openconfig_spanning_treerstp

    @openconfig_spanning_treerstp.setter
    def openconfig_spanning_treerstp(self, openconfig_spanning_treerstp):
        """Sets the openconfig_spanning_treerstp of this PostOpenconfigSpanningTreeStpGlobal.


        :param openconfig_spanning_treerstp: The openconfig_spanning_treerstp of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :type: OpenconfigSpanningTreeStpOpenconfigspanningtreestpRstp
        """

        self._openconfig_spanning_treerstp = openconfig_spanning_treerstp

    @property
    def openconfig_spanning_treemstp(self):
        """Gets the openconfig_spanning_treemstp of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501


        :return: The openconfig_spanning_treemstp of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :rtype: OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstp
        """
        return self._openconfig_spanning_treemstp

    @openconfig_spanning_treemstp.setter
    def openconfig_spanning_treemstp(self, openconfig_spanning_treemstp):
        """Sets the openconfig_spanning_treemstp of this PostOpenconfigSpanningTreeStpGlobal.


        :param openconfig_spanning_treemstp: The openconfig_spanning_treemstp of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :type: OpenconfigSpanningTreeStpOpenconfigspanningtreestpMstp
        """

        self._openconfig_spanning_treemstp = openconfig_spanning_treemstp

    @property
    def openconfig_spanning_treerapid_pvst(self):
        """Gets the openconfig_spanning_treerapid_pvst of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501


        :return: The openconfig_spanning_treerapid_pvst of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :rtype: OpenconfigSpanningTreeStpOpenconfigspanningtreestpRapidpvst
        """
        return self._openconfig_spanning_treerapid_pvst

    @openconfig_spanning_treerapid_pvst.setter
    def openconfig_spanning_treerapid_pvst(self, openconfig_spanning_treerapid_pvst):
        """Sets the openconfig_spanning_treerapid_pvst of this PostOpenconfigSpanningTreeStpGlobal.


        :param openconfig_spanning_treerapid_pvst: The openconfig_spanning_treerapid_pvst of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :type: OpenconfigSpanningTreeStpOpenconfigspanningtreestpRapidpvst
        """

        self._openconfig_spanning_treerapid_pvst = openconfig_spanning_treerapid_pvst

    @property
    def openconfig_spanning_treeinterfaces(self):
        """Gets the openconfig_spanning_treeinterfaces of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501


        :return: The openconfig_spanning_treeinterfaces of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :rtype: OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfaces
        """
        return self._openconfig_spanning_treeinterfaces

    @openconfig_spanning_treeinterfaces.setter
    def openconfig_spanning_treeinterfaces(self, openconfig_spanning_treeinterfaces):
        """Sets the openconfig_spanning_treeinterfaces of this PostOpenconfigSpanningTreeStpGlobal.


        :param openconfig_spanning_treeinterfaces: The openconfig_spanning_treeinterfaces of this PostOpenconfigSpanningTreeStpGlobal.  # noqa: E501
        :type: OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfaces
        """

        self._openconfig_spanning_treeinterfaces = openconfig_spanning_treeinterfaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOpenconfigSpanningTreeStpGlobal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOpenconfigSpanningTreeStpGlobal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
