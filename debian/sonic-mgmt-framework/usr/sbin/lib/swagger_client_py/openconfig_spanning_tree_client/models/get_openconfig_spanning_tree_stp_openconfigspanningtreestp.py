# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_spanning_tree_client.models.get_openconfig_spanning_tree_stp_openconfigspanningtreestp_global import GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobal  # noqa: F401,E501
from openconfig_spanning_tree_client.models.get_openconfig_spanning_tree_stp_openconfigspanningtreestp_interfaces import GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfaces  # noqa: F401,E501
from openconfig_spanning_tree_client.models.get_openconfig_spanning_tree_stp_openconfigspanningtreestp_mstp import GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpMstp  # noqa: F401,E501
from openconfig_spanning_tree_client.models.get_openconfig_spanning_tree_stp_openconfigspanningtreestp_rapidpvst import GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRapidpvst  # noqa: F401,E501
from openconfig_spanning_tree_client.models.get_openconfig_spanning_tree_stp_openconfigspanningtreestp_rstp import GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstp  # noqa: F401,E501


class GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_global': 'GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobal',
        'rstp': 'GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstp',
        'mstp': 'GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpMstp',
        'rapid_pvst': 'GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRapidpvst',
        'interfaces': 'GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfaces'
    }

    attribute_map = {
        '_global': 'global',
        'rstp': 'rstp',
        'mstp': 'mstp',
        'rapid_pvst': 'rapid-pvst',
        'interfaces': 'interfaces'
    }

    def __init__(self, _global=None, rstp=None, mstp=None, rapid_pvst=None, interfaces=None):  # noqa: E501
        """GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp - a model defined in Swagger"""  # noqa: E501

        self.__global = None
        self._rstp = None
        self._mstp = None
        self._rapid_pvst = None
        self._interfaces = None
        self.discriminator = None

        if _global is not None:
            self._global = _global
        if rstp is not None:
            self.rstp = rstp
        if mstp is not None:
            self.mstp = mstp
        if rapid_pvst is not None:
            self.rapid_pvst = rapid_pvst
        if interfaces is not None:
            self.interfaces = interfaces

    @property
    def _global(self):
        """Gets the _global of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501


        :return: The _global of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :rtype: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobal
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.


        :param _global: The _global of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :type: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpGlobal
        """

        self.__global = _global

    @property
    def rstp(self):
        """Gets the rstp of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501


        :return: The rstp of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :rtype: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstp
        """
        return self._rstp

    @rstp.setter
    def rstp(self, rstp):
        """Sets the rstp of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.


        :param rstp: The rstp of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :type: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstp
        """

        self._rstp = rstp

    @property
    def mstp(self):
        """Gets the mstp of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501


        :return: The mstp of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :rtype: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpMstp
        """
        return self._mstp

    @mstp.setter
    def mstp(self, mstp):
        """Sets the mstp of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.


        :param mstp: The mstp of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :type: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpMstp
        """

        self._mstp = mstp

    @property
    def rapid_pvst(self):
        """Gets the rapid_pvst of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501


        :return: The rapid_pvst of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :rtype: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRapidpvst
        """
        return self._rapid_pvst

    @rapid_pvst.setter
    def rapid_pvst(self, rapid_pvst):
        """Sets the rapid_pvst of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.


        :param rapid_pvst: The rapid_pvst of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :type: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRapidpvst
        """

        self._rapid_pvst = rapid_pvst

    @property
    def interfaces(self):
        """Gets the interfaces of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501


        :return: The interfaces of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :rtype: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfaces
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.


        :param interfaces: The interfaces of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp.  # noqa: E501
        :type: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfaces
        """

        self._interfaces = interfaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSpanningTreeStpOpenconfigspanningtreestp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
