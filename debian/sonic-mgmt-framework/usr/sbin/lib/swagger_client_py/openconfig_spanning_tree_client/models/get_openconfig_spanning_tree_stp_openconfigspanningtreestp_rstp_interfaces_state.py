# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_spanning_tree_client.models.get_openconfig_spanning_tree_stp_openconfigspanningtreestp_rstp_interfaces_state_counters import GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesStateCounters  # noqa: F401,E501


class GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'cost': 'int',
        'port_priority': 'int',
        'port_num': 'int',
        'role': 'str',
        'port_state': 'str',
        'designated_root_priority': 'int',
        'designated_root_address': 'str',
        'designated_cost': 'int',
        'designated_bridge_priority': 'int',
        'designated_bridge_address': 'str',
        'designated_port_priority': 'int',
        'designated_port_num': 'int',
        'forward_transisitions': 'int',
        'counters': 'GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesStateCounters'
    }

    attribute_map = {
        'name': 'name',
        'cost': 'cost',
        'port_priority': 'port-priority',
        'port_num': 'port-num',
        'role': 'role',
        'port_state': 'port-state',
        'designated_root_priority': 'designated-root-priority',
        'designated_root_address': 'designated-root-address',
        'designated_cost': 'designated-cost',
        'designated_bridge_priority': 'designated-bridge-priority',
        'designated_bridge_address': 'designated-bridge-address',
        'designated_port_priority': 'designated-port-priority',
        'designated_port_num': 'designated-port-num',
        'forward_transisitions': 'forward-transisitions',
        'counters': 'counters'
    }

    def __init__(self, name=None, cost=None, port_priority=None, port_num=None, role=None, port_state=None, designated_root_priority=None, designated_root_address=None, designated_cost=None, designated_bridge_priority=None, designated_bridge_address=None, designated_port_priority=None, designated_port_num=None, forward_transisitions=None, counters=None):  # noqa: E501
        """GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._cost = None
        self._port_priority = None
        self._port_num = None
        self._role = None
        self._port_state = None
        self._designated_root_priority = None
        self._designated_root_address = None
        self._designated_cost = None
        self._designated_bridge_priority = None
        self._designated_bridge_address = None
        self._designated_port_priority = None
        self._designated_port_num = None
        self._forward_transisitions = None
        self._counters = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if cost is not None:
            self.cost = cost
        if port_priority is not None:
            self.port_priority = port_priority
        if port_num is not None:
            self.port_num = port_num
        if role is not None:
            self.role = role
        if port_state is not None:
            self.port_state = port_state
        if designated_root_priority is not None:
            self.designated_root_priority = designated_root_priority
        if designated_root_address is not None:
            self.designated_root_address = designated_root_address
        if designated_cost is not None:
            self.designated_cost = designated_cost
        if designated_bridge_priority is not None:
            self.designated_bridge_priority = designated_bridge_priority
        if designated_bridge_address is not None:
            self.designated_bridge_address = designated_bridge_address
        if designated_port_priority is not None:
            self.designated_port_priority = designated_port_priority
        if designated_port_num is not None:
            self.designated_port_num = designated_port_num
        if forward_transisitions is not None:
            self.forward_transisitions = forward_transisitions
        if counters is not None:
            self.counters = counters

    @property
    def name(self):
        """Gets the name of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The name of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param name: The name of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cost(self):
        """Gets the cost of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The cost of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param cost: The cost of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._cost = cost

    @property
    def port_priority(self):
        """Gets the port_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The port_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._port_priority

    @port_priority.setter
    def port_priority(self, port_priority):
        """Sets the port_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param port_priority: The port_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._port_priority = port_priority

    @property
    def port_num(self):
        """Gets the port_num of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The port_num of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._port_num

    @port_num.setter
    def port_num(self, port_num):
        """Sets the port_num of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param port_num: The port_num of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._port_num = port_num

    @property
    def role(self):
        """Gets the role of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The role of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param role: The role of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def port_state(self):
        """Gets the port_state of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The port_state of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._port_state

    @port_state.setter
    def port_state(self, port_state):
        """Sets the port_state of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param port_state: The port_state of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: str
        """

        self._port_state = port_state

    @property
    def designated_root_priority(self):
        """Gets the designated_root_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The designated_root_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._designated_root_priority

    @designated_root_priority.setter
    def designated_root_priority(self, designated_root_priority):
        """Sets the designated_root_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param designated_root_priority: The designated_root_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._designated_root_priority = designated_root_priority

    @property
    def designated_root_address(self):
        """Gets the designated_root_address of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The designated_root_address of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._designated_root_address

    @designated_root_address.setter
    def designated_root_address(self, designated_root_address):
        """Sets the designated_root_address of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param designated_root_address: The designated_root_address of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: str
        """

        self._designated_root_address = designated_root_address

    @property
    def designated_cost(self):
        """Gets the designated_cost of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The designated_cost of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._designated_cost

    @designated_cost.setter
    def designated_cost(self, designated_cost):
        """Sets the designated_cost of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param designated_cost: The designated_cost of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._designated_cost = designated_cost

    @property
    def designated_bridge_priority(self):
        """Gets the designated_bridge_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The designated_bridge_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._designated_bridge_priority

    @designated_bridge_priority.setter
    def designated_bridge_priority(self, designated_bridge_priority):
        """Sets the designated_bridge_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param designated_bridge_priority: The designated_bridge_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._designated_bridge_priority = designated_bridge_priority

    @property
    def designated_bridge_address(self):
        """Gets the designated_bridge_address of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The designated_bridge_address of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._designated_bridge_address

    @designated_bridge_address.setter
    def designated_bridge_address(self, designated_bridge_address):
        """Sets the designated_bridge_address of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param designated_bridge_address: The designated_bridge_address of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: str
        """

        self._designated_bridge_address = designated_bridge_address

    @property
    def designated_port_priority(self):
        """Gets the designated_port_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The designated_port_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._designated_port_priority

    @designated_port_priority.setter
    def designated_port_priority(self, designated_port_priority):
        """Sets the designated_port_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param designated_port_priority: The designated_port_priority of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._designated_port_priority = designated_port_priority

    @property
    def designated_port_num(self):
        """Gets the designated_port_num of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The designated_port_num of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._designated_port_num

    @designated_port_num.setter
    def designated_port_num(self, designated_port_num):
        """Sets the designated_port_num of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param designated_port_num: The designated_port_num of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._designated_port_num = designated_port_num

    @property
    def forward_transisitions(self):
        """Gets the forward_transisitions of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The forward_transisitions of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._forward_transisitions

    @forward_transisitions.setter
    def forward_transisitions(self, forward_transisitions):
        """Sets the forward_transisitions of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param forward_transisitions: The forward_transisitions of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: int
        """

        self._forward_transisitions = forward_transisitions

    @property
    def counters(self):
        """Gets the counters of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501


        :return: The counters of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :rtype: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesStateCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.


        :param counters: The counters of this GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState.  # noqa: E501
        :type: GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesStateCounters
        """

        self._counters = counters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigSpanningTreeStpOpenconfigspanningtreestpRstpInterfacesState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
