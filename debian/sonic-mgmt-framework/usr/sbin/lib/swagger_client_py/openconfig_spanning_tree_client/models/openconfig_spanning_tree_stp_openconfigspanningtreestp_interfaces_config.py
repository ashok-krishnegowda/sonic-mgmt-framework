# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'edge_port': 'str',
        'link_type': 'str',
        'guard': 'str',
        'bpdu_guard': 'bool',
        'bpdu_filter': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'edge_port': 'edge-port',
        'link_type': 'link-type',
        'guard': 'guard',
        'bpdu_guard': 'bpdu-guard',
        'bpdu_filter': 'bpdu-filter'
    }

    def __init__(self, name=None, edge_port=None, link_type=None, guard=None, bpdu_guard=None, bpdu_filter=None):  # noqa: E501
        """OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._edge_port = None
        self._link_type = None
        self._guard = None
        self._bpdu_guard = None
        self._bpdu_filter = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if edge_port is not None:
            self.edge_port = edge_port
        if link_type is not None:
            self.link_type = link_type
        if guard is not None:
            self.guard = guard
        if bpdu_guard is not None:
            self.bpdu_guard = bpdu_guard
        if bpdu_filter is not None:
            self.bpdu_filter = bpdu_filter

    @property
    def name(self):
        """Gets the name of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501


        :return: The name of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.


        :param name: The name of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def edge_port(self):
        """Gets the edge_port of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501


        :return: The edge_port of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :rtype: str
        """
        return self._edge_port

    @edge_port.setter
    def edge_port(self, edge_port):
        """Sets the edge_port of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.


        :param edge_port: The edge_port of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :type: str
        """

        self._edge_port = edge_port

    @property
    def link_type(self):
        """Gets the link_type of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501


        :return: The link_type of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.


        :param link_type: The link_type of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["P2P", "SHARED"]  # noqa: E501
        if link_type not in allowed_values:
            raise ValueError(
                "Invalid value for `link_type` ({0}), must be one of {1}"  # noqa: E501
                .format(link_type, allowed_values)
            )

        self._link_type = link_type

    @property
    def guard(self):
        """Gets the guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501


        :return: The guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :rtype: str
        """
        return self._guard

    @guard.setter
    def guard(self, guard):
        """Sets the guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.


        :param guard: The guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROOT", "LOOP", "NONE"]  # noqa: E501
        if guard not in allowed_values:
            raise ValueError(
                "Invalid value for `guard` ({0}), must be one of {1}"  # noqa: E501
                .format(guard, allowed_values)
            )

        self._guard = guard

    @property
    def bpdu_guard(self):
        """Gets the bpdu_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501


        :return: The bpdu_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :rtype: bool
        """
        return self._bpdu_guard

    @bpdu_guard.setter
    def bpdu_guard(self, bpdu_guard):
        """Sets the bpdu_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.


        :param bpdu_guard: The bpdu_guard of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :type: bool
        """

        self._bpdu_guard = bpdu_guard

    @property
    def bpdu_filter(self):
        """Gets the bpdu_filter of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501


        :return: The bpdu_filter of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :rtype: bool
        """
        return self._bpdu_filter

    @bpdu_filter.setter
    def bpdu_filter(self, bpdu_filter):
        """Sets the bpdu_filter of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.


        :param bpdu_filter: The bpdu_filter of this OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig.  # noqa: E501
        :type: bool
        """

        self._bpdu_filter = bpdu_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigSpanningTreeStpOpenconfigspanningtreestpInterfacesConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
