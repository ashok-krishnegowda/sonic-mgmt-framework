# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openconfig_spanning_tree_client.api_client import ApiClient


class OpenconfigSpanningTreeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_list_openconfig_spanning_tree_stp_interfaces_interface(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_interfaces_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `delete_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp Top-level container for spanning tree configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp Top-level container for spanning tree configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global_config_bpdu_filter(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_bpdu_filter  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_bpdu_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_bpdu_filter  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global_config_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpdu-filter', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global_config_bpdu_guard(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_bpdu_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_bpdu_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_bpdu_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global_config_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpdu-guard', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpduguard-timeout-recovery', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global_config_bridge_assurance(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_bridge_assurance  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_bridge_assurance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_bridge_assurance  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global_config_bridge_assurance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bridge-assurance', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global_config_enabled_protocol(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_enabled_protocol(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global_config_enabled_protocol" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/enabled-protocol', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/etherchannel-misconfig-guard', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_global_config_loop_guard(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_loop_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_loop_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_global_config_loop_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_global_config_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_global_config_loop_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/loop-guard', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_interfaces(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_interfaces_interface(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/bpdu-filter', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/bpdu-guard', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/edge-port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_interfaces_interface_config_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/guard', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_interfaces_interface_config_link_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/link-type', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp Multi Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp Multi Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/forwarding-delay', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_config_hello_time(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_hello_time  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_hello_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_hello_time  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/hello-time', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_config_hold_count(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_hold_count  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_hold_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_hold_count  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/hold-count', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_config_max_age(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_max_age  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_max_age(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_max_age  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/max-age', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_config_max_hop(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_max_hop  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_max_hop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_max_hop  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_config_max_hop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/max-hop', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_config_name(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_config_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/name', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_config_revision(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_revision  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_revision(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_config_revision  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_config_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_config_revision" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/revision', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances Configuration and operation data for MSTP instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances Configuration and operation data for MSTP instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_mst_instances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, mst_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority(self, mst_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config/bridge-priority', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(self, mst_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config/vlan', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces(self, mst_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(self, mst_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config/cost', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority(self, mst_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config/port-priority', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst Rapid per vlan Spanning-tree protocol configuration and operational data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst Rapid per vlan Spanning-tree protocol configuration and operational data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/bridge-priority', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/forwarding-delay', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/hello-time', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/hold-count', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/max-age', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(self, vlan_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config/cost', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority(self, vlan_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config/port-priority', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp Rapid Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp Rapid Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_config(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_config_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/bridge-priority', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/forwarding-delay', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_config_hello_time(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_hello_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/hello-time', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_config_hold_count(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_hold_count  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_hold_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_hold_count  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/hold-count', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_config_max_age(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_max_age  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_max_age(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_config_max_age  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/max-age', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_interfaces(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_interfaces  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_interfaces  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config/cost', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config/port-priority', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_spanning_tree_stp_interfaces_interface(self, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_interfaces_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp Top-level container for spanning tree configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp Top-level container for spanning tree configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_config(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_config_bpdu_filter(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_bpdu_filter  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_bpdu_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigBpduFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_bpdu_filter  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigBpduFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_config_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpdu-filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalConfigBpduFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_config_bpdu_guard(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_bpdu_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_bpdu_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigBpduGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_bpdu_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigBpduGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_config_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpdu-guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalConfigBpduGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigBpduguardTimeoutRecovery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigBpduguardTimeoutRecovery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpduguard-timeout-recovery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalConfigBpduguardTimeoutRecovery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_config_bridge_assurance(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_bridge_assurance  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_bridge_assurance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigBridgeAssurance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_bridge_assurance  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigBridgeAssurance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_config_bridge_assurance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bridge-assurance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalConfigBridgeAssurance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_config_enabled_protocol(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_enabled_protocol(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_config_enabled_protocol" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/enabled-protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigEtherchannelMisconfigGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigEtherchannelMisconfigGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/etherchannel-misconfig-guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalConfigEtherchannelMisconfigGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_config_loop_guard(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_loop_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_loop_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigLoopGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_config_loop_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_config_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalConfigLoopGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_config_loop_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/loop-guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalConfigLoopGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_state(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state Global spanning tree state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state Global spanning tree state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_state_bpdu_filter(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_bpdu_filter  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_bpdu_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateBpduFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_state_bpdu_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_state_bpdu_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_state_bpdu_filter_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_bpdu_filter  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_bpdu_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateBpduFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_state_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/state/bpdu-filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalStateBpduFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_state_bpdu_guard(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_bpdu_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_bpdu_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateBpduGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_state_bpdu_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_state_bpdu_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_state_bpdu_guard_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_bpdu_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_bpdu_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateBpduGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_state_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/state/bpdu-guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalStateBpduGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateBpduguardTimeoutRecovery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateBpduguardTimeoutRecovery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_state_bpduguard_timeout_recovery" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/state/bpduguard-timeout-recovery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalStateBpduguardTimeoutRecovery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_state_bridge_assurance(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_bridge_assurance  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_bridge_assurance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateBridgeAssurance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_state_bridge_assurance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_state_bridge_assurance_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_state_bridge_assurance_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_bridge_assurance  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_bridge_assurance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateBridgeAssurance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_state_bridge_assurance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/state/bridge-assurance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalStateBridgeAssurance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_state_enabled_protocol(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_enabled_protocol  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_enabled_protocol(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateEnabledProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_state_enabled_protocol_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_state_enabled_protocol_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_state_enabled_protocol_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_enabled_protocol  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_enabled_protocol_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateEnabledProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_state_enabled_protocol" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/state/enabled-protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalStateEnabledProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateEtherchannelMisconfigGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateEtherchannelMisconfigGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_state_etherchannel_misconfig_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/state/etherchannel-misconfig-guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalStateEtherchannelMisconfigGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_global_state_loop_guard(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_loop_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_loop_guard(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateLoopGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_global_state_loop_guard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_global_state_loop_guard_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_global_state_loop_guard_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_global_state_loop_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_global_state_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_global_state_loop_guard_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpGlobalStateLoopGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_global_state_loop_guard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/state/loop-guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpGlobalStateLoopGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_config(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config Configuration data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config Configuration data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/bpdu-filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/bpdu-guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/edge-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_guard(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_guard(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_config_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_config_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigLinkType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigLinkType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_config_link_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/link-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceConfigLinkType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_state(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state Operational state data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_state_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_state_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state Operational state data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateBpduFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateBpduFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/state/bpdu-filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceStateBpduFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateBpduGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateBpduGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_state_bpdu_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/state/bpdu-guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceStateBpduGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateEdgePort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateEdgePort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_state_edge_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/state/edge-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceStateEdgePort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_guard(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_guard(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_state_guard_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_state_guard_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_guard_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_guard  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_guard_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateGuard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_state_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_state_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/state/guard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceStateGuard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateLinkType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateLinkType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_state_link_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/state/link-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceStateLinkType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_name(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_name Reference to the STP Ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_interfaces_interface_state_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_interfaces_interface_state_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_interfaces_interface_state_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_interfaces_interface_state_name Reference to the STP Ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_interfaces_interface_state_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_interfaces_interface_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_interfaces_interface_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpInterfacesInterfaceStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp Multi Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp Multi Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_config(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/forwarding-delay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpConfigForwardingDelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_config_hello_time(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_hello_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/hello-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpConfigHelloTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_config_hold_count(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_hold_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/hold-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpConfigHoldCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_config_max_age(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_max_age(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/max-age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpConfigMaxAge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_config_max_hop(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_max_hop  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_max_hop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigMaxHop
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_max_hop  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigMaxHop
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_config_max_hop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/max-hop', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpConfigMaxHop',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_config_name(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_config_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpConfigName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_config_revision(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_revision  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_revision(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigRevision
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_config_revision  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_config_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpConfigRevision
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_config_revision" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/revision', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpConfigRevision',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances Configuration and operation data for MSTP instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpMstInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances Configuration and operation data for MSTP instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpMstInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config Configuration data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config Configuration data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config/bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config/vlan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config/cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config/port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigPortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state Operational state data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state Operational state data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters The BPDU packet transmition statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters The BPDU packet transmition statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCounters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received The number of BPDU packet received  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCountersBpduReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received The number of BPDU packet received  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCountersBpduReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_received`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/counters/bpdu-received', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCountersBpduReceived',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent The number of BPDU packet sent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCountersBpduSent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent The number of BPDU packet sent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCountersBpduSent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_counters_bpdu_sent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/counters/bpdu-sent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateCountersBpduSent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address The bridge address of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address The bridge address of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/designated-bridge-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedBridgeAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority The bridge priority of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority The bridge priority of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/designated-bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost The path cost of the Designated Port of the segment connected to this port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost The path cost of the Designated Port of the segment connected to this port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/designated-cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num The Port number of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedPortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num The Port number of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedPortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_num`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/designated-port-num', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedPortNum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority The Port priority of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority The Port priority of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/designated-port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedPortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address The bridge address of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address The bridge address of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/designated-root-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedRootAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority The bridge priority of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority The bridge priority of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_designated_root_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/designated-root-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateDesignatedRootPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions The number of times this port has transitioned from the Learning state to the Forwarding state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateForwardTransisitions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions The number of times this port has transitioned from the Learning state to the Forwarding state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateForwardTransisitions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_forward_transisitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/forward-transisitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateForwardTransisitions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name Reference to the STP ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name Reference to the STP ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num The port number of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num The port number of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_num`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/port-num', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortNum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state The current state of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state The current state of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_port_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/port-state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStatePortState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role The current role of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role_with_http_info(mst_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role_with_http_info(mst_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role_with_http_info(self, mst_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role The current role of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role_with_http_info(mst_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_state_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/state/role', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceStateRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state Operational data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state Operational data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address A unique 48-bit Universally Administered MAC Address assigned to the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address A unique 48-bit Universally Administered MAC Address assigned to the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/bridge-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateBridgeAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address The bridge address of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address The bridge address of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/designated-root-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateDesignatedRootAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority The bridge priority of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority The bridge priority of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_designated_root_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/designated-root-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateDesignatedRootPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateHoldTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateHoldTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_hold_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/hold-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateHoldTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change The time at which the last topology change was detected by the bridge entity. The value is expressed relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateLastTopologyChange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change The time at which the last topology change was detected by the bridge entity. The value is expressed relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateLastTopologyChange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_last_topology_change`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/last-topology-change', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateLastTopologyChange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id In an MSTP Bridge, an MSTID, i.e., a value used to identify a spanning tree (or MST) instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateMstId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id In an MSTP Bridge, an MSTID, i.e., a value used to identify a spanning tree (or MST) instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateMstId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_mst_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/mst-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateMstId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost The cost of the path to the root as seen from this bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateRootCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost The cost of the path to the root as seen from this bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateRootCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/root-cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateRootCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port The port number of the port which offers the lowest cost path from this bridge to the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateRootPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port The port number of the port which offers the lowest cost path from this bridge to the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateRootPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_root_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/root-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateRootPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes The total number of topology changes detected by this bridge since the management entity was last reset or initialized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateTopologyChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes The total number of topology changes detected by this bridge since the management entity was last reset or initialized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateTopologyChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_topology_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/topology-changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateTopologyChanges',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateVlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan_with_http_info(mst_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan_with_http_info(mst_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan_with_http_info(self, mst_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan_with_http_info(mst_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateVlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `get_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_state_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/state/vlan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceStateVlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_state(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state Operational data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state Operational data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_state_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/state/forwarding-delay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpStateForwardingDelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_state_hello_time(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_hello_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_state_hello_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_state_hello_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_state_hello_time_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_hello_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_state_hello_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/state/hello-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpStateHelloTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_state_hold_count(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_hold_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_state_hold_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_state_hold_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_state_hold_count_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_hold_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_state_hold_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/state/hold-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpStateHoldCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_state_max_age(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_max_age(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_state_max_age_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_state_max_age_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_state_max_age_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_max_age_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_state_max_age" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/state/max-age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpStateMaxAge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_state_max_hop(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_max_hop  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_max_hop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateMaxHop
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_state_max_hop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_state_max_hop_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_state_max_hop_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_max_hop  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_max_hop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateMaxHop
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_state_max_hop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/state/max-hop', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpStateMaxHop',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_state_name(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_state_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_state_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_state_name_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_state_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_mstp_state_revision(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_revision  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_revision(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateRevision
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_mstp_state_revision_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_mstp_state_revision_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_mstp_state_revision_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_mstp_state_revision  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_mstp_state_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_mstp_state_revision_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpMstpStateRevision
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_mstp_state_revision" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/state/revision', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpMstpStateRevision',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst Rapid per vlan Spanning-tree protocol configuration and operational data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRapidPvst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst Rapid per vlan Spanning-tree protocol configuration and operational data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRapidPvst
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config Configuration data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config Configuration data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanConfigBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/forwarding-delay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanConfigForwardingDelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/hello-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/hold-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanConfigHoldCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanConfigMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/max-age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanConfigMaxAge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config/cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config/port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigPortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state Operational state data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state Operational state data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters The BPDU packet transmition statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters The BPDU packet transmition statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCounters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received The number of BPDU packet received  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCountersBpduReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received The number of BPDU packet received  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCountersBpduReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_received`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/counters/bpdu-received', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCountersBpduReceived',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent The number of BPDU packet sent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCountersBpduSent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent The number of BPDU packet sent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCountersBpduSent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_counters_bpdu_sent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/counters/bpdu-sent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateCountersBpduSent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address The bridge address of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address The bridge address of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/designated-bridge-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedBridgeAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority The bridge priority of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority The bridge priority of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/designated-bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost The path cost of the Designated Port of the segment connected to this port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost The path cost of the Designated Port of the segment connected to this port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/designated-cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num The Port number of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedPortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num The Port number of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedPortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_num`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/designated-port-num', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedPortNum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority The Port priority of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority The Port priority of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/designated-port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedPortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address The bridge address of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address The bridge address of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/designated-root-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedRootAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority The bridge priority of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority The bridge priority of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_designated_root_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/designated-root-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateDesignatedRootPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions The number of times this port has transitioned from the Learning state to the Forwarding state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateForwardTransisitions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions The number of times this port has transitioned from the Learning state to the Forwarding state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateForwardTransisitions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_forward_transisitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/forward-transisitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateForwardTransisitions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name Reference to the STP ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name Reference to the STP ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num The port number of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num The port number of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_num`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/port-num', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortNum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state The current state of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state The current state of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_port_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/port-state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStatePortState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role The current role of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role_with_http_info(vlan_id, name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role_with_http_info(self, vlan_id, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role The current role of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role_with_http_info(vlan_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_state_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/state/role', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceStateRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state Operational data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state Operational data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address A unique 48-bit Universally Administered MAC Address assigned to the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address A unique 48-bit Universally Administered MAC Address assigned to the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/bridge-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateBridgeAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address The bridge address of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address The bridge address of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/designated-root-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateDesignatedRootAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority The bridge priority of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority The bridge priority of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_designated_root_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/designated-root-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateDesignatedRootPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/forwarding-delay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateForwardingDelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/hello-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateHelloTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/hold-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateHoldCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateHoldTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateHoldTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_hold_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/hold-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateHoldTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change The time at which the last topology change was detected by the bridge entity. The value is expressed relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateLastTopologyChange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change The time at which the last topology change was detected by the bridge entity. The value is expressed relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateLastTopologyChange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_last_topology_change`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/last-topology-change', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateLastTopologyChange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/max-age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateMaxAge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost The cost of the path to the root as seen from this bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateRootCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost The cost of the path to the root as seen from this bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateRootCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/root-cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateRootCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port The port number of the port which offers the lowest cost path from this bridge to the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateRootPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port The port number of the port which offers the lowest cost path from this bridge to the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateRootPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_root_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/root-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateRootPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes The total number of topology changes detected by this bridge since the management entity was last reset or initialized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateTopologyChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes The total number of topology changes detected by this bridge since the management entity was last reset or initialized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateTopologyChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_topology_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/topology-changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateTopologyChanges',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id Interface VLAN ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateVlanId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id_with_http_info(vlan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id_with_http_info(vlan_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id_with_http_info(self, vlan_id, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id Interface VLAN ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id_with_http_info(vlan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRapidPvstVlanStateVlanId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `get_openconfig_spanning_tree_stp_rapid_pvst_vlan_state_vlan_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/state/vlan-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRapidPvstVlanStateVlanId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp Rapid Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp Rapid Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_config(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_config_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_config_bridge_priority(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_bridge_priority(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpConfigBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/forwarding-delay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpConfigForwardingDelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_config_hello_time(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_hello_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/hello-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpConfigHelloTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_config_hold_count(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_hold_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/hold-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpConfigHoldCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_config_max_age(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_max_age(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_config_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpConfigMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/max-age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpConfigMaxAge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config/cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config/port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigPortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state Operational state data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state Operational state data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters The BPDU packet transmition statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters The BPDU packet transmition statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCounters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCounters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received The number of BPDU packet received  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCountersBpduReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received The number of BPDU packet received  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCountersBpduReceived
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_received`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/counters/bpdu-received', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCountersBpduReceived',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent The number of BPDU packet sent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCountersBpduSent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent The number of BPDU packet sent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCountersBpduSent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_counters_bpdu_sent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/counters/bpdu-sent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateCountersBpduSent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address The bridge address of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address The bridge address of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/designated-bridge-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedBridgeAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority The bridge priority of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority The bridge priority of the bridge that this port considers to be the designated bridge for this port's segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/designated-bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost The path cost of the Designated Port of the segment connected to this port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost The path cost of the Designated Port of the segment connected to this port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/designated-cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num The Port number of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedPortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num The Port number of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedPortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_num`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/designated-port-num', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedPortNum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority The Port priority of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority The Port priority of the port on the Designated Bridge for this port's segment, two octet string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedPortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/designated-port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedPortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address The bridge address of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address The bridge address of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/designated-root-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedRootAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority The bridge priority of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority The bridge priority of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_designated_root_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/designated-root-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateDesignatedRootPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions The number of times this port has transitioned from the Learning state to the Forwarding state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateForwardTransisitions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions The number of times this port has transitioned from the Learning state to the Forwarding state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateForwardTransisitions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_forward_transisitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/forward-transisitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateForwardTransisitions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name Reference to the STP ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name Reference to the STP ethernet interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num The port number of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num The port number of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortNum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_num`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/port-num', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortNum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/port-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state The current state of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state The current state of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_port_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/port-state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStatePortState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role The current role of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role The current role of the bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :return: GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_spanning_tree_stp_rstp_interfaces_interface_state_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/state/role', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpInterfacesInterfaceStateRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state Operational state data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state Operational state data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_bridge_address(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_bridge_address A unique 48-bit Universally Administered MAC Address assigned to the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_bridge_address(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_bridge_address_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_bridge_address_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_bridge_address_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_bridge_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_bridge_address A unique 48-bit Universally Administered MAC Address assigned to the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_bridge_address_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateBridgeAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_bridge_address" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/bridge-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateBridgeAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_bridge_priority(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_bridge_priority(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_bridge_priority_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_bridge_priority_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_bridge_priority_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_bridge_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_bridge_priority_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateBridgePriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/bridge-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateBridgePriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_designated_root_address(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_designated_root_address The bridge address of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_designated_root_address(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_designated_root_address_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_designated_root_address_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_designated_root_address_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_designated_root_address  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_designated_root_address The bridge address of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_designated_root_address_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateDesignatedRootAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_designated_root_address" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/designated-root-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateDesignatedRootAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority The bridge priority of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority The bridge priority of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateDesignatedRootPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_designated_root_priority" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/designated-root-priority', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateDesignatedRootPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateForwardingDelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/forwarding-delay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateForwardingDelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_hello_time(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_hello_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_hello_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_hello_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_hello_time_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_hello_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_hello_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateHelloTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_hello_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/hello-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateHelloTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_hold_count(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_hold_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_hold_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_hold_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_hold_count_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_hold_count  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_hold_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateHoldCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_hold_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/hold-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateHoldCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_hold_time(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_hold_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_hold_time This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_hold_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateHoldTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_hold_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_hold_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_hold_time_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_hold_time  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_hold_time This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_hold_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateHoldTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_hold_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/hold-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateHoldTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_last_topology_change(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_last_topology_change  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_last_topology_change The time at which the last topology change was detected by the bridge entity. The value is expressed relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_last_topology_change(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateLastTopologyChange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_last_topology_change_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_last_topology_change_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_last_topology_change_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_last_topology_change  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_last_topology_change The time at which the last topology change was detected by the bridge entity. The value is expressed relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_last_topology_change_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateLastTopologyChange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_last_topology_change" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/last-topology-change', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateLastTopologyChange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_max_age(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_max_age(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_max_age_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_max_age_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_max_age_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_max_age  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_max_age_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateMaxAge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_max_age" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/max-age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateMaxAge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_root_cost(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_root_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_root_cost The cost of the path to the root as seen from this bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_root_cost(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateRootCost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_root_cost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_root_cost_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_root_cost_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_root_cost  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_root_cost The cost of the path to the root as seen from this bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_root_cost_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateRootCost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_root_cost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/root-cost', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateRootCost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_root_port(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_root_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_root_port The port number of the port which offers the lowest cost path from this bridge to the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_root_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateRootPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_root_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_root_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_root_port_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_root_port  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_root_port The port number of the port which offers the lowest cost path from this bridge to the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_root_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateRootPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_root_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/root-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateRootPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_spanning_tree_stp_rstp_state_topology_changes(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_topology_changes  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_topology_changes The total number of topology changes detected by this bridge since the management entity was last reset or initialized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_topology_changes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateTopologyChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_spanning_tree_stp_rstp_state_topology_changes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_spanning_tree_stp_rstp_state_topology_changes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_spanning_tree_stp_rstp_state_topology_changes_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_spanning_tree_stp_rstp_state_topology_changes  # noqa: E501

        OperationId: get_openconfig_spanning_tree_stp_rstp_state_topology_changes The total number of topology changes detected by this bridge since the management entity was last reset or initialized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_spanning_tree_stp_rstp_state_topology_changes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigSpanningTreeStpRstpStateTopologyChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_spanning_tree_stp_rstp_state_topology_changes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/state/topology-changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigSpanningTreeStpRstpStateTopologyChanges',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_spanning_tree_stp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchListOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchListOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchListOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchListOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp Top-level container for spanning tree configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp Top-level container for spanning tree configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobal body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobal body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global_config_bpdu_filter(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_bpdu_filter  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_bpdu_filter(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigBpduFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_bpdu_filter  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigBpduFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global_config_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global_config_bpdu_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpdu-filter', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global_config_bpdu_guard(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_bpdu_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_bpdu_guard(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigBpduGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_bpdu_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigBpduGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global_config_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global_config_bpdu_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpdu-guard', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigBpduguardTimeoutRecovery body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigBpduguardTimeoutRecovery body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpduguard-timeout-recovery', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global_config_bridge_assurance(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_bridge_assurance  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_bridge_assurance(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigBridgeAssurance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_bridge_assurance  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigBridgeAssurance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global_config_bridge_assurance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global_config_bridge_assurance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bridge-assurance', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global_config_enabled_protocol(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_enabled_protocol(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global_config_enabled_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global_config_enabled_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/enabled-protocol', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigEtherchannelMisconfigGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigEtherchannelMisconfigGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/etherchannel-misconfig-guard', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_global_config_loop_guard(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_loop_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_loop_guard(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigLoopGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_global_config_loop_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_global_config_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpGlobalConfigLoopGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_global_config_loop_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_global_config_loop_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/loop-guard', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_interfaces(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_interfaces_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_interfaces_interface(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config Configuration data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config Configuration data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/bpdu-filter', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/bpdu-guard', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/edge-port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/guard', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigLinkType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpInterfacesInterfaceConfigLinkType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_interfaces_interface_config_link_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/link-type', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp Multi Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp Multi Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_config_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/forwarding-delay', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_config_hello_time(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_hello_time  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_hello_time(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_hello_time  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/hello-time', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_config_hold_count(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_hold_count  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_hold_count(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_hold_count  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_config_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/hold-count', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_config_max_age(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_max_age  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_max_age(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_max_age  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_config_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/max-age', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_config_max_hop(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_max_hop  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_max_hop(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigMaxHop body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_max_hop  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigMaxHop body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_config_max_hop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_config_max_hop`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/max-hop', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_config_name(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_config_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_config_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/name', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_config_revision(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_revision  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_revision(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigRevision body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_config_revision  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_config_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpConfigRevision body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_config_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_config_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/revision', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances Configuration and operation data for MSTP instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpMstInstances body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances Configuration and operation data for MSTP instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpMstpMstInstances body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config Configuration data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config Configuration data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config/bridge-priority', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config/vlan', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config(self, mst_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(self, mst_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config/cost', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority(self, mst_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config/port-priority', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst Rapid per vlan Spanning-tree protocol configuration and operational data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRapidPvst body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst Rapid per vlan Spanning-tree protocol configuration and operational data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRapidPvst body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config Configuration data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config Configuration data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/bridge-priority', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/forwarding-delay', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/hello-time', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/hold-count', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/max-age', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config/cost', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config/port-priority', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp Rapid Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp Rapid Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_config(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/bridge-priority', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_config_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/forwarding-delay', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_config_hello_time(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_hello_time(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/hello-time', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_config_hold_count(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_hold_count  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_hold_count(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_hold_count  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_config_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/hold-count', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_config_max_age(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_max_age  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_max_age(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_config_max_age  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_config_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/max-age', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_interfaces(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigSpanningTreeStpRstpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config/cost', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PatchOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config/port-priority', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_spanning_tree_stp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PostListOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PostListOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PostListOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PostListOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_global(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_global(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpGlobal body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_global_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_global_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_global_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_global_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpGlobal body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_global_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_global_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpGlobalConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_global_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_global_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_global_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_global_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpGlobalConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_global_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_global_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_global_config_enabled_protocol(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_global_config_enabled_protocol(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_global_config_enabled_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_global_config_enabled_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_interfaces_interface_config Configuration data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_interfaces_interface_config Configuration data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_spanning_tree_stp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_mstp_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpMstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_mstp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpMstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_mstp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_mstp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_mstp_config_name(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_config_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpMstpConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpMstpConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_mstp_config_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_mstp_config_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config(self, mst_id, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config Configuration data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config Configuration data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(self, mst_id, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config(self, mst_id, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(self, mst_id, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config(self, vlan_id, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config Configuration data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRapidPvstVlanConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config Configuration data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRapidPvstVlanConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(self, vlan_id, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_rstp_config(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rstp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpRstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_rstp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpRstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_rstp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_rstp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_rstp_config_hello_time(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rstp_config_hello_time(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpRstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigSpanningTreeStpRstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_rstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_rstp_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PostOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_spanning_tree_stp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutListOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutListOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutListOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutListOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp Top-level container for spanning tree configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp Top-level container for spanning tree configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobal body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global Global configuration and state data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobal body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config Global spanning tree configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global_config_bpdu_filter(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_bpdu_filter  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_bpdu_filter(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigBpduFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_bpdu_filter  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_bpdu_filter_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigBpduFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global_config_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global_config_bpdu_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpdu-filter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global_config_bpdu_guard(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_bpdu_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_bpdu_guard(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigBpduGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_bpdu_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_bpdu_guard_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigBpduGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global_config_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global_config_bpdu_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpdu-guard', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigBpduguardTimeoutRecovery body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery Amount of time, in seconds, the interface receiving BPDUs is disabled. Once the timeout expires, the interface is brought back into service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigBpduguardTimeoutRecovery body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global_config_bpduguard_timeout_recovery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bpduguard-timeout-recovery', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global_config_bridge_assurance(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_bridge_assurance  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_bridge_assurance(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigBridgeAssurance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_bridge_assurance  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_bridge_assurance Enable bridge assurance to protect against unidirectional link failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_bridge_assurance_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigBridgeAssurance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global_config_bridge_assurance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global_config_bridge_assurance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/bridge-assurance', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global_config_enabled_protocol(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_enabled_protocol(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_enabled_protocol  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_enabled_protocol List of the spanning tree protocols enabled on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_enabled_protocol_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigEnabledProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global_config_enabled_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global_config_enabled_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/enabled-protocol', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigEtherchannelMisconfigGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard EtherChannel guard detects a misconfigured EtherChannel when interfaces on the switch are configured as an EtherChannel while interfaces on the other device are not or when not all the interfaces on the other device are in the same EtherChannel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigEtherchannelMisconfigGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global_config_etherchannel_misconfig_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/etherchannel-misconfig-guard', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_global_config_loop_guard(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_loop_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_loop_guard(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigLoopGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_global_config_loop_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_global_config_loop_guard The loop guard default setting for the bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_global_config_loop_guard_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpGlobalConfigLoopGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_global_config_loop_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_global_config_loop_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/global/config/loop-guard', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_interfaces(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_interfaces_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_interfaces_interface(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config Configuration data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config Configuration data for STP on each bridge port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter Enable edge port BPDU filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/bpdu-filter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard Enable edge port BPDU guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigBpduGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_bpdu_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/bpdu-guard', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port Configure the edge port state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigEdgePort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_edge_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/edge-port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_guard(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_guard(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_guard  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_guard Enable root guard or loop guard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_guard_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigGuard body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_interfaces_interface_config_guard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_guard`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_guard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/guard', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigLinkType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type specifies the interface's link type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpInterfacesInterfaceConfigLinkType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_interfaces_interface_config_link_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/interfaces/interface={name}/config/link-type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp Multi Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp Multi Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config Configuration data for MSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_config_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/forwarding-delay', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_config_hello_time(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_hello_time  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_hello_time(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_hello_time  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_hello_time_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/hello-time', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_config_hold_count(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_hold_count  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_hold_count(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_hold_count  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_hold_count_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_config_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/hold-count', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_config_max_age(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_max_age  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_max_age(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_max_age  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_max_age_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_config_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/max-age', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_config_max_hop(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_max_hop  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_max_hop(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigMaxHop body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_max_hop  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_max_hop The max hop determines the number of bridges in an MST region that a BPDU can traverse before it is discarded  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_max_hop_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigMaxHop body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_config_max_hop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_config_max_hop`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/max-hop', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_config_name(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_name(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_name  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_name The Configuration Name in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_name_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigName body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_config_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_config_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_config_revision(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_revision  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_revision(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigRevision body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_config_revision  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_config_revision The Revision Level in the MST Configuration Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_config_revision_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpConfigRevision body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_config_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_config_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/config/revision', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances Configuration and operation data for MSTP instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpMstInstances body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances Configuration and operation data for MSTP instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpMstpMstInstances body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance List of the mstp instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstance body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config Configuration data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config Configuration data for MSTP instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config/bridge-priority', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan list of vlans mapped to the MST instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceConfigVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_config_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/config/vlan', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(self, mst_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_with_http_info(mst_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(self, mst_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config(self, mst_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(self, mst_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config/cost', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority(self, mst_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(self, mst_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority_with_http_info(mst_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mst_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpMstpMstInstancesMstInstanceInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mst_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mst_id' is set
        if ('mst_id' not in params or
                params['mst_id'] is None):
            raise ValueError("Missing the required parameter `mst_id` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_mstp_mst_instances_mst_instance_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mst_id' in params:
            path_params['mst-id'] = params['mst_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/mstp/mst-instances/mst-instance={mst-id}/interfaces/interface={name}/config/port-priority', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst Rapid per vlan Spanning-tree protocol configuration and operational data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRapidPvst body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst Rapid per vlan Spanning-tree protocol configuration and operational data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRapidPvst body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan List of the vlans  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config Configuration data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config Configuration data for each vlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/bridge-priority', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/forwarding-delay', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/hello-time', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/hold-count', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_config_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/config/max-age', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(self, vlan_id, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_with_http_info(vlan_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config/cost', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(self, vlan_id, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority_with_http_info(vlan_id, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vlan_id: Reference to the list key (required)
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRapidPvstVlanInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vlan_id', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vlan_id' is set
        if ('vlan_id' not in params or
                params['vlan_id'] is None):
            raise ValueError("Missing the required parameter `vlan_id` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rapid_pvst_vlan_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan_id' in params:
            path_params['vlan-id'] = params['vlan_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rapid-pvst/vlan={vlan-id}/interfaces/interface={name}/config/port-priority', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp Rapid Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp Rapid Spanning-tree protocol configuration and operation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_config(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config Configuration data for RSTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_config_bridge_priority(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_bridge_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_bridge_priority(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_bridge_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_bridge_priority The manageable component of the Bridge Identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_bridge_priority_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigBridgePriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_config_bridge_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_config_bridge_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/bridge-priority', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay The delay used by STP bridges to transition root and designated ports to forwarding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigForwardingDelay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_config_forwarding_delay`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/forwarding-delay', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_config_hello_time(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_hello_time(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_hello_time  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_hello_time The interval between periodic transmissions of configuration messages by designated ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_hello_time_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigHelloTime body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_config_hello_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_config_hello_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/hello-time', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_config_hold_count(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_hold_count  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_hold_count(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_hold_count  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_hold_count the maximum number of BPDUs per second that the switch can send from an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_hold_count_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigHoldCount body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_config_hold_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_config_hold_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/hold-count', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_config_max_age(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_max_age  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_max_age(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_config_max_age  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_config_max_age The maximum age of the information transmitted by the bridge when it is the root bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_config_max_age_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpConfigMaxAge body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_config_max_age" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_config_max_age`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/config/max-age', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_interfaces(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces Enclosing container for the list of interface references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigSpanningTreeStpRstpInterfaces body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_interfaces_interface(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_interface(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces_interface  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces_interface List of interfaces on which STP is enable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRstpInterfacesInterface body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_interfaces_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config Configuration data for STP on each interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost The port's contribution, when it is the Root Port, to the Root Path Cost for the Bridge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigCost body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config/cost', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority  # noqa: E501

        OperationId: put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority The manageable component of the Port Identifier, also known as the Port Priority  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the list key (required)
        :param PutOpenconfigSpanningTreeStpRstpInterfacesInterfaceConfigPortPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_spanning_tree_stp_rstp_interfaces_interface_config_port_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-spanning-tree:stp/rstp/interfaces/interface={name}/config/port-priority', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
