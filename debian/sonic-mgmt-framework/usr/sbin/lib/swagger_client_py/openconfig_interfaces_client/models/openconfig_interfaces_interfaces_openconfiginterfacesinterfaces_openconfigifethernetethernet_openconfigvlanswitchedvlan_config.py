# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interface_mode': 'str',
        'native_vlan': 'int',
        'access_vlan': 'int',
        'trunk_vlans': 'list[str]'
    }

    attribute_map = {
        'interface_mode': 'interface-mode',
        'native_vlan': 'native-vlan',
        'access_vlan': 'access-vlan',
        'trunk_vlans': 'trunk-vlans'
    }

    def __init__(self, interface_mode=None, native_vlan=None, access_vlan=None, trunk_vlans=None):  # noqa: E501
        """OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig - a model defined in Swagger"""  # noqa: E501

        self._interface_mode = None
        self._native_vlan = None
        self._access_vlan = None
        self._trunk_vlans = None
        self.discriminator = None

        if interface_mode is not None:
            self.interface_mode = interface_mode
        if native_vlan is not None:
            self.native_vlan = native_vlan
        if access_vlan is not None:
            self.access_vlan = access_vlan
        if trunk_vlans is not None:
            self.trunk_vlans = trunk_vlans

    @property
    def interface_mode(self):
        """Gets the interface_mode of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501


        :return: The interface_mode of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501
        :rtype: str
        """
        return self._interface_mode

    @interface_mode.setter
    def interface_mode(self, interface_mode):
        """Sets the interface_mode of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.


        :param interface_mode: The interface_mode of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCESS", "TRUNK"]  # noqa: E501
        if interface_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `interface_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(interface_mode, allowed_values)
            )

        self._interface_mode = interface_mode

    @property
    def native_vlan(self):
        """Gets the native_vlan of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501


        :return: The native_vlan of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501
        :rtype: int
        """
        return self._native_vlan

    @native_vlan.setter
    def native_vlan(self, native_vlan):
        """Sets the native_vlan of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.


        :param native_vlan: The native_vlan of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501
        :type: int
        """

        self._native_vlan = native_vlan

    @property
    def access_vlan(self):
        """Gets the access_vlan of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501


        :return: The access_vlan of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501
        :rtype: int
        """
        return self._access_vlan

    @access_vlan.setter
    def access_vlan(self, access_vlan):
        """Sets the access_vlan of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.


        :param access_vlan: The access_vlan of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501
        :type: int
        """

        self._access_vlan = access_vlan

    @property
    def trunk_vlans(self):
        """Gets the trunk_vlans of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501


        :return: The trunk_vlans of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._trunk_vlans

    @trunk_vlans.setter
    def trunk_vlans(self, trunk_vlans):
        """Sets the trunk_vlans of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.


        :param trunk_vlans: The trunk_vlans of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig.  # noqa: E501
        :type: list[str]
        """

        self._trunk_vlans = trunk_vlans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetOpenconfigvlanswitchedvlanConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
