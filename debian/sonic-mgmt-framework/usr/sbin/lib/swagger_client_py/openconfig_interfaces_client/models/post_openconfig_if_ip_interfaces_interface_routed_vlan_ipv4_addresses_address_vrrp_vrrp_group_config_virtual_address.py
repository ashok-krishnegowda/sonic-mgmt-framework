# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_interfaces_client.models.openconfig_if_ip_interfaces_interface_routed_vlan_ipv4_addresses_address_vrrp_vrrp_group_config_accept_mode import OpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigAcceptMode  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ip_interfaces_interface_routed_vlan_ipv4_addresses_address_vrrp_vrrp_group_config_advertisement_interval import OpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigAdvertisementInterval  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ip_interfaces_interface_routed_vlan_ipv4_addresses_address_vrrp_vrrp_group_config_preempt import OpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigPreempt  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ip_interfaces_interface_routed_vlan_ipv4_addresses_address_vrrp_vrrp_group_config_preempt_delay import OpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigPreemptDelay  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ip_interfaces_interface_routed_vlan_ipv4_addresses_address_vrrp_vrrp_group_config_priority import OpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigPriority  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ip_interfaces_interface_routed_vlan_ipv4_addresses_address_vrrp_vrrp_group_config_virtual_address import OpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress  # noqa: F401,E501


class PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_if_ipvirtual_address': 'list[str]',
        'openconfig_if_ippriority': 'int',
        'openconfig_if_ippreempt': 'bool',
        'openconfig_if_ippreempt_delay': 'int',
        'openconfig_if_ipaccept_mode': 'bool',
        'openconfig_if_ipadvertisement_interval': 'int'
    }

    attribute_map = {
        'openconfig_if_ipvirtual_address': 'openconfig-if-ip:virtual-address',
        'openconfig_if_ippriority': 'openconfig-if-ip:priority',
        'openconfig_if_ippreempt': 'openconfig-if-ip:preempt',
        'openconfig_if_ippreempt_delay': 'openconfig-if-ip:preempt-delay',
        'openconfig_if_ipaccept_mode': 'openconfig-if-ip:accept-mode',
        'openconfig_if_ipadvertisement_interval': 'openconfig-if-ip:advertisement-interval'
    }

    def __init__(self, openconfig_if_ipvirtual_address=None, openconfig_if_ippriority=None, openconfig_if_ippreempt=None, openconfig_if_ippreempt_delay=None, openconfig_if_ipaccept_mode=None, openconfig_if_ipadvertisement_interval=None):  # noqa: E501
        """PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress - a model defined in Swagger"""  # noqa: E501

        self._openconfig_if_ipvirtual_address = None
        self._openconfig_if_ippriority = None
        self._openconfig_if_ippreempt = None
        self._openconfig_if_ippreempt_delay = None
        self._openconfig_if_ipaccept_mode = None
        self._openconfig_if_ipadvertisement_interval = None
        self.discriminator = None

        if openconfig_if_ipvirtual_address is not None:
            self.openconfig_if_ipvirtual_address = openconfig_if_ipvirtual_address
        if openconfig_if_ippriority is not None:
            self.openconfig_if_ippriority = openconfig_if_ippriority
        if openconfig_if_ippreempt is not None:
            self.openconfig_if_ippreempt = openconfig_if_ippreempt
        if openconfig_if_ippreempt_delay is not None:
            self.openconfig_if_ippreempt_delay = openconfig_if_ippreempt_delay
        if openconfig_if_ipaccept_mode is not None:
            self.openconfig_if_ipaccept_mode = openconfig_if_ipaccept_mode
        if openconfig_if_ipadvertisement_interval is not None:
            self.openconfig_if_ipadvertisement_interval = openconfig_if_ipadvertisement_interval

    @property
    def openconfig_if_ipvirtual_address(self):
        """Gets the openconfig_if_ipvirtual_address of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501


        :return: The openconfig_if_ipvirtual_address of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :rtype: list[str]
        """
        return self._openconfig_if_ipvirtual_address

    @openconfig_if_ipvirtual_address.setter
    def openconfig_if_ipvirtual_address(self, openconfig_if_ipvirtual_address):
        """Sets the openconfig_if_ipvirtual_address of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.


        :param openconfig_if_ipvirtual_address: The openconfig_if_ipvirtual_address of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :type: list[str]
        """

        self._openconfig_if_ipvirtual_address = openconfig_if_ipvirtual_address

    @property
    def openconfig_if_ippriority(self):
        """Gets the openconfig_if_ippriority of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501


        :return: The openconfig_if_ippriority of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_if_ippriority

    @openconfig_if_ippriority.setter
    def openconfig_if_ippriority(self, openconfig_if_ippriority):
        """Sets the openconfig_if_ippriority of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.


        :param openconfig_if_ippriority: The openconfig_if_ippriority of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :type: int
        """

        self._openconfig_if_ippriority = openconfig_if_ippriority

    @property
    def openconfig_if_ippreempt(self):
        """Gets the openconfig_if_ippreempt of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501


        :return: The openconfig_if_ippreempt of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_if_ippreempt

    @openconfig_if_ippreempt.setter
    def openconfig_if_ippreempt(self, openconfig_if_ippreempt):
        """Sets the openconfig_if_ippreempt of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.


        :param openconfig_if_ippreempt: The openconfig_if_ippreempt of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :type: bool
        """

        self._openconfig_if_ippreempt = openconfig_if_ippreempt

    @property
    def openconfig_if_ippreempt_delay(self):
        """Gets the openconfig_if_ippreempt_delay of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501


        :return: The openconfig_if_ippreempt_delay of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_if_ippreempt_delay

    @openconfig_if_ippreempt_delay.setter
    def openconfig_if_ippreempt_delay(self, openconfig_if_ippreempt_delay):
        """Sets the openconfig_if_ippreempt_delay of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.


        :param openconfig_if_ippreempt_delay: The openconfig_if_ippreempt_delay of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :type: int
        """

        self._openconfig_if_ippreempt_delay = openconfig_if_ippreempt_delay

    @property
    def openconfig_if_ipaccept_mode(self):
        """Gets the openconfig_if_ipaccept_mode of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501


        :return: The openconfig_if_ipaccept_mode of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_if_ipaccept_mode

    @openconfig_if_ipaccept_mode.setter
    def openconfig_if_ipaccept_mode(self, openconfig_if_ipaccept_mode):
        """Sets the openconfig_if_ipaccept_mode of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.


        :param openconfig_if_ipaccept_mode: The openconfig_if_ipaccept_mode of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :type: bool
        """

        self._openconfig_if_ipaccept_mode = openconfig_if_ipaccept_mode

    @property
    def openconfig_if_ipadvertisement_interval(self):
        """Gets the openconfig_if_ipadvertisement_interval of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501


        :return: The openconfig_if_ipadvertisement_interval of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_if_ipadvertisement_interval

    @openconfig_if_ipadvertisement_interval.setter
    def openconfig_if_ipadvertisement_interval(self, openconfig_if_ipadvertisement_interval):
        """Sets the openconfig_if_ipadvertisement_interval of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.


        :param openconfig_if_ipadvertisement_interval: The openconfig_if_ipadvertisement_interval of this PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.  # noqa: E501
        :type: int
        """

        self._openconfig_if_ipadvertisement_interval = openconfig_if_ipadvertisement_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOpenconfigIfIpInterfacesInterfaceRoutedVlanIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
