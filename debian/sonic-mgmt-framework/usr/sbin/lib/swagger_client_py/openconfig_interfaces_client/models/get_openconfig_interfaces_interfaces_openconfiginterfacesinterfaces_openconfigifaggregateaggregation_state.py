# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lag_type': 'str',
        'min_links': 'int',
        'lag_speed': 'int',
        'member': 'list[str]'
    }

    attribute_map = {
        'lag_type': 'lag-type',
        'min_links': 'min-links',
        'lag_speed': 'lag-speed',
        'member': 'member'
    }

    def __init__(self, lag_type=None, min_links=None, lag_speed=None, member=None):  # noqa: E501
        """GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState - a model defined in Swagger"""  # noqa: E501

        self._lag_type = None
        self._min_links = None
        self._lag_speed = None
        self._member = None
        self.discriminator = None

        if lag_type is not None:
            self.lag_type = lag_type
        if min_links is not None:
            self.min_links = min_links
        if lag_speed is not None:
            self.lag_speed = lag_speed
        if member is not None:
            self.member = member

    @property
    def lag_type(self):
        """Gets the lag_type of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501


        :return: The lag_type of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501
        :rtype: str
        """
        return self._lag_type

    @lag_type.setter
    def lag_type(self, lag_type):
        """Sets the lag_type of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.


        :param lag_type: The lag_type of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501
        :type: str
        """
        allowed_values = ["LACP", "STATIC"]  # noqa: E501
        if lag_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lag_type` ({0}), must be one of {1}"  # noqa: E501
                .format(lag_type, allowed_values)
            )

        self._lag_type = lag_type

    @property
    def min_links(self):
        """Gets the min_links of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501


        :return: The min_links of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501
        :rtype: int
        """
        return self._min_links

    @min_links.setter
    def min_links(self, min_links):
        """Sets the min_links of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.


        :param min_links: The min_links of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501
        :type: int
        """

        self._min_links = min_links

    @property
    def lag_speed(self):
        """Gets the lag_speed of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501


        :return: The lag_speed of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501
        :rtype: int
        """
        return self._lag_speed

    @lag_speed.setter
    def lag_speed(self, lag_speed):
        """Sets the lag_speed of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.


        :param lag_speed: The lag_speed of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501
        :type: int
        """

        self._lag_speed = lag_speed

    @property
    def member(self):
        """Gets the member of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501


        :return: The member of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501
        :rtype: list[str]
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.


        :param member: The member of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState.  # noqa: E501
        :type: list[str]
        """

        self._member = member

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifaggregateaggregationState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
