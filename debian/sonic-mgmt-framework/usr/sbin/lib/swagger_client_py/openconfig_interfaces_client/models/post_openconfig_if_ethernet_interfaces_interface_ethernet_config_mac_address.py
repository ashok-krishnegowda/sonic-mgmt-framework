# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_interfaces_client.models.openconfig_if_aggregate_interfaces_interface_ethernet_config_aggregate_id import OpenconfigIfAggregateInterfacesInterfaceEthernetConfigAggregateId  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ethernet_interfaces_interface_ethernet_config_auto_negotiate import OpenconfigIfEthernetInterfacesInterfaceEthernetConfigAutoNegotiate  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ethernet_interfaces_interface_ethernet_config_duplex_mode import OpenconfigIfEthernetInterfacesInterfaceEthernetConfigDuplexMode  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ethernet_interfaces_interface_ethernet_config_enable_flow_control import OpenconfigIfEthernetInterfacesInterfaceEthernetConfigEnableFlowControl  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ethernet_interfaces_interface_ethernet_config_mac_address import OpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress  # noqa: F401,E501
from openconfig_interfaces_client.models.openconfig_if_ethernet_interfaces_interface_ethernet_config_port_speed import OpenconfigIfEthernetInterfacesInterfaceEthernetConfigPortSpeed  # noqa: F401,E501


class PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_if_ethernetmac_address': 'str',
        'openconfig_if_ethernetauto_negotiate': 'bool',
        'openconfig_if_ethernetduplex_mode': 'str',
        'openconfig_if_ethernetport_speed': 'str',
        'openconfig_if_ethernetenable_flow_control': 'bool',
        'openconfig_if_aggregateaggregate_id': 'str'
    }

    attribute_map = {
        'openconfig_if_ethernetmac_address': 'openconfig-if-ethernet:mac-address',
        'openconfig_if_ethernetauto_negotiate': 'openconfig-if-ethernet:auto-negotiate',
        'openconfig_if_ethernetduplex_mode': 'openconfig-if-ethernet:duplex-mode',
        'openconfig_if_ethernetport_speed': 'openconfig-if-ethernet:port-speed',
        'openconfig_if_ethernetenable_flow_control': 'openconfig-if-ethernet:enable-flow-control',
        'openconfig_if_aggregateaggregate_id': 'openconfig-if-aggregate:aggregate-id'
    }

    def __init__(self, openconfig_if_ethernetmac_address=None, openconfig_if_ethernetauto_negotiate=None, openconfig_if_ethernetduplex_mode=None, openconfig_if_ethernetport_speed=None, openconfig_if_ethernetenable_flow_control=None, openconfig_if_aggregateaggregate_id=None):  # noqa: E501
        """PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress - a model defined in Swagger"""  # noqa: E501

        self._openconfig_if_ethernetmac_address = None
        self._openconfig_if_ethernetauto_negotiate = None
        self._openconfig_if_ethernetduplex_mode = None
        self._openconfig_if_ethernetport_speed = None
        self._openconfig_if_ethernetenable_flow_control = None
        self._openconfig_if_aggregateaggregate_id = None
        self.discriminator = None

        if openconfig_if_ethernetmac_address is not None:
            self.openconfig_if_ethernetmac_address = openconfig_if_ethernetmac_address
        if openconfig_if_ethernetauto_negotiate is not None:
            self.openconfig_if_ethernetauto_negotiate = openconfig_if_ethernetauto_negotiate
        if openconfig_if_ethernetduplex_mode is not None:
            self.openconfig_if_ethernetduplex_mode = openconfig_if_ethernetduplex_mode
        if openconfig_if_ethernetport_speed is not None:
            self.openconfig_if_ethernetport_speed = openconfig_if_ethernetport_speed
        if openconfig_if_ethernetenable_flow_control is not None:
            self.openconfig_if_ethernetenable_flow_control = openconfig_if_ethernetenable_flow_control
        if openconfig_if_aggregateaggregate_id is not None:
            self.openconfig_if_aggregateaggregate_id = openconfig_if_aggregateaggregate_id

    @property
    def openconfig_if_ethernetmac_address(self):
        """Gets the openconfig_if_ethernetmac_address of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501


        :return: The openconfig_if_ethernetmac_address of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_if_ethernetmac_address

    @openconfig_if_ethernetmac_address.setter
    def openconfig_if_ethernetmac_address(self, openconfig_if_ethernetmac_address):
        """Sets the openconfig_if_ethernetmac_address of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.


        :param openconfig_if_ethernetmac_address: The openconfig_if_ethernetmac_address of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :type: str
        """

        self._openconfig_if_ethernetmac_address = openconfig_if_ethernetmac_address

    @property
    def openconfig_if_ethernetauto_negotiate(self):
        """Gets the openconfig_if_ethernetauto_negotiate of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501


        :return: The openconfig_if_ethernetauto_negotiate of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_if_ethernetauto_negotiate

    @openconfig_if_ethernetauto_negotiate.setter
    def openconfig_if_ethernetauto_negotiate(self, openconfig_if_ethernetauto_negotiate):
        """Sets the openconfig_if_ethernetauto_negotiate of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.


        :param openconfig_if_ethernetauto_negotiate: The openconfig_if_ethernetauto_negotiate of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :type: bool
        """

        self._openconfig_if_ethernetauto_negotiate = openconfig_if_ethernetauto_negotiate

    @property
    def openconfig_if_ethernetduplex_mode(self):
        """Gets the openconfig_if_ethernetduplex_mode of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501


        :return: The openconfig_if_ethernetduplex_mode of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_if_ethernetduplex_mode

    @openconfig_if_ethernetduplex_mode.setter
    def openconfig_if_ethernetduplex_mode(self, openconfig_if_ethernetduplex_mode):
        """Sets the openconfig_if_ethernetduplex_mode of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.


        :param openconfig_if_ethernetduplex_mode: The openconfig_if_ethernetduplex_mode of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL", "HALF"]  # noqa: E501
        if openconfig_if_ethernetduplex_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `openconfig_if_ethernetduplex_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(openconfig_if_ethernetduplex_mode, allowed_values)
            )

        self._openconfig_if_ethernetduplex_mode = openconfig_if_ethernetduplex_mode

    @property
    def openconfig_if_ethernetport_speed(self):
        """Gets the openconfig_if_ethernetport_speed of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501


        :return: The openconfig_if_ethernetport_speed of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_if_ethernetport_speed

    @openconfig_if_ethernetport_speed.setter
    def openconfig_if_ethernetport_speed(self, openconfig_if_ethernetport_speed):
        """Sets the openconfig_if_ethernetport_speed of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.


        :param openconfig_if_ethernetport_speed: The openconfig_if_ethernetport_speed of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :type: str
        """

        self._openconfig_if_ethernetport_speed = openconfig_if_ethernetport_speed

    @property
    def openconfig_if_ethernetenable_flow_control(self):
        """Gets the openconfig_if_ethernetenable_flow_control of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501


        :return: The openconfig_if_ethernetenable_flow_control of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :rtype: bool
        """
        return self._openconfig_if_ethernetenable_flow_control

    @openconfig_if_ethernetenable_flow_control.setter
    def openconfig_if_ethernetenable_flow_control(self, openconfig_if_ethernetenable_flow_control):
        """Sets the openconfig_if_ethernetenable_flow_control of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.


        :param openconfig_if_ethernetenable_flow_control: The openconfig_if_ethernetenable_flow_control of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :type: bool
        """

        self._openconfig_if_ethernetenable_flow_control = openconfig_if_ethernetenable_flow_control

    @property
    def openconfig_if_aggregateaggregate_id(self):
        """Gets the openconfig_if_aggregateaggregate_id of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501


        :return: The openconfig_if_aggregateaggregate_id of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_if_aggregateaggregate_id

    @openconfig_if_aggregateaggregate_id.setter
    def openconfig_if_aggregateaggregate_id(self, openconfig_if_aggregateaggregate_id):
        """Sets the openconfig_if_aggregateaggregate_id of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.


        :param openconfig_if_aggregateaggregate_id: The openconfig_if_aggregateaggregate_id of this PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress.  # noqa: E501
        :type: str
        """

        self._openconfig_if_aggregateaggregate_id = openconfig_if_aggregateaggregate_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOpenconfigIfEthernetInterfacesInterfaceEthernetConfigMacAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
