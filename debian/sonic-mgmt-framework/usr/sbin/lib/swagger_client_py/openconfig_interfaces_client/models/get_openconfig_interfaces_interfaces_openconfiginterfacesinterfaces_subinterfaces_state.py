# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_interfaces_client.models.get_openconfig_interfaces_interfaces_openconfiginterfacesinterfaces_state_counters import GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesStateCounters  # noqa: F401,E501


class GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'description': 'str',
        'enabled': 'bool',
        'name': 'str',
        'ifindex': 'int',
        'admin_status': 'str',
        'oper_status': 'str',
        'last_change': 'int',
        'logical': 'bool',
        'counters': 'GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesStateCounters'
    }

    attribute_map = {
        'index': 'index',
        'description': 'description',
        'enabled': 'enabled',
        'name': 'name',
        'ifindex': 'ifindex',
        'admin_status': 'admin-status',
        'oper_status': 'oper-status',
        'last_change': 'last-change',
        'logical': 'logical',
        'counters': 'counters'
    }

    def __init__(self, index=None, description=None, enabled=None, name=None, ifindex=None, admin_status=None, oper_status=None, last_change=None, logical=None, counters=None):  # noqa: E501
        """GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState - a model defined in Swagger"""  # noqa: E501

        self._index = None
        self._description = None
        self._enabled = None
        self._name = None
        self._ifindex = None
        self._admin_status = None
        self._oper_status = None
        self._last_change = None
        self._logical = None
        self._counters = None
        self.discriminator = None

        if index is not None:
            self.index = index
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if name is not None:
            self.name = name
        if ifindex is not None:
            self.ifindex = ifindex
        if admin_status is not None:
            self.admin_status = admin_status
        if oper_status is not None:
            self.oper_status = oper_status
        if last_change is not None:
            self.last_change = last_change
        if logical is not None:
            self.logical = logical
        if counters is not None:
            self.counters = counters

    @property
    def index(self):
        """Gets the index of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The index of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param index: The index of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def description(self):
        """Gets the description of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The description of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param description: The description of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The enabled of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param enabled: The enabled of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The name of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param name: The name of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ifindex(self):
        """Gets the ifindex of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The ifindex of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._ifindex

    @ifindex.setter
    def ifindex(self, ifindex):
        """Sets the ifindex of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param ifindex: The ifindex of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: int
        """

        self._ifindex = ifindex

    @property
    def admin_status(self):
        """Gets the admin_status of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The admin_status of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._admin_status

    @admin_status.setter
    def admin_status(self, admin_status):
        """Sets the admin_status of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param admin_status: The admin_status of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "TESTING"]  # noqa: E501
        if admin_status not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_status` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_status, allowed_values)
            )

        self._admin_status = admin_status

    @property
    def oper_status(self):
        """Gets the oper_status of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The oper_status of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: str
        """
        return self._oper_status

    @oper_status.setter
    def oper_status(self, oper_status):
        """Sets the oper_status of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param oper_status: The oper_status of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "TESTING", "UNKNOWN", "DORMANT", "NOT_PRESENT", "LOWER_LAYER_DOWN"]  # noqa: E501
        if oper_status not in allowed_values:
            raise ValueError(
                "Invalid value for `oper_status` ({0}), must be one of {1}"  # noqa: E501
                .format(oper_status, allowed_values)
            )

        self._oper_status = oper_status

    @property
    def last_change(self):
        """Gets the last_change of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The last_change of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: int
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param last_change: The last_change of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: int
        """

        self._last_change = last_change

    @property
    def logical(self):
        """Gets the logical of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The logical of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: bool
        """
        return self._logical

    @logical.setter
    def logical(self, logical):
        """Sets the logical of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param logical: The logical of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: bool
        """

        self._logical = logical

    @property
    def counters(self):
        """Gets the counters of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501


        :return: The counters of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :rtype: GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesStateCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.


        :param counters: The counters of this GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState.  # noqa: E501
        :type: GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesStateCounters
        """

        self._counters = counters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
