# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'mtu': 'int',
        'dup_addr_detect_transmits': 'int',
        'dhcp_client': 'bool'
    }

    attribute_map = {
        'enabled': 'enabled',
        'mtu': 'mtu',
        'dup_addr_detect_transmits': 'dup-addr-detect-transmits',
        'dhcp_client': 'dhcp-client'
    }

    def __init__(self, enabled=None, mtu=None, dup_addr_detect_transmits=None, dhcp_client=None):  # noqa: E501
        """OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._mtu = None
        self._dup_addr_detect_transmits = None
        self._dhcp_client = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if mtu is not None:
            self.mtu = mtu
        if dup_addr_detect_transmits is not None:
            self.dup_addr_detect_transmits = dup_addr_detect_transmits
        if dhcp_client is not None:
            self.dhcp_client = dhcp_client

    @property
    def enabled(self):
        """Gets the enabled of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501


        :return: The enabled of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.


        :param enabled: The enabled of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def mtu(self):
        """Gets the mtu of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501


        :return: The mtu of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.


        :param mtu: The mtu of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def dup_addr_detect_transmits(self):
        """Gets the dup_addr_detect_transmits of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501


        :return: The dup_addr_detect_transmits of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501
        :rtype: int
        """
        return self._dup_addr_detect_transmits

    @dup_addr_detect_transmits.setter
    def dup_addr_detect_transmits(self, dup_addr_detect_transmits):
        """Sets the dup_addr_detect_transmits of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.


        :param dup_addr_detect_transmits: The dup_addr_detect_transmits of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501
        :type: int
        """

        self._dup_addr_detect_transmits = dup_addr_detect_transmits

    @property
    def dhcp_client(self):
        """Gets the dhcp_client of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501


        :return: The dhcp_client of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501
        :rtype: bool
        """
        return self._dhcp_client

    @dhcp_client.setter
    def dhcp_client(self, dhcp_client):
        """Sets the dhcp_client of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.


        :param dhcp_client: The dhcp_client of this OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config.  # noqa: E501
        :type: bool
        """

        self._dhcp_client = dhcp_client

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesSubinterfacesOpenconfigifipipv6Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
