# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_interfaces_client.models.get_openconfig_interfaces_interfaces_openconfiginterfacesinterfaces_openconfigifethernetethernet_state_counters import GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetStateCounters  # noqa: F401,E501


class GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mac_address': 'str',
        'auto_negotiate': 'bool',
        'duplex_mode': 'str',
        'port_speed': 'str',
        'enable_flow_control': 'bool',
        'hw_mac_address': 'str',
        'negotiated_duplex_mode': 'str',
        'negotiated_port_speed': 'str',
        'counters': 'GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetStateCounters',
        'aggregate_id': 'str'
    }

    attribute_map = {
        'mac_address': 'mac-address',
        'auto_negotiate': 'auto-negotiate',
        'duplex_mode': 'duplex-mode',
        'port_speed': 'port-speed',
        'enable_flow_control': 'enable-flow-control',
        'hw_mac_address': 'hw-mac-address',
        'negotiated_duplex_mode': 'negotiated-duplex-mode',
        'negotiated_port_speed': 'negotiated-port-speed',
        'counters': 'counters',
        'aggregate_id': 'aggregate-id'
    }

    def __init__(self, mac_address=None, auto_negotiate=None, duplex_mode=None, port_speed=None, enable_flow_control=None, hw_mac_address=None, negotiated_duplex_mode=None, negotiated_port_speed=None, counters=None, aggregate_id=None):  # noqa: E501
        """GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate - a model defined in Swagger"""  # noqa: E501

        self._mac_address = None
        self._auto_negotiate = None
        self._duplex_mode = None
        self._port_speed = None
        self._enable_flow_control = None
        self._hw_mac_address = None
        self._negotiated_duplex_mode = None
        self._negotiated_port_speed = None
        self._counters = None
        self._aggregate_id = None
        self.discriminator = None

        if mac_address is not None:
            self.mac_address = mac_address
        if auto_negotiate is not None:
            self.auto_negotiate = auto_negotiate
        if duplex_mode is not None:
            self.duplex_mode = duplex_mode
        if port_speed is not None:
            self.port_speed = port_speed
        if enable_flow_control is not None:
            self.enable_flow_control = enable_flow_control
        if hw_mac_address is not None:
            self.hw_mac_address = hw_mac_address
        if negotiated_duplex_mode is not None:
            self.negotiated_duplex_mode = negotiated_duplex_mode
        if negotiated_port_speed is not None:
            self.negotiated_port_speed = negotiated_port_speed
        if counters is not None:
            self.counters = counters
        if aggregate_id is not None:
            self.aggregate_id = aggregate_id

    @property
    def mac_address(self):
        """Gets the mac_address of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The mac_address of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param mac_address: The mac_address of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def auto_negotiate(self):
        """Gets the auto_negotiate of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The auto_negotiate of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: bool
        """
        return self._auto_negotiate

    @auto_negotiate.setter
    def auto_negotiate(self, auto_negotiate):
        """Sets the auto_negotiate of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param auto_negotiate: The auto_negotiate of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: bool
        """

        self._auto_negotiate = auto_negotiate

    @property
    def duplex_mode(self):
        """Gets the duplex_mode of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The duplex_mode of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: str
        """
        return self._duplex_mode

    @duplex_mode.setter
    def duplex_mode(self, duplex_mode):
        """Sets the duplex_mode of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param duplex_mode: The duplex_mode of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL", "HALF"]  # noqa: E501
        if duplex_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `duplex_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(duplex_mode, allowed_values)
            )

        self._duplex_mode = duplex_mode

    @property
    def port_speed(self):
        """Gets the port_speed of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The port_speed of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: str
        """
        return self._port_speed

    @port_speed.setter
    def port_speed(self, port_speed):
        """Sets the port_speed of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param port_speed: The port_speed of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: str
        """

        self._port_speed = port_speed

    @property
    def enable_flow_control(self):
        """Gets the enable_flow_control of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The enable_flow_control of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: bool
        """
        return self._enable_flow_control

    @enable_flow_control.setter
    def enable_flow_control(self, enable_flow_control):
        """Sets the enable_flow_control of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param enable_flow_control: The enable_flow_control of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: bool
        """

        self._enable_flow_control = enable_flow_control

    @property
    def hw_mac_address(self):
        """Gets the hw_mac_address of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The hw_mac_address of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: str
        """
        return self._hw_mac_address

    @hw_mac_address.setter
    def hw_mac_address(self, hw_mac_address):
        """Sets the hw_mac_address of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param hw_mac_address: The hw_mac_address of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: str
        """

        self._hw_mac_address = hw_mac_address

    @property
    def negotiated_duplex_mode(self):
        """Gets the negotiated_duplex_mode of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The negotiated_duplex_mode of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: str
        """
        return self._negotiated_duplex_mode

    @negotiated_duplex_mode.setter
    def negotiated_duplex_mode(self, negotiated_duplex_mode):
        """Sets the negotiated_duplex_mode of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param negotiated_duplex_mode: The negotiated_duplex_mode of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL", "HALF"]  # noqa: E501
        if negotiated_duplex_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `negotiated_duplex_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(negotiated_duplex_mode, allowed_values)
            )

        self._negotiated_duplex_mode = negotiated_duplex_mode

    @property
    def negotiated_port_speed(self):
        """Gets the negotiated_port_speed of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The negotiated_port_speed of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: str
        """
        return self._negotiated_port_speed

    @negotiated_port_speed.setter
    def negotiated_port_speed(self, negotiated_port_speed):
        """Sets the negotiated_port_speed of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param negotiated_port_speed: The negotiated_port_speed of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: str
        """

        self._negotiated_port_speed = negotiated_port_speed

    @property
    def counters(self):
        """Gets the counters of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The counters of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetStateCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param counters: The counters of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: GetOpenconfigInterfacesInterfacesOpenconfiginterfacesinterfacesOpenconfigifethernetethernetStateCounters
        """

        self._counters = counters

    @property
    def aggregate_id(self):
        """Gets the aggregate_id of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501


        :return: The aggregate_id of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_id

    @aggregate_id.setter
    def aggregate_id(self, aggregate_id):
        """Sets the aggregate_id of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.


        :param aggregate_id: The aggregate_id of this GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate.  # noqa: E501
        :type: str
        """

        self._aggregate_id = aggregate_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigIfEthernetInterfacesInterfaceEthernetStateOpenconfigifethernetstate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
